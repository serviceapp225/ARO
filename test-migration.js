// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
import { drizzle } from 'drizzle-orm/node-postgres';
import { carListings } from './shared/schema.js';
import FileStorageManager from './server/fileStorage.js';
import sharp from 'sharp';
import { eq } from 'drizzle-orm';

const db = drizzle(process.env.DATABASE_URL);
const fileStorage = new FileStorageManager();

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...');

async function testMigration() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const allListings = await db.select().from(carListings);
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${allListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
    
    let base64Count = 0;
    let fileSystemCount = 0;
    let noPhotosCount = 0;
    
    for (const listing of allListings) {
      if (!listing.photos || !Array.isArray(listing.photos) || listing.photos.length === 0) {
        noPhotosCount++;
        console.log(`‚ö™ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ base64 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      const hasBase64Photos = listing.photos.some(photo => 
        typeof photo === 'string' && photo.startsWith('data:image/')
      );
      
      if (hasBase64Photos) {
        base64Count++;
        console.log(`üîµ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: ${listing.photos.length} base64 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - –ù–£–ñ–ù–ê –ú–ò–ì–†–ê–¶–ò–Ø`);
      } else {
        fileSystemCount++;
        console.log(`üü¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: ${listing.photos.length} —Ñ–∞–π–ª–æ–≤ - –£–ñ–ï –ú–ò–ì–†–ò–†–û–í–ê–ù–û`);
      }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${allListings.length}`);
    console.log(`   –£–∂–µ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: ${fileSystemCount}`);
    console.log(`   –ù—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è (base64): ${base64Count}`);
    console.log(`   –ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${noPhotosCount}`);
    
    if (base64Count > 0) {
      console.log(`\nüîÑ –ù—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è ${base64Count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
    } else {
      console.log(`\n‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã!`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testMigration();