// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π SMS –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è DigitalOcean VPS (188.166.61.86)
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π API OSON SMS v1

const express = require('express');
const cors = require('cors');
const crypto = require('crypto');

const app = express();
const PORT = 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: "OK",
    service: "SMS Proxy v2 for AUTOBID.TJ",
    ip: "188.166.61.86",
    timestamp: new Date().toISOString(),
    api: "OSON SMS v1"
  });
});

// SMS –ø—Ä–æ–∫—Å–∏ endpoint - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è OSON SMS v1
app.post('/api/send-sms', async (req, res) => {
  console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Replit:', req.body);
  
  const { login, hash, sender, to, text } = req.body;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!login || !hash || !sender || !to || !text) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { login: !!login, hash: !!hash, sender: !!sender, to: !!to, text: !!text });
    return res.status(400).json({
      success: false,
      message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: login, hash, sender, to, text'
    });
  }

  // –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º +992 –µ—Å–ª–∏ –µ—Å—Ç—å)
  let cleanPhone = to.toString();
  if (cleanPhone.startsWith('+992')) {
    cleanPhone = cleanPhone.substring(4); // –£–±–∏—Ä–∞–µ–º +992
  } else if (cleanPhone.startsWith('992')) {
    cleanPhone = cleanPhone.substring(3); // –£–±–∏—Ä–∞–µ–º 992
  }
  
  console.log(`üì± –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${to} ‚Üí ${cleanPhone}`);

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π txn_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SMS
    const txn_id = `autobid_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ OSON API v1:`, {
      login: login,
      sender: sender,
      phone: cleanPhone,
      txn_id: txn_id,
      text: text.substring(0, 20) + '...'
    });
    
    // –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è OSON SMS v1
    const apiUrl = new URL('https://api.osonsms.com/sendsms_v1.php');
    apiUrl.searchParams.append('from', sender);
    apiUrl.searchParams.append('phone_number', cleanPhone);
    apiUrl.searchParams.append('msg', encodeURIComponent(text));
    apiUrl.searchParams.append('str_hash', hash);
    apiUrl.searchParams.append('txn_id', txn_id);
    apiUrl.searchParams.append('login', login);

    console.log(`üåê URL –∑–∞–ø—Ä–æ—Å–∞: ${apiUrl.toString()}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OSON SMS API v1
    const fetch = (await import('node-fetch')).default;
    const response = await fetch(apiUrl.toString(), {
      method: 'GET',
      headers: {
        'User-Agent': 'AUTOBID.TJ VPS Proxy'
      }
    });

    const result = await response.text();
    console.log(`üì® –û—Ç–≤–µ—Ç OSON SMS API:`, result);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (response.ok) {
      console.log('‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ OSON API v1');
      res.json({
        success: true,
        message: 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        osonsms_response: result,
        txn_id: txn_id
      });
    } else {
      console.error('‚ùå HTTP –æ—à–∏–±–∫–∞ OSON SMS API:', response.status, result);
      res.status(500).json({
        success: false,
        message: `HTTP –æ—à–∏–±–∫–∞ OSON SMS API: ${response.status}`,
        osonsms_response: result
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ SMS –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä v2 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://188.166.61.86:${PORT}`);
  console.log(`üîó Health check: http://188.166.61.86:${PORT}/health`);
  console.log(`üì± SMS endpoint: http://188.166.61.86:${PORT}/api/send-sms`);
  console.log(`üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: SMS_LOGIN=${process.env.SMS_LOGIN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});