#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { spawn } from 'child_process';

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DEPLOYMENT');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
const checkFile = (filepath, name) => {
  if (fs.existsSync(filepath)) {
    const stats = fs.statSync(filepath);
    console.log(`‚úÖ ${name}: ${stats.size} bytes`);
    return true;
  } else {
    console.log(`‚ùå ${name}: –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    return false;
  }
};

console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:');
checkFile('dist/index.js', '–°–µ—Ä–≤–µ—Ä');
checkFile('dist/package.json', 'Package.json');
checkFile('dist/autoauction.db', '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö');
checkFile('dist/public/index.html', '–§—Ä–æ–Ω—Ç–µ–Ω–¥');
checkFile('dist/.env', 'Env —Ñ–∞–π–ª');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ package.json
console.log('\nüìÑ PACKAGE.JSON:');
if (fs.existsSync('dist/package.json')) {
  const pkg = JSON.parse(fs.readFileSync('dist/package.json', 'utf8'));
  console.log('Start script:', pkg.scripts?.start || '–û–¢–°–£–¢–°–¢–í–£–ï–¢');
  console.log('Dependencies:', Object.keys(pkg.dependencies || {}).length);
  console.log('Type:', pkg.type || '–û–¢–°–£–¢–°–¢–í–£–ï–¢');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
console.log('\nüöÄ –¢–ï–°–¢ –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê:');
const testServer = spawn('node', ['index.js'], { 
  cwd: 'dist',
  stdio: 'pipe',
  env: { ...process.env, NODE_ENV: 'production', PORT: '3000' }
});

let serverOutput = '';
let serverStarted = false;

testServer.stdout.on('data', (data) => {
  serverOutput += data.toString();
  if (data.toString().includes('serving on port')) {
    serverStarted = true;
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ');
    testServer.kill();
  }
});

testServer.stderr.on('data', (data) => {
  console.log('‚ùå –û–®–ò–ë–ö–ê:', data.toString());
});

// –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
setTimeout(() => {
  if (!serverStarted) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥');
    console.log('üìã –í—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log(serverOutput);
    testServer.kill();
  }
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  if (serverStarted) {
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ deployment');
    console.log('üëâ –ú–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É Deploy –≤ Replit');
  } else {
    console.log('‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º');
    console.log('üëâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ');
  }
}, 5000);