import express, { type Request, Response, NextFunction } from "express";
import compression from "compression";
import { registerRoutes } from "./routes";
import { deploymentSafeInit } from "./deploymentSafeInit";
import { createTables } from "./createTables";
import { setupVite, serveStatic, log } from "./vite";
import { storage } from "./storage";
import { ImageUpdateService } from "./imageUpdateService";
import fs from "fs";
import path from "path";
import multer from "multer";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –±–∞–Ω–µ—Ä–∞ "–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ"
async function ensureDefaultSellCarBanner() {
  try {
    console.log("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–Ω–µ—Ä–∞ '–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ'...");
    
    const existingCarousels = await storage.getAdvertisementCarousel();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–Ω–µ—Ä "–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
    const sellCarBanner = existingCarousels.find(carousel => 
      carousel.title.includes("–ü—Ä–æ–¥–∞–π") || 
      carousel.title.includes("–∞–≤—Ç–æ–º–æ–±–∏–ª—å") || 
      carousel.title.includes("–∞–≤—Ç–æ")
    );
    
    if (!sellCarBanner) {
      console.log("üéØ –ë–∞–Ω–µ—Ä '–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π...");
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–µ—Ä —Å —Ä–∞–±–æ—á–∏–º–∏ –≤–Ω–µ—à–Ω–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      await storage.createAdvertisementCarouselItem({
        title: "–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ",
        description: "–†–∞–∑–º–µ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã–≥–æ–¥—É –æ—Ç –ø—Ä–æ–¥–∞–∂–∏",
        imageUrl: "https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
        linkUrl: "/create-listing",
        buttonText: "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        isActive: true,
        order: 1
      });
      
      console.log("‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –±–∞–Ω–µ—Ä '–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
    } else {
      console.log("‚úÖ –ë–∞–Ω–µ—Ä '–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }
  } catch (error) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –±–∞–Ω–µ—Ä–∞:", error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = path.join(process.cwd(), '.env');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=');
    if (key && value) {
      process.env[key] = value;
    }
  });
}

const app = express();

// Enable gzip compression for all responses
app.use(compression({
  threshold: 0, // Compress all responses
  level: 6 // Good balance between compression and speed
}));

// Add caching headers for better performance
app.use((req, res, next) => {
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.path.startsWith('/api/')) {
    res.set('Cache-Control', 'public, max-age=120'); // 2 –º–∏–Ω—É—Ç—ã –∫—ç—à
  } else if (req.path.match(/\.(css|js|png|jpg|jpeg|gif|ico|svg)$/)) {
    // Cache static assets for 24 hours
    res.set('Cache-Control', 'public, max-age=86400');
  }
  next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 20 * 1024 * 1024, // 20MB per file
    files: 20 // max 20 files
  }
});

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è JSON –∏ –¥–æ–±–∞–≤–ª—è–µ–º multer –¥–ª—è —Ñ–∞–π–ª–æ–≤
app.use(express.json({ limit: '150mb', strict: false }));
app.use(express.urlencoded({ extended: true, limit: '150mb', parameterLimit: 50000 }));

app.use((req, res, next) => {
  // –í–†–ï–ú–ï–ù–ù–û –í–ö–õ–Æ–ß–ê–ï–ú –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤
  // if (req.path.startsWith('/api/')) {
  //   return next();
  // }
  
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "‚Ä¶";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–ø–ª–æ—è
  console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π...");
  
  try {
    await deploymentSafeInit();
    
    // –ë–∞–Ω–µ—Ä "–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ" —É–¥–∞–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // await ensureDefaultSellCarBanner();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    ImageUpdateService.initializeOnStartup();
    
    console.log("‚úÖ DEPLOYMENT: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    console.error("‚ö†Ô∏è DEPLOYMENT: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:", error);
    console.log("üìù DEPLOYMENT: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
  }
  
  // –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã /assets –ü–ï–†–ï–î API —Ä–æ—É—Ç–∞–º–∏
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  const possibleAssetsPaths = [
    path.join(process.cwd(), 'dist', 'public', 'assets'),
    path.join(import.meta.dirname, 'public', 'assets'),
    path.join(process.cwd(), 'dist', 'assets'),
    path.join(process.cwd(), 'public', 'assets'),
    path.join(process.cwd(), 'server', 'public', 'assets')
  ];
  
  console.log(`üîç –ò—â–µ–º assets –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:`);
  let assetsPath = null;
  
  for (const testPath of possibleAssetsPaths) {
    console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${testPath} - ${fs.existsSync(testPath) ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    if (fs.existsSync(testPath)) {
      assetsPath = testPath;
      break;
    }
  }
  
  if (assetsPath) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ assets –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${assetsPath}`);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É /assets —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ MIME —Ç–∏–ø–∞–º–∏ –ü–ï–†–ï–î API —Ä–æ—É—Ç–∞–º–∏
    app.use('/assets', express.static(assetsPath, {
      setHeaders: (res, filePath) => {
        console.log(`üìÑ –û—Ç–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª: ${filePath}`);
        if (filePath.endsWith('.js')) {
          res.setHeader('Content-Type', 'application/javascript; charset=utf-8');
          console.log(`‚úÖ JS —Ñ–∞–π–ª: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Content-Type: application/javascript`);
        } else if (filePath.endsWith('.css')) {
          res.setHeader('Content-Type', 'text/css; charset=utf-8');
          console.log(`‚úÖ CSS —Ñ–∞–π–ª: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Content-Type: text/css`);
        }
      }
    }));
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ /assets –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ü–ï–†–ï–î API —Ä–æ—É—Ç–∞–º–∏`);
  } else {
    console.log(`‚ùå Assets –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—É—Ç–µ–π`);
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
  const isProduction = process.env.NODE_ENV === 'production' || 
                       process.env.REPLIT_DEPLOYMENT === '1' ||
                       (typeof process.env.REPL_OWNER !== 'undefined' && process.env.PORT);



  const server = await registerRoutes(app);

  if (isProduction) {
    console.log(`üîß PRODUCTION: –ò—Å–ø–æ–ª—å–∑—É–µ–º serveStatic`);
    serveStatic(app);
  } else {
    console.log(`üîß DEVELOPMENT: –ò—Å–ø–æ–ª—å–∑—É–µ–º setupVite`);
    await setupVite(app, server);
  }

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // VPS DEPLOYMENT: Use PORT from environment variable
  // For VPS deployment, PORT environment variable must be set explicitly
  // Fallback to 5000 for development mode only
  
  const port = process.env.PORT || 5000;
  server.listen({
    port: Number(port),
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`serving on port ${port}`);
  });
})();
