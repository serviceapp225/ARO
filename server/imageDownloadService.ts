import sharp from 'sharp';
import fetch from 'node-fetch';

interface ImageProcessResult {
  data: string; // Base64 data
  type: string; // MIME type
  size: number; // Size in bytes
}

export class ImageDownloadService {
  private static MAX_FILE_SIZE = 500 * 1024; // 500KB maximum
  private static TARGET_WIDTH = 800; // Target width for compression
  private static JPEG_QUALITY = 80; // JPEG quality

  /**
   * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ —Å–∂–∏–º–∞–µ—Ç –µ–≥–æ
   */
  static async downloadAndCompressImage(imageUrl: string): Promise<ImageProcessResult> {
    try {
      console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl}`);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const response = await fetch(imageUrl);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const arrayBuffer = await response.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);
      
      console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(buffer.length / 1024)}KB`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ URL
      let mimeType = response.headers.get('content-type') || 'image/jpeg';
      if (!mimeType.startsWith('image/')) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        const urlLowercase = imageUrl.toLowerCase();
        if (urlLowercase.includes('.png')) {
          mimeType = 'image/png';
        } else if (urlLowercase.includes('.webp')) {
          mimeType = 'image/webp';
        } else {
          mimeType = 'image/jpeg';
        }
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Sharp
      let processedImage = sharp(buffer);
      
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const metadata = await processedImage.metadata();
      console.log(`üñºÔ∏è –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${metadata.width}x${metadata.height}`);

      // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      if (metadata.width && metadata.width > this.TARGET_WIDTH) {
        processedImage = processedImage.resize({
          width: this.TARGET_WIDTH,
          height: undefined,
          withoutEnlargement: true,
          fit: 'inside'
        });
        console.log(`üìê –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ —à–∏—Ä–∏–Ω—ã ${this.TARGET_WIDTH}px`);
      }

      // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      let compressedBuffer: Buffer;
      let finalMimeType: string;

      if (mimeType === 'image/png') {
        // –î–ª—è PNG –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        compressedBuffer = await processedImage
          .png({ 
            quality: this.JPEG_QUALITY,
            compressionLevel: 9,
            adaptiveFiltering: true,
            force: false
          })
          .toBuffer();
        finalMimeType = 'image/png';
      } else {
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG
        compressedBuffer = await processedImage
          .jpeg({ 
            quality: this.JPEG_QUALITY,
            progressive: true,
            mozjpeg: true
          })
          .toBuffer();
        finalMimeType = 'image/jpeg';
      }

      console.log(`üóúÔ∏è –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(compressedBuffer.length / 1024)}KB`);

      // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
      if (compressedBuffer.length > this.MAX_FILE_SIZE) {
        console.log(`‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ...`);
        
        let quality = this.JPEG_QUALITY - 20;
        while (compressedBuffer.length > this.MAX_FILE_SIZE && quality > 20) {
          compressedBuffer = await sharp(buffer)
            .resize({
              width: this.TARGET_WIDTH * 0.8, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
              height: undefined,
              withoutEnlargement: true,
              fit: 'inside'
            })
            .jpeg({ 
              quality: quality,
              progressive: true,
              mozjpeg: true
            })
            .toBuffer();
          
          quality -= 10;
          console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∂–∞—Ç–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º ${quality}%: ${Math.round(compressedBuffer.length / 1024)}KB`);
        }
        finalMimeType = 'image/jpeg';
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      const base64Data = compressedBuffer.toString('base64');
      
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${Math.round(compressedBuffer.length / 1024)}KB, ${finalMimeType}`);

      return {
        data: base64Data,
        type: finalMimeType,
        size: compressedBuffer.length
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageUrl}:`, error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${error.message}`);
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64 –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Buffer –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  static base64ToBuffer(base64Data: string): Buffer {
    return Buffer.from(base64Data, 'base64');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç data URL –∏–∑ base64 –¥–∞–Ω–Ω—ã—Ö –∏ MIME —Ç–∏–ø–∞
   */
  static createDataUrl(base64Data: string, mimeType: string): string {
    return `data:${mimeType};base64,${base64Data}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–Ω–µ—à–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   */
  static isExternalImageUrl(url: string): boolean {
    if (!url) return false;
    return url.startsWith('http://') || url.startsWith('https://');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ base64 –¥–∞–Ω–Ω—ã–º–∏
   */
  static isBase64Data(data: string): boolean {
    if (!data) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç data URL
    if (data.startsWith('data:image/')) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç base64 —Å—Ç—Ä–æ–∫–∏
    try {
      return Buffer.from(data, 'base64').toString('base64') === data;
    } catch {
      return false;
    }
  }
}