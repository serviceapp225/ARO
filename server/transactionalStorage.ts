import { TransactionManager, executeWithRollback } from "./transaction";
import { storage } from "./storage";
import { InsertBid, InsertCarListing, CarListing, Bid } from "@shared/schema";

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ rollback
 */
export class TransactionalStorage {
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–≤–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ rollback –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async createBidWithRollback(bidData: InsertBid): Promise<Bid> {
    return executeWithRollback(async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
      const listing = await storage.getListing(bidData.listingId);
      if (!listing) {
        throw new Error(`–õ–æ—Ç —Å ID ${bidData.listingId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      if (listing.status !== 'active') {
        throw new Error(`–õ–æ—Ç ${listing.lotNumber} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Å—Ç–∞–≤–æ–∫`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π
      const currentBid = parseFloat(listing.currentBid || '0');
      const newBidAmount = parseFloat(bidData.amount);
      
      if (newBidAmount <= currentBid) {
        throw new Error(`–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π (${currentBid} —Å–æ–º–æ–Ω–∏)`);
      }
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ—Ç –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const bid = await storage.createBid(bidData);
      await storage.updateListingCurrentBid(bidData.listingId, bidData.amount);
      
      console.log(`‚úÖ –°—Ç–∞–≤–∫–∞ ${bidData.amount} —Å–æ–º–æ–Ω–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ª–æ—Ç–∞ ${listing.lotNumber}`);
      return bid;
    }, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É");
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º rollback –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async createListingWithRollback(listingData: InsertCarListing): Promise<CarListing> {
    return executeWithRollback(async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!listingData.make || !listingData.model) {
        throw new Error("–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
      }
      
      if (!listingData.photos || !Array.isArray(listingData.photos) || listingData.photos.length === 0) {
        throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é");
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞
      const lotNumber = `${Math.floor(Math.random() * 900000) + 100000}`;
      const listingWithLotNumber = {
        ...listingData,
        lotNumber
      };
      
      const listing = await storage.createListing(listingWithLotNumber);
      console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.lotNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ`);
      return listing;
    }, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ");
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ —Å rollback –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async updateListingStatusWithRollback(listingId: number, newStatus: string): Promise<CarListing> {
    return executeWithRollback(async () => {
      const listing = await storage.getListing(listingId);
      if (!listing) {
        throw new Error(`–õ–æ—Ç —Å ID ${listingId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤
      const allowedTransitions: Record<string, string[]> = {
        'pending_approval': ['active', 'rejected'],
        'active': ['ended', 'archived'],
        'ended': ['archived'],
        'rejected': ['pending_approval'],
        'archived': []
      };
      
      const currentStatus = listing.status;
      if (!allowedTransitions[currentStatus]?.includes(newStatus)) {
        throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: ${currentStatus} ‚Üí ${newStatus}`);
      }
      
      const updatedListing = await storage.updateListingStatus(listingId, newStatus);
      if (!updatedListing) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ ${listing.lotNumber}`);
      }
      
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ ${listing.lotNumber} –∏–∑–º–µ–Ω–µ–Ω: ${currentStatus} ‚Üí ${newStatus}`);
      return updatedListing;
    }, `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞`);
  }

  /**
   * –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º rollback
   */
  async batchUpdateListingsWithRollback(
    listingIds: number[],
    updates: Partial<InsertCarListing>
  ): Promise<CarListing[]> {
    return TransactionManager.withTransaction(async (transaction) => {
      const results: CarListing[] = [];
      
      for (const listingId of listingIds) {
        const updatedListing = await storage.updateListing(listingId, updates);
        if (!updatedListing) {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ—Ç —Å ID ${listingId}`);
        }
        results.push(updatedListing);
      }
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${results.length} –ª–æ—Ç–æ–≤`);
      return results;
    });
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ—Ç–∞ —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async deleteListingWithRollback(listingId: number): Promise<boolean> {
    return executeWithRollback(async () => {
      const listing = await storage.getListing(listingId);
      if (!listing) {
        throw new Error(`–õ–æ—Ç —Å ID ${listingId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const bidsCount = await storage.getBidCountForListing(listingId);
      
      if (bidsCount > 0 && listing.status === 'active') {
        throw new Error(`–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ª–æ—Ç —Å ${bidsCount} —Å—Ç–∞–≤–∫–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω.`);
      }
      
      // –£–¥–∞–ª—è–µ–º –ª–æ—Ç (—Å—Ç–∞–≤–∫–∏ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏)
      const result = await storage.deleteListing(listingId);
      
      if (result) {
        console.log(`‚úÖ –õ–æ—Ç ${listing.lotNumber} –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã`);
      }
      
      return result;
    }, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ—Ç");
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  async validateDatabaseStateWithRollback(): Promise<{
    isValid: boolean;
    errors: string[];
    warnings: string[];
  }> {
    return executeWithRollback(async () => {
      const errors: string[] = [];
      const warnings: string[] = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã
      const activeListings = await storage.getListingsByStatus('active');
      for (const listing of activeListings) {
        if (!listing.auctionEndTime) {
          errors.push(`–õ–æ—Ç ${listing.lotNumber}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞`);
        }
        
        if (!listing.photos || (Array.isArray(listing.photos) && listing.photos.length === 0)) {
          warnings.push(`–õ–æ—Ç ${listing.lotNumber}: –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–æ–∫
      for (const listing of activeListings) {
        const bids = await storage.getBidsForListing(listing.id);
        const maxBid = bids.length > 0 ? Math.max(...bids.map(b => parseFloat(b.amount))) : 0;
        const currentBid = parseFloat(listing.currentBid || '0');
        
        if (Math.abs(maxBid - currentBid) > 0.01) {
          errors.push(`–õ–æ—Ç ${listing.lotNumber}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ (${currentBid}) –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π (${maxBid})`);
        }
      }
      
      const isValid = errors.length === 0;
      
      console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${isValid ? '–ü–†–û–ô–î–ï–ù–ê' : '–ü–†–û–í–ê–õ–ï–ù–ê'}`);
      console.log(`   –û—à–∏–±–æ–∫: ${errors.length}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings.length}`);
      
      return { isValid, errors, warnings };
    }, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
  }

  /**
   * –û—Ç–∫–∞—Ç –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
   */
  async rollbackToDate(targetDate: Date): Promise<void> {
    return executeWithRollback(async () => {
      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ ${targetDate.toISOString()}`);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –±—ã
      
      const listings = await storage.getListingsByStatus('active');
      const recentListings = listings.filter(l => 
        l.createdAt && new Date(l.createdAt) > targetDate
      );
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${recentListings.length} –ª–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ ${targetDate.toISOString()}`);
      
      if (recentListings.length > 0) {
        console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–∞—Ç–∞ —É–¥–∞–ª–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:");
        recentListings.forEach(listing => {
          console.log(`   - –õ–æ—Ç ${listing.lotNumber} (${listing.make} ${listing.model})`);
        });
        
        // –í production –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç
        throw new Error("–û—Ç–∫–∞—Ç –∫ –ø—Ä–æ—à–ª–æ–π –¥–∞—Ç–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
      }
      
      console.log("‚úÖ –û—Ç–∫–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã");
    }, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
  }
}

export const transactionalStorage = new TransactionalStorage();