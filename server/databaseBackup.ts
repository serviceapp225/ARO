import { execSync } from 'child_process';
import { existsSync, copyFileSync, unlinkSync, readdirSync, statSync } from 'fs';
import { join } from 'path';

export interface BackupInfo {
  filename: string;
  timestamp: Date;
  size: number;
  description: string;
}

export class DatabaseBackupManager {
  private backupDir = './backups';
  private dbPath = './autoauction.db';

  constructor() {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!existsSync(this.backupDir)) {
      execSync(`mkdir -p ${this.backupDir}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async createBackup(description?: string): Promise<string> {
    if (!existsSync(this.dbPath)) {
      throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupFilename = `backup_${timestamp}.db`;
    const backupPath = join(this.backupDir, backupFilename);

    try {
      copyFileSync(this.dbPath, backupPath);
      
      const stats = statSync(backupPath);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupFilename} (${Math.round(stats.size / 1024 / 1024)}MB)`);
      
      if (description) {
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
      }
      
      return backupFilename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (ROLLBACK)
   */
  async restoreFromBackup(backupFilename: string): Promise<void> {
    const backupPath = join(this.backupDir, backupFilename);
    
    if (!existsSync(backupPath)) {
      throw new Error(`–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ${backupFilename} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const emergencyBackup = await this.createBackup(`Emergency backup before restore from ${backupFilename}`);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
      copyFileSync(backupPath, this.dbPath);
      
      console.log(`üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupFilename}`);
      console.log(`üíæ –ê–≤–∞—Ä–∏–π–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${emergencyBackup}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
   */
  getBackupList(): BackupInfo[] {
    if (!existsSync(this.backupDir)) {
      return [];
    }

    const files = readdirSync(this.backupDir)
      .filter(file => file.endsWith('.db'))
      .map(filename => {
        const filePath = join(this.backupDir, filename);
        const stats = statSync(filePath);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const timestampMatch = filename.match(/backup_(.+)\.db$/);
        const timestamp = timestampMatch 
          ? new Date(timestampMatch[1].replace(/-/g, ':').replace(/T(.+)-/, 'T$1.'))
          : stats.birthtime;

        return {
          filename,
          timestamp,
          size: stats.size,
          description: `–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç ${timestamp.toLocaleString('ru-RU')}`
        };
      })
      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());

    return files;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N)
   */
  cleanupOldBackups(keepCount: number = 10): void {
    const backups = this.getBackupList();
    
    if (backups.length <= keepCount) {
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${backups.length} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–ª–∏–º–∏—Ç: ${keepCount})`);
      return;
    }

    const toDelete = backups.slice(keepCount);
    
    toDelete.forEach(backup => {
      try {
        unlinkSync(join(this.backupDir, backup.filename));
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backup.filename}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${backup.filename}:`, error);
      }
    });

    console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–≤–ª–µ–Ω–æ ${keepCount} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π`);
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
   */
  async createAutoBackup(operation: string): Promise<string> {
    return this.createBackup(`Auto backup before: ${operation}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  getDatabaseInfo(): { exists: boolean; size?: number; lastModified?: Date } {
    if (!existsSync(this.dbPath)) {
      return { exists: false };
    }

    const stats = statSync(this.dbPath);
    return {
      exists: true,
      size: stats.size,
      lastModified: stats.mtime
    };
  }
}

export const backupManager = new DatabaseBackupManager();