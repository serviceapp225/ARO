import express from "express";
import compression from "compression";
import fs from "fs";
import path from "path";

const app = express();

// –í–∫–ª—é—á–∞–µ–º compression –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
app.use(compression());

// Body parsing
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: true }));

// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use((req, res, next) => {
  const start = Date.now();
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (req.path.startsWith("/api") || req.path === "/health") {
      console.log(`${req.method} ${req.path} ${res.statusCode} in ${duration}ms`);
    }
  });
  next();
});

console.log("üöÄ –ó–∞–ø—É—Å–∫ MINIMAL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...");
console.log(`üîß NODE_ENV = ${process.env.NODE_ENV}`);
console.log(`üîß PORT = ${process.env.PORT || '8080'}`);

// Health check endpoint - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    mode: 'minimal-production'
  });
});

// –ë–∞–∑–æ–≤—ã–π API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.get('/api/status', (req, res) => {
  res.json({ 
    status: 'running', 
    mode: 'minimal-production',
    timestamp: new Date().toISOString()
  });
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã assets
const possibleAssetsPaths = [
  path.join(process.cwd(), 'dist', 'public', 'assets'),
  path.join(process.cwd(), 'dist', 'assets'),
  path.join(process.cwd(), 'public', 'assets')
];

console.log(`üîç –ò—â–µ–º assets –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:`);
let assetsPath = null;

for (const testPath of possibleAssetsPaths) {
  console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${testPath} - ${fs.existsSync(testPath) ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
  if (fs.existsSync(testPath)) {
    assetsPath = testPath;
    break;
  }
}

if (assetsPath) {
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ assets –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${assetsPath}`);
  app.use('/assets', express.static(assetsPath));
}

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const staticPath = path.join(process.cwd(), 'dist', 'public');
if (fs.existsSync(staticPath)) {
  console.log(`üîß PRODUCTION: –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑: ${staticPath}`);
  app.use(express.static(staticPath));
}

// SPA fallback –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤)
app.get('*', (req, res) => {
  const indexPath = path.join(staticPath, 'index.html');
  if (fs.existsSync(indexPath)) {
    // –ß–∏—Ç–∞–µ–º index.html –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Replit –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try {
      const indexContent = fs.readFileSync(indexPath, 'utf8');
      if (indexContent.includes('@replit/')) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å Replit –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –æ—Ç–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        res.status(200).send(`
          <!DOCTYPE html>
          <html>
          <head>
            <title>AutoBid.TJ - Minimal Mode</title>
            <meta charset="utf-8">
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
              .status { color: green; font-size: 18px; }
              .info { margin: 20px 0; }
            </style>
          </head>
          <body>
            <h1>üöÄ AutoBid.TJ</h1>
            <div class="status">‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ minimal —Ä–µ–∂–∏–º–µ</div>
            <div class="info">–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</div>
            <div class="info">Health check: <a href="/health">/health</a></div>
            <div class="info">API Status: <a href="/api/status">/api/status</a></div>
          </body>
          </html>
        `);
      } else {
        res.sendFile(indexPath);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è index.html:', error);
      res.status(500).send('Internal Server Error');
    }
  } else {
    res.status(404).send('Not Found - Index.html not available');
  }
});

const PORT = parseInt(process.env.PORT || "8080");
app.listen(PORT, "0.0.0.0", () => {
  console.log(`‚úÖ MINIMAL PRODUCTION server started on port ${PORT}`);
  console.log(`üîó Health check available at: http://localhost:${PORT}/health`);
});