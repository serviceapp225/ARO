#!/usr/bin/env node
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { readdirSync, readFileSync, statSync } from 'fs';
import { digitalOceanStorage } from '../services/digitalOceanStorage.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const IMAGES_DIR = join(__dirname, '../../uploads');

async function migrateImages() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ DigitalOcean Spaces...');
  
  try {
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Spaces
    const isConnected = await digitalOceanStorage.testConnection();
    if (!isConnected) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ DigitalOcean Spaces');
      process.exit(1);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const imageFiles = getImageFiles(IMAGES_DIR);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);

    let migrated = 0;
    let errors = 0;

    for (const file of imageFiles) {
      try {
        console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º: ${file.name}`);
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        const buffer = readFileSync(file.path);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const { carId, imageType } = parseFileName(file.name);
        
        if (carId && imageType) {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
          const url = await digitalOceanStorage.uploadCarImage(
            buffer, 
            carId, 
            imageType, 
            file.name
          );
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${file.name} ‚Üí ${url}`);
          migrated++;
        } else if (file.name.includes('banner')) {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–Ω–Ω–µ—Ä
          const bannerId = extractBannerId(file.name);
          const url = await digitalOceanStorage.uploadBannerImage(
            buffer, 
            bannerId, 
            file.name
          );
          console.log(`‚úÖ –ë–∞–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: ${file.name} ‚Üí ${url}`);
          migrated++;
        } else {
          console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç): ${file.name}`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.name}:`, error.message);
        errors++;
      }
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${migrated}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${imageFiles.length}`);
    
    if (errors === 0) {
      console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

function getImageFiles(dir) {
  const files = [];
  
  try {
    const items = readdirSync(dir);
    
    for (const item of items) {
      const fullPath = join(dir, item);
      const stats = statSync(fullPath);
      
      if (stats.isFile() && isImageFile(item)) {
        files.push({
          name: item,
          path: fullPath,
          size: stats.size
        });
      } else if (stats.isDirectory()) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –ø–æ–¥–ø–∞–ø–∫–∏
        files.push(...getImageFiles(fullPath));
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dir}:`, error.message);
  }
  
  return files;
}

function isImageFile(fileName) {
  const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
  return imageExtensions.some(ext => fileName.toLowerCase().endsWith(ext));
}

function parseFileName(fileName) {
  // –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:
  // car_123_main.jpg
  // car_123_rotation1.jpg
  // listing_456_rotation2.png
  
  const patterns = [
    /^car_(\d+)_(main|rotation[1-4])\./, 
    /^listing_(\d+)_(main|rotation[1-4])\./, 
    /^(\d+)_(main|rotation[1-4])\./, 
  ];
  
  for (const pattern of patterns) {
    const match = fileName.match(pattern);
    if (match) {
      return {
        carId: parseInt(match[1]),
        imageType: match[2]
      };
    }
  }
  
  return { carId: null, imageType: null };
}

function extractBannerId(fileName) {
  const match = fileName.match(/banner_(\d+)/);
  return match ? parseInt(match[1]) : 1;
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  migrateImages();
}

export { migrateImages };