#!/usr/bin/env node
import { digitalOceanStorage } from '../services/digitalOceanStorage.js';
import { neon } from '@neondatabase/serverless';

async function testPostgreSQL() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
  
  try {
    const sql = neon(process.env.DATABASE_URL);
    const result = await sql`SELECT version(), now() as current_time`;
    
    console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    console.log(`üìä –í–µ—Ä—Å–∏—è: ${result[0].version}`);
    console.log(`üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result[0].current_time}`);
    
    // –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü
    const tablesResult = await sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `;
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tablesResult.length}`);
    tablesResult.forEach(table => console.log(`  - ${table.table_name}`));
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error.message);
    return false;
  }
}

async function testDigitalOceanSpaces() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DigitalOcean Spaces...');
  
  try {
    const isConnected = await digitalOceanStorage.testConnection();
    
    if (isConnected) {
      // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
      const testBuffer = Buffer.from('Test image content');
      const testUrl = await digitalOceanStorage.uploadCarImage(
        testBuffer, 
        99999, 
        'main', 
        'test.jpg'
      );
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', testUrl);
      
      // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
      const deleted = await digitalOceanStorage.deleteFile(testUrl);
      if (deleted) {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
      }
      
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Spaces:', error.message);
    return false;
  }
}

async function testSMS() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMS API...');
  
  const smsConfig = {
    login: process.env.SMS_LOGIN,
    hash: process.env.SMS_HASH,
    sender: process.env.SMS_SENDER,
    server: process.env.SMS_SERVER
  };
  
  console.log('üìã SMS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log(`  –õ–æ–≥–∏–Ω: ${smsConfig.login ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`  –•–µ—à: ${smsConfig.hash ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`  –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${smsConfig.sender}`);
  console.log(`  –°–µ—Ä–≤–µ—Ä: ${smsConfig.server}`);
  
  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  try {
    const response = await fetch(smsConfig.server, { method: 'HEAD' });
    console.log(`‚úÖ SMS API –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
    return true;
  } catch (error) {
    console.error('‚ùå SMS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

async function testEnvironment() {
  console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  
  const requiredVars = [
    'DATABASE_URL',
    'DO_SPACES_ACCESS_KEY', 
    'DO_SPACES_SECRET_KEY',
    'DO_SPACES_BUCKET',
    'SMS_LOGIN',
    'SMS_HASH'
  ];
  
  let allSet = true;
  
  for (const varName of requiredVars) {
    const value = process.env[varName];
    const status = value ? '‚úÖ' : '‚ùå';
    const displayValue = value ? 
      (varName.includes('SECRET') || varName.includes('HASH') ? '***' : 
       varName === 'DATABASE_URL' ? value.substring(0, 30) + '...' : value) : 
      '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
    
    console.log(`${status} ${varName}: ${displayValue}`);
    
    if (!value) allSet = false;
  }
  
  return allSet;
}

async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã DigitalOcean\n');
  
  const results = {
    environment: await testEnvironment(),
    postgresql: false,
    spaces: false,
    sms: false
  };
  
  if (results.environment) {
    results.postgresql = await testPostgreSQL();
    results.spaces = await testDigitalOceanSpaces();
    results.sms = await testSMS();
  } else {
    console.log('\n‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`Environment: ${results.environment ? '‚úÖ' : '‚ùå'}`);
  console.log(`PostgreSQL: ${results.postgresql ? '‚úÖ' : '‚ùå'}`);
  console.log(`Spaces: ${results.spaces ? '‚úÖ' : '‚ùå'}`);
  console.log(`SMS: ${results.sms ? '‚úÖ' : '‚ùå'}`);
  
  const allPassed = Object.values(results).every(Boolean);
  
  if (allPassed) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.');
  } else {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
  }
  
  process.exit(allPassed ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  runAllTests();
}

export { testPostgreSQL, testDigitalOceanSpaces, testSMS, testEnvironment };