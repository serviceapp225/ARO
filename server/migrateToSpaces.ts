import { spacesService } from './spacesService';
import { db } from './db';
import { carListings } from '../shared/schema';
import { eq } from 'drizzle-orm';
import fs from 'fs';
import path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ DigitalOcean Spaces
 */
export async function migrateImagesToSpaces() {
  console.log('üöÄ SPACES MIGRATION: –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ DigitalOcean Spaces');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Spaces
    const spacesAvailable = await spacesService.healthCheck();
    if (!spacesAvailable) {
      throw new Error('DigitalOcean Spaces –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
    }

    console.log('‚úÖ SPACES: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DigitalOcean Spaces —É—Å–ø–µ—à–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const listings = await db.select().from(carListings);
    console.log(`üìä –î–ê–ù–ù–´–ï: –ù–∞–π–¥–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

    let migratedListings = 0;
    let totalMigratedImages = 0;
    const errors: string[] = [];

    for (const listing of listings) {
      try {
        console.log(`\nüìã –û–ë–†–ê–ë–û–¢–ö–ê: –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id} - ${listing.make} ${listing.model}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const uploadDir = path.join(process.cwd(), 'uploads', 'listings', 
          Math.floor(listing.id / 1000) * 1000 + '', listing.id.toString());
        
        if (!fs.existsSync(uploadDir)) {
          console.log(`‚è≠Ô∏è –ü–†–û–ü–£–°–ö: –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}`);
          continue;
        }

        const imageFiles = fs.readdirSync(uploadDir).filter(file => 
          /\.(jpg|jpeg|png|webp|gif)$/i.test(file)
        );

        if (imageFiles.length === 0) {
          console.log(`‚è≠Ô∏è –ü–†–û–ü–£–°–ö: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}`);
          continue;
        }

        console.log(`üì∏ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);

        const spacesUrls: string[] = [];
        let listingImageCount = 0;

        for (const imageFile of imageFiles) {
          try {
            const localPath = path.join(uploadDir, imageFile);
            const spacesKey = `listings/${listing.id}/${imageFile}`;
            
            console.log(`üì§ –ó–ê–ì–†–£–ó–ö–ê: ${localPath} ‚Üí spaces://${spacesKey}`);
            
            const spacesUrl = await spacesService.uploadFile(localPath, spacesKey);
            spacesUrls.push(spacesUrl);
            listingImageCount++;
            totalMigratedImages++;

            console.log(`‚úÖ –£–°–ü–ï–•: ${imageFile} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Spaces`);
          } catch (imageError) {
            const errorMsg = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${imageFile} –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}: ${imageError}`;
            console.error(`‚ùå ${errorMsg}`);
            errors.push(errorMsg);
          }
        }

        if (spacesUrls.length > 0) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å URL-–∞–º–∏ –∏–∑ Spaces
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL-—ã –≤ –ø–æ–ª–µ photos –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
          await db.update(carListings)
            .set({ 
              photos: spacesUrls,
              updatedAt: new Date()
            })
            .where(eq(carListings.id, listing.id));

          console.log(`üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•: –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id} —Å ${spacesUrls.length} URL-–∞–º–∏ Spaces`);
          migratedListings++;
        }

      } catch (listingError) {
        const errorMsg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}: ${listingError}`;
        console.error(`‚ùå ${errorMsg}`);
        errors.push(errorMsg);
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:');
    console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${migratedListings}`);
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã: ${totalMigratedImages}`);
    
    if (errors.length > 0) {
      console.log(`‚ùå –û—à–∏–±–∫–∏: ${errors.length}`);
      errors.forEach(error => console.log(`  - ${error}`));
    }

    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    if (migratedListings > 0) {
      console.log('\nüßπ –û–ß–ò–°–¢–ö–ê: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
      console.log('–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: rm -rf uploads/listings/*');
    }

    return {
      migratedListings,
      totalMigratedImages,
      errors: errors.length
    };

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Spaces:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
export async function cleanupLocalImages() {
  const uploadsPath = path.join(process.cwd(), 'uploads', 'listings');
  
  if (fs.existsSync(uploadsPath)) {
    console.log('üßπ –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    fs.rmSync(uploadsPath, { recursive: true, force: true });
    console.log('‚úÖ –û–ß–ò–°–¢–ö–ê: –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã');
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === new URL(process.argv[1], 'file://').href) {
  migrateImagesToSpaces()
    .then(result => {
      console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', result);
      process.exit(0);
    })
    .catch(error => {
      console.error('üí• –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', error);
      process.exit(1);
    });
}