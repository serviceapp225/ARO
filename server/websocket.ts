import { WebSocketServer, WebSocket } from 'ws';
import { Server } from 'http';
import url from 'url';

interface WebSocketClient {
  ws: WebSocket;
  userId?: number;
  listingId?: number;
  lastPing: number;
}

interface AuctionRoom {
  listingId: number;
  clients: Set<WebSocketClient>;
  lastUpdate: number;
  isHotAuction: boolean; // –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞
}

class AuctionWebSocketManager {
  private wss: WebSocketServer;
  private rooms: Map<number, AuctionRoom> = new Map();
  private clients: Set<WebSocketClient> = new Set();
  private heartbeatInterval: NodeJS.Timeout;

  constructor(server: Server) {
    this.wss = new WebSocketServer({ 
      server,
      path: '/ws',
      clientTracking: false
    });
    
    this.wss.on('connection', this.handleConnection.bind(this));
    
    // Heartbeat –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.heartbeatInterval = setInterval(() => {
      this.cleanup();
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    console.log('üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è real-time –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
  }

  private handleConnection(ws: WebSocket, request: any) {
    const client: WebSocketClient = {
      ws,
      lastPing: Date.now()
    };
    
    this.clients.add(client);
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        this.handleMessage(client, message);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });
    
    ws.on('close', () => {
      this.removeClient(client);
    });
    
    ws.on('error', (error) => {
      console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
      this.removeClient(client);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    this.sendMessage(client, {
      type: 'connected',
      message: 'WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π'
    });
  }

  private handleMessage(client: WebSocketClient, message: any) {
    console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', message);
    
    switch (message.type) {
      case 'join_auction':
        console.log(`üéØ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É ${message.listingId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.userId || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
        this.joinAuction(client, message.listingId, message.userId);
        break;
      case 'leave_auction':
        console.log('üö™ –ö–ª–∏–µ–Ω—Ç –ø–æ–∫–∏–¥–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω');
        this.leaveAuction(client);
        break;
      case 'ping':
        client.lastPing = Date.now();
        this.sendMessage(client, { type: 'pong' });
        break;
      case 'identify_user':
        // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (message.userId) {
          client.userId = message.userId;
          console.log(`üë§ –ö–ª–∏–µ–Ω—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.userId}`);
          this.sendMessage(client, { 
            type: 'user_identified', 
            userId: message.userId,
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' 
          });
        }
        break;
      case 'place_bid':
        // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ WebSocket
        if (message.listingId && message.amount && message.bidderId) {
          console.log(`üéØ –ù–û–í–ê–Ø –°–¢–ê–í–ö–ê —á–µ—Ä–µ–∑ WebSocket: –ê—É–∫—Ü–∏–æ–Ω ${message.listingId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.bidderId}, —Å—É–º–º–∞ ${message.amount}`);
          this.handleBidPlacement(message.listingId, message.bidderId, message.amount, client);
        }
        break;
      case 'bid_placement':
        // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏
        if (message.listingId && message.amount && message.bidderId) {
          console.log(`üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏: –ê—É–∫—Ü–∏–æ–Ω ${message.listingId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.bidderId}, —Å—É–º–º–∞ ${message.amount}`);
          this.handleBidPlacement(message.listingId, message.bidderId, message.amount, client);
        }
        break;
    }
  }

  private joinAuction(client: WebSocketClient, listingId: number, userId?: number) {
    // –ü–æ–∫–∏–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
    this.leaveAuction(client);
    
    client.listingId = listingId;
    client.userId = userId;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!this.rooms.has(listingId)) {
      this.rooms.set(listingId, {
        listingId,
        clients: new Set(),
        lastUpdate: Date.now(),
        isHotAuction: false
      });
    }
    
    const room = this.rooms.get(listingId)!;
    room.clients.add(client);
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId || '–≥–æ—Å—Ç—å'} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É ${listingId} (${room.clients.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö)`);
    
    this.sendMessage(client, {
      type: 'joined_auction',
      listingId,
      participantCount: room.clients.size
    });
  }

  private leaveAuction(client: WebSocketClient) {
    if (client.listingId) {
      const room = this.rooms.get(client.listingId);
      if (room) {
        room.clients.delete(client);
        
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
        if (room.clients.size === 0) {
          this.rooms.delete(client.listingId);
        }
      }
      
      client.listingId = undefined;
      client.userId = undefined;
    }
  }

  private removeClient(client: WebSocketClient) {
    this.leaveAuction(client);
    this.clients.delete(client);
  }

  private sendMessage(client: WebSocketClient, message: any) {
    if (client.ws.readyState === WebSocket.OPEN) {
      try {
        client.ws.send(JSON.stringify(message));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        this.removeClient(client);
      }
    }
  }

  private cleanup() {
    const now = Date.now();
    const deadClients: WebSocketClient[] = [];
    
    this.clients.forEach((client) => {
      // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–∏–Ω–≥–∞ –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥
      if (now - client.lastPing > 60000 || client.ws.readyState !== WebSocket.OPEN) {
        deadClients.push(client);
      }
    });
    
    deadClients.forEach(client => this.removeClient(client));
    
    if (deadClients.length > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${deadClients.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

  public broadcastBidUpdate(listingId: number, bidData: any) {
    const room = this.rooms.get(listingId);
    console.log(`üì° broadcastBidUpdate: –∞—É–∫—Ü–∏–æ–Ω ${listingId}, –∫–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: ${!!room}`);
    
    if (!room) {
      console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: ${Array.from(this.rooms.keys())}`);
      return;
    }

    console.log(`üë• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º bid_update –≤ –∫–æ–º–Ω–∞—Ç—É ${listingId} –¥–ª—è ${room.clients.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);

    const message = {
      type: 'bid_update',
      listingId,
      data: bidData,
      timestamp: Date.now()
    };

    this.broadcastToRoom(room, message);
    room.lastUpdate = Date.now();
    
    console.log(`‚úÖ bid_update –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId}`);
  }

  public broadcastAuctionEnd(listingId: number, finalData: any) {
    const room = this.rooms.get(listingId);
    if (!room) return;

    const message = {
      type: 'auction_ended',
      listingId,
      data: finalData,
      timestamp: Date.now()
    };

    this.broadcastToRoom(room, message);
  }

  public sendNotificationToUser(userId: number, notification: any) {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let notificationSent = false;
    let activeClients = 0;
    let totalClients = 0;
    
    console.log(`üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
    
    this.clients.forEach((client) => {
      totalClients++;
      if (client.userId === userId) {
        console.log(`  ‚Ä¢ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å—Ç–∞—Ç—É—Å WebSocket: ${client.ws.readyState === WebSocket.OPEN ? 'OPEN' : 'CLOSED'}`);
        if (client.ws.readyState === WebSocket.OPEN) {
          activeClients++;
          this.sendMessage(client, {
            type: 'notification',
            data: notification,
            timestamp: Date.now()
          });
          notificationSent = true;
          console.log(`  ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        }
      }
    });
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ${activeClients}, –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ WebSocket: ${totalClients}`);
    
    if (!notificationSent) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    }
  }

  public setHotAuction(listingId: number, isHot: boolean) {
    const room = this.rooms.get(listingId);
    if (room) {
      room.isHotAuction = isHot;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Ä–µ–∂–∏–º–µ "–≥–æ—Ä—è—á–µ–≥–æ" –∞—É–∫—Ü–∏–æ–Ω–∞
      this.broadcastToRoom(room, {
        type: 'hot_auction_mode',
        listingId,
        isHot,
        message: isHot ? '–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞! –°—Ç–∞–≤–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏' : '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å—Ç–∞–≤–æ–∫'
      });
      
      console.log(`üî• –ê—É–∫—Ü–∏–æ–Ω ${listingId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ ${isHot ? '–≥–æ—Ä—è—á–∏–π' : '–æ–±—ã—á–Ω—ã–π'} —Ä–µ–∂–∏–º`);
    }
  }

  private broadcastToRoom(room: AuctionRoom, message: any) {
    const deadClients: WebSocketClient[] = [];
    
    room.clients.forEach((client) => {
      if (client.ws.readyState === WebSocket.OPEN) {
        this.sendMessage(client, message);
      } else {
        deadClients.push(client);
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    deadClients.forEach(client => room.clients.delete(client));
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ WebSocket —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  async handleBidPlacement(listingId: number, bidderId: number, amount: string, client: WebSocketClient) {
    try {
      console.log(`üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å—Ç–∞–≤–∫–∏: –∞—É–∫—Ü–∏–æ–Ω ${listingId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${bidderId}, —Å—É–º–º–∞ ${amount}`);
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º storage –Ω–∞–ø—Ä—è–º—É—é
      const { storage } = await import('./storage');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ (–∫—Ç–æ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫–∏)
      const allBids = await storage.getBidsForListing(listingId);
      const uniqueBidders = new Set<number>();
      allBids.forEach(bid => {
        if (bid.bidderId !== bidderId) { // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
          uniqueBidders.add(bid.bidderId);
        }
      });
      
      console.log(`üì¢ –ù–∞–π–¥–µ–Ω–æ ${uniqueBidders.size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–±–∏—Ç–∏–∏ —Å—Ç–∞–≤–∫–∏`);
      console.log(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:`, Array.from(uniqueBidders));
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const listing = await storage.getListing(listingId);
      if (!listing) {
        console.error(`‚ùå –ê—É–∫—Ü–∏–æ–Ω ${listingId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–µ—Ä–µ–±–∏—Ç—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–µ—Ä–µ–∑ WebSocket
      for (const participantId of uniqueBidders) {
        const carTitle = `${listing.make} ${listing.model} ${listing.year}`;
        const formattedAmount = parseInt(amount).toLocaleString('ru-RU');
        
        const notification = {
          type: 'bid_outbid',
          listingId: listingId,
          listingTitle: carTitle,
          newAmount: amount,
          message: `üîî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–±–∏—Ç–∞ ${carTitle} –°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤—ã—à–µ ${formattedAmount} —Å–æ–º–æ–Ω–∏!`
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.sendNotificationToUserAdvanced(participantId, notification);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ HTTP API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏
        console.log(`üîï WebSocket —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ HTTP API`);
        // –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
      }
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      this.sendMessage(client, {
        type: 'bid_processed',
        success: true,
        message: `–°—Ç–∞–≤–∫–∞ ${amount} –°–æ–º–æ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–æ ${uniqueBidders.size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å—Ç–∞–≤–∫–∏:', error);
      this.sendMessage(client, {
        type: 'bid_processed',
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏'
      });
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  private sendNotificationToUserAdvanced(userId: number, notification: any) {
    let sentCount = 0;
    
    // –ò—â–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.clients.forEach(client => {
      if (client.userId === userId && client.ws.readyState === WebSocket.OPEN) {
        this.sendMessage(client, notification);
        sentCount++;
      }
    });
    
    console.log(`üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –Ω–∞ ${sentCount} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);
  }

  public getStats() {
    return {
      totalClients: this.clients.size,
      activeRooms: this.rooms.size,
      hotAuctions: Array.from(this.rooms.values()).filter(room => room.isHotAuction).length
    };
  }

  public shutdown() {
    clearInterval(this.heartbeatInterval);
    this.wss.close();
    console.log('üîå WebSocket —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

export default AuctionWebSocketManager;