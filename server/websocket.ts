import { WebSocketServer, WebSocket } from 'ws';
import { Server } from 'http';
import url from 'url';

interface WebSocketClient {
  ws: WebSocket;
  userId?: number;
  listingId?: number;
  lastPing: number;
}

interface AuctionRoom {
  listingId: number;
  clients: Set<WebSocketClient>;
  lastUpdate: number;
  isHotAuction: boolean; // –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞
}

class AuctionWebSocketManager {
  private wss: WebSocketServer;
  private rooms: Map<number, AuctionRoom> = new Map();
  private clients: Set<WebSocketClient> = new Set();
  private heartbeatInterval: NodeJS.Timeout;

  constructor(server: Server) {
    this.wss = new WebSocketServer({ 
      server,
      path: '/ws/auction',
      clientTracking: false
    });
    
    this.wss.on('connection', this.handleConnection.bind(this));
    
    // Heartbeat –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.heartbeatInterval = setInterval(() => {
      this.cleanup();
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    console.log('üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è real-time –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
  }

  private handleConnection(ws: WebSocket, request: any) {
    const client: WebSocketClient = {
      ws,
      lastPing: Date.now()
    };
    
    this.clients.add(client);
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        this.handleMessage(client, message);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });
    
    ws.on('close', () => {
      this.removeClient(client);
    });
    
    ws.on('error', (error) => {
      console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
      this.removeClient(client);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    this.sendMessage(client, {
      type: 'connected',
      message: 'WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π'
    });
  }

  private handleMessage(client: WebSocketClient, message: any) {
    console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', message);
    
    switch (message.type) {
      case 'join_auction':
        console.log(`üéØ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É ${message.listingId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.userId}`);
        this.joinAuction(client, message.listingId, message.userId);
        break;
      case 'leave_auction':
        console.log('üö™ –ö–ª–∏–µ–Ω—Ç –ø–æ–∫–∏–¥–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω');
        this.leaveAuction(client);
        break;
      case 'ping':
        client.lastPing = Date.now();
        this.sendMessage(client, { type: 'pong' });
        break;
    }
  }

  private joinAuction(client: WebSocketClient, listingId: number, userId?: number) {
    // –ü–æ–∫–∏–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
    this.leaveAuction(client);
    
    client.listingId = listingId;
    client.userId = userId;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!this.rooms.has(listingId)) {
      this.rooms.set(listingId, {
        listingId,
        clients: new Set(),
        lastUpdate: Date.now(),
        isHotAuction: false
      });
    }
    
    const room = this.rooms.get(listingId)!;
    room.clients.add(client);
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId || '–≥–æ—Å—Ç—å'} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É ${listingId} (${room.clients.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö)`);
    
    this.sendMessage(client, {
      type: 'joined_auction',
      listingId,
      participantCount: room.clients.size
    });
  }

  private leaveAuction(client: WebSocketClient) {
    if (client.listingId) {
      const room = this.rooms.get(client.listingId);
      if (room) {
        room.clients.delete(client);
        
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
        if (room.clients.size === 0) {
          this.rooms.delete(client.listingId);
        }
      }
      
      client.listingId = undefined;
      client.userId = undefined;
    }
  }

  private removeClient(client: WebSocketClient) {
    this.leaveAuction(client);
    this.clients.delete(client);
  }

  private sendMessage(client: WebSocketClient, message: any) {
    if (client.ws.readyState === WebSocket.OPEN) {
      try {
        client.ws.send(JSON.stringify(message));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        this.removeClient(client);
      }
    }
  }

  private cleanup() {
    const now = Date.now();
    const deadClients: WebSocketClient[] = [];
    
    this.clients.forEach((client) => {
      // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–∏–Ω–≥–∞ –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥
      if (now - client.lastPing > 60000 || client.ws.readyState !== WebSocket.OPEN) {
        deadClients.push(client);
      }
    });
    
    deadClients.forEach(client => this.removeClient(client));
    
    if (deadClients.length > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${deadClients.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

  public broadcastBidUpdate(listingId: number, bidData: any) {
    const room = this.rooms.get(listingId);
    if (!room) return;

    const message = {
      type: 'bid_update',
      listingId,
      data: bidData,
      timestamp: Date.now()
    };

    this.broadcastToRoom(room, message);
    room.lastUpdate = Date.now();
  }

  public broadcastAuctionEnd(listingId: number, finalData: any) {
    const room = this.rooms.get(listingId);
    if (!room) return;

    const message = {
      type: 'auction_ended',
      listingId,
      data: finalData,
      timestamp: Date.now()
    };

    this.broadcastToRoom(room, message);
  }

  public sendNotificationToUser(userId: number, notification: any) {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let notificationSent = false;
    this.clients.forEach((client) => {
      if (client.userId === userId && client.ws.readyState === WebSocket.OPEN) {
        this.sendMessage(client, {
          type: 'notification',
          data: notification,
          timestamp: Date.now()
        });
        notificationSent = true;
      }
    });
    
    if (!notificationSent) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    }
  }

  public setHotAuction(listingId: number, isHot: boolean) {
    const room = this.rooms.get(listingId);
    if (room) {
      room.isHotAuction = isHot;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Ä–µ–∂–∏–º–µ "–≥–æ—Ä—è—á–µ–≥–æ" –∞—É–∫—Ü–∏–æ–Ω–∞
      this.broadcastToRoom(room, {
        type: 'hot_auction_mode',
        listingId,
        isHot,
        message: isHot ? '–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞! –°—Ç–∞–≤–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏' : '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å—Ç–∞–≤–æ–∫'
      });
      
      console.log(`üî• –ê—É–∫—Ü–∏–æ–Ω ${listingId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ ${isHot ? '–≥–æ—Ä—è—á–∏–π' : '–æ–±—ã—á–Ω—ã–π'} —Ä–µ–∂–∏–º`);
    }
  }

  private broadcastToRoom(room: AuctionRoom, message: any) {
    const deadClients: WebSocketClient[] = [];
    
    room.clients.forEach((client) => {
      if (client.ws.readyState === WebSocket.OPEN) {
        this.sendMessage(client, message);
      } else {
        deadClients.push(client);
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    deadClients.forEach(client => room.clients.delete(client));
  }

  public getStats() {
    return {
      totalClients: this.clients.size,
      activeRooms: this.rooms.size,
      hotAuctions: Array.from(this.rooms.values()).filter(room => room.isHotAuction).length
    };
  }

  public shutdown() {
    clearInterval(this.heartbeatInterval);
    this.wss.close();
    console.log('üîå WebSocket —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

export default AuctionWebSocketManager;