import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { db } from "./db";
import { carListings, notifications, alertViews, carAlerts } from "../shared/schema";
import { eq, sql } from "drizzle-orm";
import sharp from "sharp";
import { insertCarListingSchema, insertBidSchema, insertFavoriteSchema, insertNotificationSchema, insertCarAlertSchema, insertBannerSchema, type CarAlert } from "@shared/schema";
import { z } from "zod";
import AuctionWebSocketManager from "./websocket";

// Input validation schemas
const idParamSchema = z.object({
  id: z.string().regex(/^\d+$/, "ID must be a positive integer").transform(Number)
});

const queryParamsSchema = z.object({
  status: z.string().optional(),
  limit: z.string().regex(/^\d+$/).transform(Number).optional(),
  query: z.string().max(100).optional(),
  make: z.string().max(50).optional(),
  model: z.string().max(50).optional(),
  minPrice: z.string().regex(/^\d+(\.\d+)?$/).transform(Number).optional(),
  maxPrice: z.string().regex(/^\d+(\.\d+)?$/).transform(Number).optional(),
  minYear: z.string().regex(/^\d{4}$/).transform(Number).optional(),
  maxYear: z.string().regex(/^\d{4}$/).transform(Number).optional()
});

// Simple in-memory cache
const cache = new Map();
const CACHE_TTL = 2000; // 2 seconds for ultra-fast updates

function getCached(key: string) {
  const cached = cache.get(key);
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    return cached.data;
  }
  return null;
}

function setCache(key: string, data: any) {
  cache.set(key, { data, timestamp: Date.now() });
  console.log(`üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∫–ª—é—á–∞: ${key}`);
}

function clearCachePattern(pattern: string) {
  const keys = Array.from(cache.keys());
  console.log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É "${pattern}". –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: ${keys.length}`);
  console.log(`üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –∫—ç—à–∞: ${keys.join(', ')}`);
  
  let deletedCount = 0;
  keys.forEach(key => {
    if (key.includes(pattern)) {
      cache.delete(key);
      deletedCount++;
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–ª—é—á –∫—ç—à–∞: ${key}`);
    }
  });
  console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${deletedCount} –∫–ª—é—á–µ–π –∫—ç—à–∞`);
}

// Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const adminAuth = async (req: any, res: any, next: any) => {
  // –í—Ä–µ–º–µ–Ω–Ω–æ —É–ø—Ä–æ—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // TODO: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞
  next();
};

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π middleware –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (Retool)
const externalAdminAuth = (req: any, res: any, next: any) => {
  const adminKey = req.headers['x-admin-key'];
  
  // –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_API_KEY
  const validAdminKey = process.env.ADMIN_API_KEY || 'retool-admin-key-2024';
  
  if (!adminKey || adminKey !== validAdminKey) {
    return res.status(403).json({ error: 'Unauthorized: Invalid admin key' });
  }
  
  next();
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
let wsManager: AuctionWebSocketManager;

// –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
let lastBidUpdate = Date.now();

export async function registerRoutes(app: Express): Promise<Server> {
  // –û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö POST –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use((req, res, next) => {
    if (req.method === 'POST') {
      console.log(`üîç POST –∑–∞–ø—Ä–æ—Å: ${req.path}`);
      console.log(`üì¶ Body:`, req.body);
      if (req.path.includes('/bids')) {
        console.log(`üö® –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞–≤–∫–∏! –ü—É—Ç—å: ${req.path}`);
      }
    }
    next();
  });

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
  let cachedListings: any[] = [];
  let bidCountsCache = new Map<number, number>();
  let lastCacheUpdate = Date.now();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –≤ —Ñ–æ–Ω–µ - —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const updateListingsCache = async () => {
    try {
      // –î–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      // Pending –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
      const activeListings = await storage.getListingsByStatus('active', 15);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
      const recentWonListings = await storage.getRecentWonListings(24);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö –¥–ª—è –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
      const wonListingsWithWinners = await Promise.all(
        recentWonListings.map(async (listing) => {
          const winnerInfo = await storage.getWonListingWinnerInfo(listing.id);
          return {
            ...listing,
            winnerInfo
          };
        })
      );
      
      const listings = [...activeListings, ...wonListingsWithWinners];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–≤–æ–∫
      bidCountsCache.clear();
      for (const listing of listings) {
        const bidCount = await storage.getBidCountForListing(listing.id);
        bidCountsCache.set(listing.id, bidCount);
      }
      
      const fastListings = listings.map(listing => ({
        id: listing.id,
        lotNumber: listing.lotNumber,
        make: listing.make,
        model: listing.model,
        year: listing.year,
        mileage: listing.mileage,
        currentBid: listing.currentBid,
        startingPrice: listing.startingPrice,
        status: listing.status,
        auctionEndTime: listing.auctionEndTime,
        auctionStartTime: listing.auctionStartTime,
        customsCleared: listing.customsCleared,
        recycled: listing.recycled,
        technicalInspectionValid: listing.technicalInspectionValid,
        technicalInspectionDate: listing.technicalInspectionDate,
        tinted: listing.tinted,
        tintingDate: listing.tintingDate,
        engine: listing.engine,
        transmission: listing.transmission,
        fuelType: listing.fuelType,
        color: listing.color,
        condition: listing.condition,
        location: listing.location,
        batteryCapacity: listing.batteryCapacity,
        electricRange: listing.electricRange,
        bidCount: bidCountsCache.get(listing.id) || 0
        // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
      }));
      
      cachedListings = fastListings;
      lastCacheUpdate = Date.now();
      // console.log(`Cache updated with ${fastListings.length} listings`); // –£–±—Ä–∞–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    } catch (error) {
      console.error('Cache update failed:', error);
    }
  };
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  await updateListingsCache();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–≤–æ–∫
  setInterval(updateListingsCache, 5000);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π
  setTimeout(() => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π');
    updateListingsCache();
  }, 5000);
  
  // Clear all caches when listings change
  function clearAllCaches() {
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫—ç—à–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    cachedListings = [];
    bidCountsCache.clear();
    sellerListingsCache.clear();
    lastCacheUpdate = Date.now();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    updateListingsCache();
    
    console.log('üßπ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ï–ù –í–ï–°–¨ –ö–≠–®–ê –ü–û–°–õ–ï –ù–û–í–û–ô –°–¢–ê–í–ö–ò');
  }
  
  // Test endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
  app.get("/api/test", (req, res) => {
    res.json({ test: "fast", time: Date.now() });
  });

  // –ë—ã—Å—Ç—Ä—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  app.get("/api/listings/:id/photos", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const listing = await storage.getListing(id);
      
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
      const photos = Array.isArray(listing.photos) ? listing.photos : [];
      console.log(`üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é ${photos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${id}`);
      res.json({ photos });
    } catch (error) {
      console.error("Error getting photos:", error);
      res.status(500).json({ error: "Server error" });
    }
  });

  // Car listing routes - —É–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä–∞—è –æ—Ç–¥–∞—á–∞ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  app.get("/api/listings", (req, res) => {
    try {
      // console.log("Listings endpoint called, cache size:", cachedListings.length); // –£–±—Ä–∞–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      
      // HTTP –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ETag –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      res.setHeader('Cache-Control', 'public, max-age=5, s-maxage=5'); // 5 —Å–µ–∫—É–Ω–¥ –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      res.setHeader('ETag', `"listings-${lastCacheUpdate}"`);
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
      const optimizedListings = cachedListings.map(listing => ({
        id: listing.id,
        lotNumber: listing.lotNumber,
        make: listing.make,
        model: listing.model,
        year: listing.year,
        mileage: listing.mileage,
        currentBid: listing.currentBid,
        startingPrice: listing.startingPrice,
        status: listing.status,
        auctionEndTime: listing.auctionEndTime,
        auctionStartTime: listing.auctionStartTime,
        photos: [], // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        customsCleared: listing.customsCleared,
        recycled: listing.recycled,
        technicalInspectionValid: listing.technicalInspectionValid,
        technicalInspectionDate: listing.technicalInspectionDate,
        tinted: listing.tinted,
        tintingDate: listing.tintingDate,
        engine: listing.engine,
        transmission: listing.transmission,
        fuelType: listing.fuelType,
        color: listing.color,
        condition: listing.condition,
        location: listing.location,
        batteryCapacity: listing.batteryCapacity,
        electricRange: listing.electricRange,
        bidCount: bidCountsCache.get(listing.id) || 0
      }));
      
      // console.log("Sending optimized response"); // –£–±—Ä–∞–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      res.json(optimizedListings);
    } catch (error) {
      console.error("Error in listings endpoint:", error);
      res.status(500).json({ error: "Server error" });
    }
  });

  // Cached endpoint for getting individual photo by index
  const photoCache = new Map<string, Buffer>();
  const photoCacheTypes = new Map<string, string>();
  
  app.get("/api/listings/:id/photo/:index", async (req, res) => {
    try {
      const cacheKey = `${req.params.id}-${req.params.index}`;
      
      // Check cache first
      if (photoCache.has(cacheKey)) {
        const buffer = photoCache.get(cacheKey)!;
        const mimeType = photoCacheTypes.get(cacheKey) || 'image/jpeg';
        
        res.set('Content-Type', mimeType);
        res.set('Cache-Control', 'public, max-age=604800'); // 7 –¥–Ω–µ–π –∫—ç—à –¥–ª—è —Ñ–æ—Ç–æ
        res.send(buffer);
        return;
      }
      
      // Validate input parameters for security
      const listingId = parseInt(req.params.id);
      const photoIndex = parseInt(req.params.index);
      
      if (isNaN(listingId) || listingId <= 0 || isNaN(photoIndex) || photoIndex < 0 || photoIndex > 99) {
        return res.status(400).json({ error: "Invalid parameters" });
      }
      
      // Get photos directly from database for this endpoint only
      const [listing] = await db.select({ photos: carListings.photos }).from(carListings).where(eq(carListings.id, listingId));
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      let photoArray: string[] = [];
      if (listing.photos) {
        if (Array.isArray(listing.photos)) {
          photoArray = listing.photos;
        } else if (typeof listing.photos === 'string') {
          photoArray = JSON.parse(listing.photos);
        }
      }
      
      const requestedPhotoIndex = Number(req.params.index);
      if (requestedPhotoIndex >= 0 && requestedPhotoIndex < photoArray.length) {
        const photoData = photoArray[requestedPhotoIndex];
        
        if (photoData.startsWith('data:image/')) {
          const matches = photoData.match(/data:image\/([^;]+);base64,(.+)/);
          if (matches) {
            const originalMimeType = `image/${matches[1]}`;
            const base64Data = matches[2];
            const originalBuffer = Buffer.from(base64Data, 'base64');
            
            // Compress image automatically to reduce size while maintaining quality
            let compressedBuffer: Buffer;
            let outputMimeType = 'image/jpeg';
            
            try {
              const originalSize = originalBuffer.length;
              
              // Compress images larger than 150KB for better performance
              if (originalSize > 150 * 1024) {
                // Determine optimal settings based on image size
                let quality = 85;
                let maxWidth = 1200;
                let maxHeight = 800;
                
                if (originalSize > 2 * 1024 * 1024) { // > 2MB - aggressive compression
                  quality = 75;
                  maxWidth = 1000;
                  maxHeight = 667;
                } else if (originalSize > 1 * 1024 * 1024) { // > 1MB - moderate compression
                  quality = 80;
                  maxWidth = 1100;
                  maxHeight = 733;
                }
                
                compressedBuffer = await sharp(originalBuffer)
                  .jpeg({ 
                    quality,
                    progressive: true,
                    mozjpeg: true,
                    optimiseScans: true
                  })
                  .resize(maxWidth, maxHeight, {
                    fit: 'inside',
                    withoutEnlargement: true
                  })
                  .toBuffer();
                
                const compressedSize = compressedBuffer.length;
                const compressionRatio = ((originalSize - compressedSize) / originalSize * 100).toFixed(1);
                
                console.log(`Image compressed: ${(originalSize/1024).toFixed(1)}KB -> ${(compressedSize/1024).toFixed(1)}KB (${compressionRatio}% reduction)`);
              } else {
                // Small images - use original
                compressedBuffer = originalBuffer;
                outputMimeType = originalMimeType;
              }
            } catch (error) {
              console.error('Image compression failed, using original:', error);
              compressedBuffer = originalBuffer;
              outputMimeType = originalMimeType;
            }
            
            // Cache the processed image
            photoCache.set(cacheKey, compressedBuffer);
            photoCacheTypes.set(cacheKey, outputMimeType);
            
            res.set('Content-Type', outputMimeType);
            res.set('Cache-Control', 'public, max-age=604800'); // 7 –¥–Ω–µ–π –∫—ç—à –¥–ª—è —Ñ–æ—Ç–æ
            res.send(compressedBuffer);
            return;
          }
        }
      }
      
      res.status(404).json({ error: "Photo not found" });
    } catch (error) {
      console.error("Error fetching photo:", error);
      res.status(500).json({ error: "Failed to fetch photo" });
    }
  });



  app.get("/api/listings/search", async (req, res) => {
    try {
      // Validate query parameters for security
      const validatedQuery = queryParamsSchema.safeParse(req.query);
      if (!validatedQuery.success) {
        return res.status(400).json({ error: "Invalid search parameters" });
      }
      
      const filters = validatedQuery.data;
      
      // Create cache key from filters
      const cacheKey = `search_${JSON.stringify(filters)}`;
      
      // Check cache first for search results
      const cached = getCached(cacheKey);
      if (cached) {
        return res.json(cached);
      }
      
      const listings = await storage.searchListings(filters);
      
      // Get bid counts for search results in batch if we have results
      let enrichedListings = listings;
      if (listings.length > 0) {
        const listingIds = listings.map(listing => listing.id);
        const bidCounts = await storage.getBidCountsForListings(listingIds);
        
        enrichedListings = listings.map(listing => ({
          ...listing,
          bidCount: bidCounts[listing.id] || 0
        }));
      }
      
      // Cache the result for 30 seconds
      setCache(cacheKey, enrichedListings);
      
      res.json(enrichedListings);
    } catch (error) {
      res.status(500).json({ error: "Failed to search listings" });
    }
  });

  // In-memory cache for seller listings
  const sellerListingsCache = new Map();
  
  app.get("/api/listings/seller/:sellerId", async (req, res) => {
    try {
      const sellerId = parseInt(req.params.sellerId);
      
      // Check in-memory cache first
      if (sellerListingsCache.has(sellerId)) {
        console.log(`Fast cache hit for seller ${sellerId}`);
        return res.json(sellerListingsCache.get(sellerId));
      }
      
      console.log(`Fetching seller listings for ${sellerId}...`);
      const startTime = Date.now();
      const listings = await storage.getListingsBySeller(sellerId);
      console.log(`Query took ${Date.now() - startTime}ms`);
      
      const enrichedListings = listings.map(listing => ({
        ...listing,
        bidCount: 0
      }));
      
      // Cache for 10 minutes in memory
      sellerListingsCache.set(sellerId, enrichedListings);
      setTimeout(() => sellerListingsCache.delete(sellerId), 10 * 60 * 1000);
      
      res.json(enrichedListings);
    } catch (error) {
      console.error('Error in seller listings endpoint:', error);
      res.status(500).json({ error: "Failed to fetch seller listings" });
    }
  });

  app.get("/api/listings/:id", async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const cacheKey = `listing_${listingId}`;
      
      // Check cache first
      const cached = getCached(cacheKey);
      if (cached) { // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
        console.log(`üéØ –ö–≠–®–ò–†–û–í–ê–ù–ù–´–ô –∞—É–∫—Ü–∏–æ–Ω ${listingId} currentBid=${cached.currentBid}`);
        return res.json(cached);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      
      const listing = await storage.getListing(listingId);
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      console.log(`üÜï –°–í–ï–ñ–ò–ô –∞—É–∫—Ü–∏–æ–Ω ${listingId} currentBid=${listing.currentBid}`);
      
      // Cache for 30 seconds
      setCache(cacheKey, listing);
      
      res.json(listing);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch listing" });
    }
  });

  // Endpoint –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  app.post("/api/compress-photos", async (req, res) => {
    try {
      const { photos } = req.body;
      
      if (!Array.isArray(photos)) {
        return res.status(400).json({ error: "Photos must be an array" });
      }
      
      const compressedPhotos: string[] = [];
      
      for (const photoData of photos) {
        if (typeof photoData === 'string' && photoData.startsWith('data:image/')) {
          const matches = photoData.match(/data:image\/([^;]+);base64,(.+)/);
          if (matches) {
            const base64Data = matches[2];
            const originalBuffer = Buffer.from(base64Data, 'base64');
            const originalSize = originalBuffer.length;
            
            // console.log(`üîÑ –°–∂–∏–º–∞–µ–º —Ñ–æ—Ç–æ —Ä–∞–∑–º–µ—Ä–æ–º ${(originalSize/1024).toFixed(1)}KB`); // –£–±—Ä–∞–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
            try {
              // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
              let quality = 70;
              let maxWidth = 1000;
              
              if (originalSize > 2 * 1024 * 1024) { // > 2MB
                quality = 60;
                maxWidth = 800;
              } else if (originalSize > 500 * 1024) { // > 500KB
                quality = 65;
                maxWidth = 900;
              }
              
              const compressedBuffer = await sharp(originalBuffer)
                .jpeg({ 
                  quality,
                  progressive: true,
                  mozjpeg: true,
                  optimiseScans: true
                })
                .resize(maxWidth, null, {
                  fit: 'inside',
                  withoutEnlargement: true
                })
                .toBuffer();
              
              const compressedSize = compressedBuffer.length;
              const compressionRatio = ((originalSize - compressedSize) / originalSize * 100).toFixed(1);
              
              console.log(`‚úÖ –°–∂–∞—Ç–æ: ${(originalSize/1024).toFixed(1)}KB ‚Üí ${(compressedSize/1024).toFixed(1)}KB (${compressionRatio}% —ç–∫–æ–Ω–æ–º–∏—è)`);
              
              // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ base64
              const compressedBase64 = `data:image/jpeg;base64,${compressedBuffer.toString('base64')}`;
              compressedPhotos.push(compressedBase64);
              
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª:', error);
              compressedPhotos.push(photoData);
            }
          } else {
            compressedPhotos.push(photoData);
          }
        } else {
          compressedPhotos.push(photoData);
        }
      }
      
      res.json({ compressedPhotos });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
      res.status(500).json({ error: "Failed to compress photos" });
    }
  });

  app.post("/api/listings", async (req, res) => {
    try {
      // Preprocess the data to handle electric vehicle fields
      const processedData = { ...req.body };
      
      // Convert electric vehicle fields to correct types if they exist
      if (processedData.batteryCapacity !== undefined && processedData.batteryCapacity !== null) {
        processedData.batteryCapacity = typeof processedData.batteryCapacity === 'string' 
          ? parseFloat(processedData.batteryCapacity) 
          : processedData.batteryCapacity;
      }
      
      if (processedData.electricRange !== undefined && processedData.electricRange !== null) {
        processedData.electricRange = typeof processedData.electricRange === 'string' 
          ? parseInt(processedData.electricRange) 
          : processedData.electricRange;
      }
      
      const validatedData = insertCarListingSchema.parse(processedData);
      
      // Generate lot number if not provided
      let lotNumber = validatedData.lotNumber;
      if (!lotNumber) {
        const { generateUniqueLotNumber } = await import('./utils/lotNumberGenerator');
        const existingListings = await storage.getListingsByStatus('', 1000); // Get all to check lot numbers
        const existingLotNumbers = existingListings.map(l => l.lotNumber);
        lotNumber = generateUniqueLotNumber(existingLotNumbers);
      }
      
      // Set new listings to pending status for moderation
      const listingWithPendingStatus = {
        ...validatedData,
        lotNumber,
        status: 'pending'
      };
      
      const listing = await storage.createListing(listingWithPendingStatus);
      
      // Clear all caches to force refresh
      clearAllCaches();
      
      // Check for matching car alerts and send notifications
      try {
        console.log('Checking alerts for new listing:', listing.make, listing.model);
        const matchingAlerts = await storage.checkAlertsForNewListing(listing);
        console.log('Found matching alerts:', matchingAlerts.length);
        
        // Group alerts by user to avoid duplicate notifications
        const userAlerts = new Map<number, CarAlert[]>();
        for (const alert of matchingAlerts) {
          if (!userAlerts.has(alert.userId)) {
            userAlerts.set(alert.userId, []);
          }
          userAlerts.get(alert.userId)!.push(alert);
        }
        
        // Send notification for each matching alert (avoiding duplicates)
        for (const alert of matchingAlerts) {
          console.log('Creating notification for user:', alert.userId, 'alert:', alert.id);
          
          // Check if user has already viewed this alert for this listing
          const hasViewed = await storage.hasUserViewedAlert(alert.userId, alert.id, listing.id);
          
          // Check if notification for this listing and alert already exists
          const existingNotifications = await storage.getNotificationsByUser(alert.userId);
          const duplicateExists = existingNotifications.some(n => 
            n.type === "car_found" && 
            n.listingId === listing.id && 
            n.alertId === alert.id
          );
          
          if (!hasViewed && !duplicateExists) {
            await storage.createNotification({
              userId: alert.userId,
              title: "–ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É",
              message: `${listing.make.toUpperCase()} ${listing.model.toUpperCase()} ${listing.year} –≥. - ${listing.startingPrice} –°–æ–º–æ–Ω–∏ (–ª–æ—Ç #${listing.lotNumber})`,
              type: "car_found",
              listingId: listing.id,
              alertId: alert.id,
              isRead: false
            });
          } else {
            console.log('User has already viewed this alert or notification exists for listing:', listing.id, 'alert:', alert.id);
          }
        }
      } catch (alertError) {
        console.error('Error checking alerts for new listing:', alertError);
        // Don't fail the listing creation if alert checking fails
      }
      
      res.status(201).json(listing);
    } catch (error) {
      console.error('Error creating listing:', error);
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid listing data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to create listing", details: error.message });
    }
  });

  app.put("/api/listings/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const updateData = req.body;
      
      const listing = await storage.updateListing(id, updateData);
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      clearAllCaches();
      
      res.json(listing);
    } catch (error) {
      console.error("Error updating listing:", error);
      res.status(500).json({ error: "Failed to update listing" });
    }
  });

  app.patch("/api/listings/:id/status", async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const { status } = req.body;
      
      if (!["pending", "active", "ended", "rejected"].includes(status)) {
        return res.status(400).json({ error: "Invalid status" });
      }

      const listing = await storage.updateListingStatus(listingId, status);
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      res.json(listing);
    } catch (error) {
      res.status(500).json({ error: "Failed to update listing status" });
    }
  });

  // Bidding routes
  app.get("/api/listings/:id/bids", async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–≠–® - –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      const bids = await storage.getBidsForListing(listingId);
      
      // Enrich bids with user information
      const enrichedBids = await Promise.all(
        bids.map(async (bid) => {
          const user = await storage.getUser(bid.bidderId);
          return {
            ...bid,
            bidder: {
              id: user?.id,
              username: user?.username,
              email: user?.email
            }
          };
        })
      );
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ö–≠–®–ò–†–£–ï–ú - –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, private');
      res.setHeader('Pragma', 'no-cache');
      res.setHeader('Expires', '0');
      
      res.json(enrichedBids);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch bids" });
    }
  });

  app.post("/api/listings/:id/bids", async (req, res) => {
    console.log(`üö®üö®üö® –ö–†–ò–¢–ò–ß–ù–û: POST –∑–∞–ø—Ä–æ—Å —Å—Ç–∞–≤–∫–∏ –¥–æ—Å—Ç–∏–≥ —Ä–æ—É—Ç–∞! ID: ${req.params.id}`);
    console.log(`üö®üö®üö® –ö–†–ò–¢–ò–ß–ù–û: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:`, req.body);
    try {
      const listingId = parseInt(req.params.id);
      console.log(`üéØ –ü–û–õ–£–ß–ï–ù POST –∑–∞–ø—Ä–æ—Å —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId}:`, req.body);
      console.log(`üéØ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –°–¢–ê–í–ö–ò –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.body.bidderId}`);
      
      // Check if auction exists and is still active
      const listing = await storage.getListing(listingId);
      if (!listing) {
        return res.status(404).json({ error: "–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // Check if auction has ended
      const now = new Date();
      if (listing.auctionEndTime && listing.auctionEndTime <= now) {
        return res.status(400).json({ error: "–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞–≤–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è." });
      }
      
      // Check if auction is active
      if (listing.status !== 'active') {
        return res.status(400).json({ error: "–ê—É–∫—Ü–∏–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" });
      }
      
      const bidData = {
        ...req.body,
        listingId
      };
      
      const validatedData = insertBidSchema.parse(bidData);
      
      // Check if user is active before allowing bid
      const user = await storage.getUser(validatedData.bidderId);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      
      if (!user.isActive) {
        return res.status(403).json({ 
          error: "Account not activated", 
          message: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ WhatsApp –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
        });
      }
      
      // Check if user is trying to bid on their own listing
      if (listing.sellerId === validatedData.bidderId) {
        return res.status(403).json({ 
          error: "Cannot bid on own listing", 
          message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏."
        });
      }
      
      // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ü–ï–†–ï–î –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Ç–∞–≤–æ–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      clearCachePattern('listings');
      clearCachePattern('auction');
      clearCachePattern('bids');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∫—ç—à–∞
      const existingBids = await storage.getBidsForListing(listingId);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ ${existingBids.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId}:`);
      existingBids.forEach((bid, index) => {
        console.log(`  ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${bid.bidderId}: ${bid.amount} –°–æ–º–æ–Ω–∏`);
      });
      const currentHighestBid = existingBids.length > 0 
        ? Math.max(...existingBids.map(bid => parseFloat(bid.amount)))
        : parseFloat(listing.startingPrice);
        
      console.log(`üí∞ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏: —Ç–µ–∫—É—â–∞—è –º–∞–∫—Å ${currentHighestBid}, –Ω–æ–≤–∞—è ${validatedData.amount}`);
      
      const newBidAmount = parseFloat(validatedData.amount);
      
      // Validate that new bid is higher than current highest bid
      if (newBidAmount <= currentHighestBid) {
        return res.status(400).json({ 
          error: "Bid too low", 
          message: `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ ${currentHighestBid} –°–æ–º–æ–Ω–∏.`
        });
      }
      
      // Check if user already has the highest bid
      const userHighestBid = existingBids
        .filter(bid => bid.bidderId === validatedData.bidderId)
        .sort((a, b) => parseFloat(b.amount) - parseFloat(a.amount))[0];
      
      if (userHighestBid && parseFloat(userHighestBid.amount) === currentHighestBid) {
        return res.status(400).json({ 
          error: "Already highest bidder", 
          message: "–í—ã —É–∂–µ –ª–∏–¥–∏—Ä—É–µ—Ç–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π."
        });
      }
      
      console.log(`üöÄ –°–û–ó–î–ê–ï–ú –°–¢–ê–í–ö–£: –∞—É–∫—Ü–∏–æ–Ω ${listingId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${validatedData.bidderId}, —Å—É–º–º–∞ ${validatedData.amount}`);
      const bid = await storage.createBid(validatedData);
      console.log(`‚úÖ –°–¢–ê–í–ö–ê –°–û–ó–î–ê–ù–ê: ID ${bid.id}, —Å—É–º–º–∞ ${bid.amount}`);
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º current_bid –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ù–ï–ú–ï–î–õ–ï–ù–ù–û
      console.log(`üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ current_bid –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId} –Ω–∞ ${validatedData.amount}`);
      await storage.updateListingCurrentBid(listingId, validatedData.amount);
      console.log(`‚úÖ –ó–ê–í–ï–†–®–ï–ù–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ current_bid –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId}`);
      
      // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
      const verificationListing = await storage.getListing(listingId);
      console.log(`üîç –ü–†–û–í–ï–†–ö–ê: current_bid –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å ${verificationListing?.currentBid}`);
      
      if (verificationListing?.currentBid !== validatedData.amount) {
        console.error(`‚ùå –û–®–ò–ë–ö–ê: current_bid –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è! –û–∂–∏–¥–∞–ª—Å—è ${validatedData.amount}, –ø–æ–ª—É—á–µ–Ω ${verificationListing?.currentBid}`);
      } else {
        console.log(`‚úÖ –£–°–ü–ï–•: current_bid –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${validatedData.amount}`);
      }
      
      if (listing) {
        // Get all bids for this listing to find the previously highest bidder
        const allBids = await storage.getBidsForListing(listingId);
        
        // Sort bids by amount (highest first) to find who was previously winning
        const sortedBids = allBids
          .filter(bid => bid.bidderId !== validatedData.bidderId) // Exclude current bidder
          .sort((a, b) => parseFloat(b.amount) - parseFloat(a.amount));
        
        // Notify ALL users who participated in this auction about the new bid
        const uniqueBidders = new Set<number>();
        allBids.forEach(bid => {
          if (bid.bidderId !== validatedData.bidderId) { // Exclude current bidder
            uniqueBidders.add(bid.bidderId);
          }
        });
        
        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª—è–µ–º ${uniqueBidders.size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ ${listingId}`);
        console.log(`üìã –í—Å–µ —Å—Ç–∞–≤–∫–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ ${listingId}:`, allBids.map(b => `ID:${b.bidderId} - ${b.amount} –°–æ–º–æ–Ω–∏`));
        console.log(`üéØ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, Array.from(uniqueBidders));
        
        // Send notification to each participant
        for (const participantId of uniqueBidders) {
          try {
            console.log(`üìù –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${participantId}...`);
            const carTitle = `${listing.make} ${listing.model} ${listing.year}`;
            const formattedAmount = parseInt(validatedData.amount).toLocaleString('ru-RU');
            
            const notification = await storage.createNotification({
              userId: participantId,
              title: "üîî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–±–∏—Ç–∞",
              message: `${carTitle}\n–°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤—ã—à–µ ${formattedAmount} —Å–æ–º–æ–Ω–∏!`,
              type: "bid_outbid",
              listingId: listingId,
              isRead: false
            });
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${participantId}, ID: ${notification.id}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            if (wsManager) {
              console.log(`üì≤ –ü–û–ü–´–¢–ö–ê –æ—Ç–ø—Ä–∞–≤–∏—Ç—å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participantId}`);
              wsManager.sendNotificationToUser(participantId, notification);
              console.log(`üì≤ ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participantId}`);
            } else {
              console.log(`‚ùå wsManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`);
            }
          } catch (notificationError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${participantId}:`, notificationError);
          }
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
      console.log(`üîç –ü–†–û–í–ï–†–ö–ê wsManager: ${wsManager ? '–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' : '–ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù'}`);
      if (wsManager) {
        const updatedListing = await storage.getListing(listingId);
        const allBids = await storage.getBidsForListing(listingId);
        
        console.log(`üîç –û–¢–õ–ê–î–ö–ê –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–î: –ê—É–∫—Ü–∏–æ–Ω ${listingId}, current_bid –≤ –æ–±—ä–µ–∫—Ç–µ: ${updatedListing?.currentBid}`);
        
        const bidUpdateData = {
          bid,
          listing: updatedListing,
          totalBids: allBids.length,
          highestBid: Math.max(...allBids.map(b => parseFloat(b.amount))),
          timestamp: Date.now()
        };
        
        console.log(`üì° –û–¢–ü–†–ê–í–õ–Ø–ï–ú WebSocket broadcast –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId}:`, {
          bidAmount: bid.amount,
          currentBid: updatedListing?.currentBid,
          highestBid: bidUpdateData.highestBid,
          totalBids: bidUpdateData.totalBids
        });
        
        wsManager.broadcastBidUpdate(listingId, bidUpdateData);
        
        console.log(`‚úÖ WebSocket broadcast –û–¢–ü–†–ê–í–õ–ï–ù: –Ω–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ ${bid.amount} –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω ${listingId}, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –≤ WebSocket: ${updatedListing?.currentBid}`);
      }
      
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê –°–ï–†–í–ï–†–ê –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      clearCachePattern('listings');
      clearCachePattern('auction');
      console.log('üßπ –û—á–∏—â–µ–Ω —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫—ç—à –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫');
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –í–°–ï –∫—ç—à–∏ –≤–∫–ª—é—á–∞—è cachedListings
      clearAllCaches();
      
      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ –¥–µ—Ç–∞–ª—è—Ö
      clearCachePattern(`listing_${listingId}`);
      clearCachePattern(`auction_${listingId}`);
      console.log(`üßπ –û–ß–ò–©–ï–ù –ö–≠–® –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId} - —Ç–µ–ø–µ—Ä—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è`);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
      setTimeout(updateListingsCache, 100); // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 100–º—Å –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      lastBidUpdate = Date.now();
      
      res.status(201).json(bid);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid bid data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to place bid" });
    }
  });

  // User routes
  app.get("/api/users/by-phone/:phoneNumber", async (req, res) => {
    try {
      const phoneNumber = decodeURIComponent(req.params.phoneNumber);
      const email = phoneNumber + "@autoauction.tj";
      const user = await storage.getUserByEmail(email);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user by phone" });
    }
  });

  app.get("/api/users/by-email/:email", async (req, res) => {
    try {
      const email = decodeURIComponent(req.params.email);
      const user = await storage.getUserByEmail(email);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user by email" });
    }
  });

  app.get("/api/users/:id", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user" });
    }
  });

  app.get("/api/users/by-phone/:phone", async (req, res) => {
    try {
      const rawPhone = req.params.phone;
      const phoneNumber = decodeURIComponent(rawPhone);
      
      // Map phone numbers to user IDs directly based on known database data
      let userId = 0;
      
      if (phoneNumber === "+992 (22) 222-22-22") {
        userId = 3; // buyer@autoauction.tj
      } else if (phoneNumber === "+992 (99) 999-99-99") {
        userId = 12; // +992999999999@autoauction.tj
      } else {
        return res.status(404).json({ 
          error: "User not found", 
          raw: rawPhone, 
          decoded: phoneNumber,
          target1: "+992 (22) 222-22-22",
          target2: "+992 (99) 999-99-99"
        });
      }
      
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ error: "User not found in database" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user" });
    }
  });

  // Create new user
  app.post("/api/users", async (req, res) => {
    try {
      const { email, username, fullName, isActive, role, phoneNumber } = req.body;
      
      if (!email || !username) {
        return res.status(400).json({ error: "Email and username are required" });
      }
      
      // Check if user already exists
      const existingUser = await storage.getUserByEmail(email);
      if (existingUser) {
        return res.status(409).json({ error: "User already exists" });
      }
      
      const user = await storage.createUser({
        email,
        username,
        fullName: fullName || null,
        isActive: isActive || false,
        role: role || 'buyer',
        phoneNumber: phoneNumber || null
      });
      
      console.log(`Created new user: ${user.id} (${user.email})`);
      res.status(201).json(user);
    } catch (error) {
      console.error("Failed to create user:", error);
      res.status(500).json({ error: "Failed to create user" });
    }
  });

  app.patch("/api/users/:id", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const { fullName, profilePhoto } = req.body;
      
      const user = await storage.updateUserProfile(userId, { fullName, profilePhoto });
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to update user profile" });
    }
  });

  // Admin route to activate/deactivate users
  app.patch("/api/admin/users/:id/activate", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const { isActive } = req.body;
      
      const updatedUser = await storage.updateUserStatus(userId, isActive);
      if (!updatedUser) {
        return res.status(404).json({ error: "User not found" });
      }
      
      res.json(updatedUser);
    } catch (error) {
      res.status(500).json({ error: "Failed to update user status" });
    }
  });

  app.get("/api/users/:id/listings", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const listings = await storage.getListingsBySeller(userId);
      res.json(listings);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user listings" });
    }
  });

  app.get("/api/users/:id/bids", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const bids = await storage.getBidsByUser(userId);
      res.json(bids);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user bids" });
    }
  });

  app.get("/api/users/:id/wins", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const wins = await storage.getUserWins(userId);
      res.json(wins);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user wins" });
    }
  });

  // Favorites routes
  app.get("/api/users/:id/favorites", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const favorites = await storage.getFavoritesByUser(userId);
      res.json(favorites);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch favorites" });
    }
  });

  app.post("/api/favorites", async (req, res) => {
    try {
      const validatedData = insertFavoriteSchema.parse(req.body);
      const favorite = await storage.createFavorite(validatedData);
      res.status(201).json(favorite);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid favorite data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to add favorite" });
    }
  });

  app.delete("/api/favorites/:id", async (req, res) => {
    try {
      const favoriteId = parseInt(req.params.id);
      const success = await storage.deleteFavorite(favoriteId);
      if (!success) {
        return res.status(404).json({ error: "Favorite not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: "Failed to remove favorite" });
    }
  });

  // Search routes
  app.get("/api/search", async (req, res) => {
    try {
      const { q, make, minPrice, maxPrice, year } = req.query;
      const filters = {
        query: q as string,
        make: make as string,
        minPrice: minPrice ? parseFloat(minPrice as string) : undefined,
        maxPrice: maxPrice ? parseFloat(maxPrice as string) : undefined,
        year: year ? parseInt(year as string) : undefined,
      };
      
      const results = await storage.searchListings(filters);
      res.json(results);
    } catch (error) {
      res.status(500).json({ error: "Failed to search listings" });
    }
  });

  // Admin routes
  app.get("/api/admin/stats", async (req, res) => {
    try {
      const stats = await storage.getAdminStats();
      res.json(stats);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch admin stats" });
    }
  });

  app.get("/api/admin/users", async (req, res) => {
    try {
      const users = await storage.getAllUsers();
      res.json(users);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch users" });
    }
  });

  app.get("/api/admin/listings", async (req, res) => {
    try {
      const allListings = await storage.getListingsByStatus("pending");
      const activeListings = await storage.getListingsByStatus("active");
      const endedListings = await storage.getListingsByStatus("ended");
      const rejectedListings = await storage.getListingsByStatus("rejected");
      
      const listings = [...allListings, ...activeListings, ...endedListings, ...rejectedListings];
      res.json(listings);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch listings" });
    }
  });

  app.patch("/api/admin/users/:id", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const { isActive } = req.body;
      
      const user = await storage.updateUserStatus(userId, isActive);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to update user status" });
    }
  });

  app.put("/api/admin/users/:id/status", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const { isActive } = req.body;
      
      const user = await storage.updateUserStatus(userId, isActive);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to update user status" });
    }
  });

  app.patch("/api/admin/listings/:id", async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const { status } = req.body;
      
      const listing = await storage.updateListingStatus(listingId, status);
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      // Clear all caches when admin changes listing status
      clearAllCaches();
      
      res.json(listing);
    } catch (error) {
      res.status(500).json({ error: "Failed to update listing status" });
    }
  });

  // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  app.put("/api/admin/listings/:id", adminAuth, async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const { make, model, year, mileage, description, startingPrice, status, location } = req.body;
      
      const listing = await storage.updateListing(listingId, {
        make,
        model, 
        year,
        mileage,
        description,
        startingPrice,
        status,
        location
      });
      
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      // Clear all caches when admin updates listing
      clearAllCaches();
      
      res.json(listing);
    } catch (error) {
      console.error("Error updating listing:", error);
      res.status(500).json({ error: "Failed to update listing" });
    }
  });

  app.put("/api/admin/listings/:id/status", async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const { status } = req.body;
      
      const listing = await storage.updateListingStatus(listingId, status);
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      // Clear all caches when admin changes listing status
      clearAllCaches();
      
      res.json(listing);
    } catch (error) {
      res.status(500).json({ error: "Failed to update listing status" });
    }
  });

  // Notifications routes
  app.get("/api/notifications/:userId", async (req, res) => {
    try {
      const userId = parseInt(req.params.userId);
      console.log(`üîî –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      const notifications = await storage.getNotificationsByUser(userId);
      console.log(`üì© –ù–∞–π–¥–µ–Ω–æ ${notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      res.json(notifications);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.params.userId}:`, error);
      res.status(500).json({ error: "Failed to fetch notifications" });
    }
  });

  app.post("/api/notifications", async (req, res) => {
    try {
      const validatedData = insertNotificationSchema.parse(req.body);
      const notification = await storage.createNotification(validatedData);
      res.status(201).json(notification);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid notification data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to create notification" });
    }
  });



  app.patch("/api/notifications/:id/read", async (req, res) => {
    try {
      const notificationId = parseInt(req.params.id);
      const success = await storage.markNotificationAsRead(notificationId);
      if (!success) {
        return res.status(404).json({ error: "Notification not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: "Failed to mark notification as read" });
    }
  });

  app.delete("/api/notifications/:id", async (req, res) => {
    try {
      const notificationId = parseInt(req.params.id);
      console.log(`Attempting to delete notification with ID: ${notificationId}`);
      
      if (isNaN(notificationId)) {
        console.log(`Invalid notification ID: ${req.params.id}`);
        return res.status(400).json({ error: "Invalid notification ID" });
      }
      
      const success = await storage.deleteNotification(notificationId);
      console.log(`Delete notification result: ${success}`);
      
      if (!success) {
        return res.status(404).json({ error: "Notification not found" });
      }
      res.status(204).send();
    } catch (error) {
      console.error('Error deleting notification:', error);
      res.status(500).json({ error: "Failed to delete notification" });
    }
  });

  app.get("/api/notifications/:userId/unread-count", async (req, res) => {
    try {
      const userId = parseInt(req.params.userId);
      const count = await storage.getUnreadNotificationCount(userId);
      res.json({ count });
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch unread count" });
    }
  });

  // Car alerts routes
  app.get("/api/car-alerts/:userId", async (req, res) => {
    try {
      const userId = parseInt(req.params.userId);
      const cacheKey = `car-alerts-${userId}`;
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
      const alerts = await storage.getCarAlertsByUser(userId);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Ç–∏–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
      res.set({
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      });
      
      res.json(alerts);
    } catch (error) {
      console.error('Error in car-alerts route:', error);
      res.status(500).json({ error: "Failed to fetch car alerts" });
    }
  });



  app.post("/api/car-alerts", async (req, res) => {
    try {
      console.log('Creating car alert with data:', req.body);
      const validatedData = insertCarAlertSchema.parse(req.body);
      
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ storage
      const alert = await storage.createCarAlert(validatedData);
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      clearCachePattern(`car-alerts-${validatedData.userId}`);
      
      console.log('Car alert created successfully:', alert);
      res.status(201).json(alert);
    } catch (error) {
      console.error('Error creating car alert:', error);
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid alert data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to create alert" });
    }
  });

  app.delete("/api/car-alerts/:id", async (req, res) => {
    try {
      const alertId = parseInt(req.params.id);
      
      // –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º alert –Ω–∞–ø—Ä—è–º—É—é
      const success = await storage.deleteCarAlert(alertId);
      
      if (!success) {
        return res.status(404).json({ error: "Alert not found" });
      }
      
      // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å car-alerts
      clearCachePattern('car-alerts-');
      clearAllCaches(); // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
      
      console.log(`Deleted car alert ${alertId}, changes: 1`);
      res.status(204).send();
    } catch (error) {
      console.error('Error in DELETE car-alerts route:', error);
      res.status(500).json({ error: "Failed to delete alert" });
    }
  });

  // Banner routes
  app.get("/api/banners", async (req, res) => {
    try {
      const { position } = req.query;
      const cacheKey = `banners_${position || 'all'}`;
      
      const cached = getCached(cacheKey);
      if (cached) {
        return res.json(cached);
      }
      
      const banners = await storage.getBanners(position as string);
      setCache(cacheKey, banners);
      res.json(banners);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch banners" });
    }
  });

  app.post("/api/admin/banners", async (req, res) => {
    try {
      const bannerData = insertBannerSchema.parse(req.body);
      const banner = await storage.createBanner(bannerData);
      clearCachePattern('banners');
      res.status(201).json(banner);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: error.errors });
      }
      res.status(500).json({ error: "Failed to create banner" });
    }
  });

  app.put("/api/admin/banners/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const bannerData = insertBannerSchema.partial().parse(req.body);
      const banner = await storage.updateBanner(id, bannerData);
      
      if (!banner) {
        return res.status(404).json({ error: "Banner not found" });
      }
      
      clearCachePattern('banners');
      res.json(banner);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: error.errors });
      }
      res.status(500).json({ error: "Failed to update banner" });
    }
  });

  app.get("/api/admin/banners", async (req, res) => {
    try {
      const banners = await storage.getBanners();
      res.json(banners);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch banners" });
    }
  });

  app.delete("/api/admin/banners/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const success = await storage.deleteBanner(id);
      
      if (!success) {
        return res.status(404).json({ error: "Banner not found" });
      }
      
      clearCachePattern('banners');
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: "Failed to delete banner" });
    }
  });

  // Sell Car Section routes
  app.get("/api/sell-car-section", async (req, res) => {
    try {
      const section = await storage.getSellCarSection();
      res.json(section);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch sell car section" });
    }
  });

  app.put("/api/admin/sell-car-section", async (req, res) => {
    try {
      const validatedData = req.body; // Will validate in component
      const section = await storage.updateSellCarSection(validatedData);
      res.json(section);
    } catch (error) {
      res.status(500).json({ error: "Failed to update sell car section" });
    }
  });

  // Advertisement Carousel routes
  app.get("/api/advertisement-carousel", async (req, res) => {
    try {
      const cacheKey = 'advertisement_carousel';
      const cached = getCached(cacheKey);
      if (cached) {
        console.log(`üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—É—Å–µ–ª–∏: ${cached.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        return res.json(cached);
      }
      
      const carousel = await storage.getAdvertisementCarousel();
      console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—É—Å–µ–ª–∏ –∏–∑ –ë–î: ${carousel.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      setCache(cacheKey, carousel);
      res.json(carousel);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch advertisement carousel" });
    }
  });

  app.get("/api/admin/advertisement-carousel", async (req, res) => {
    try {
      // For admin, show all items (including inactive)
      const carousel = await (storage as any).getAdvertisementCarouselAll ? 
        await (storage as any).getAdvertisementCarouselAll() : 
        await storage.getAdvertisementCarousel();
      res.json(carousel);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch advertisement carousel" });
    }
  });

  app.post("/api/admin/advertisement-carousel", async (req, res) => {
    try {
      const item = await storage.createAdvertisementCarouselItem(req.body);
      clearCachePattern('advertisement_carousel');
      res.status(201).json(item);
    } catch (error) {
      res.status(500).json({ error: "Failed to create carousel item" });
    }
  });

  app.get("/api/admin/advertisement-carousel/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const item = await storage.getAdvertisementCarouselItem(id);
      if (!item) {
        return res.status(404).json({ error: "Carousel item not found" });
      }
      res.json(item);
    } catch (error) {
      res.status(500).json({ error: "Failed to get carousel item" });
    }
  });

  app.put("/api/admin/advertisement-carousel/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏ ID: ${id}`);
      console.log(`üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, req.body);
      
      const item = await storage.updateAdvertisementCarouselItem(id, req.body);
      if (!item) {
        console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—É—Å–µ–ª–∏ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(404).json({ error: "Carousel item not found" });
      }
      
      console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—É—Å–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω:`, item);
      clearCachePattern('advertisement_carousel');
      res.json(item);
    } catch (error) {
      console.error(`üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏:`, error);
      res.status(500).json({ error: "Failed to update carousel item" });
    }
  });

  app.delete("/api/admin/advertisement-carousel/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const deleted = await storage.deleteAdvertisementCarouselItem(id);
      if (!deleted) {
        return res.status(404).json({ error: "Carousel item not found" });
      }
      clearCachePattern('advertisement_carousel');
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: "Failed to delete carousel item" });
    }
  });

  // Sell Car Banner API routes
  app.get("/api/sell-car-banner", async (req, res) => {
    try {
      const cacheKey = 'sell_car_banner';
      
      const cached = getCached(cacheKey);
      if (cached) {
        return res.json(cached);
      }
      
      const banner = await storage.getSellCarBanner();
      if (!banner) {
        // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const defaultBanner = await storage.createSellCarBanner({
          title: "–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ",
          description: "–ü–æ–ª—É—á–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ –Ω–∞—à–µ–º –∞—É–∫—Ü–∏–æ–Ω–µ",
          buttonText: "–ù–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É",
          linkUrl: "/sell",
          backgroundImageUrl: "https://images.unsplash.com/photo-1568605117036-5fe5e7bab0b7?w=800&h=300&fit=crop",
          gradientFrom: "#059669",
          gradientTo: "#047857",
          textColor: "#ffffff",
          isActive: true,
          overlayOpacity: 60
        });
        setCache(cacheKey, defaultBanner);
        return res.json(defaultBanner);
      }
      
      setCache(cacheKey, banner);
      res.json(banner);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch sell car banner" });
    }
  });

  app.put("/api/admin/sell-car-banner", async (req, res) => {
    try {
      const bannerData = req.body; // Will validate in storage
      const banner = await storage.updateSellCarBanner(bannerData);
      clearCachePattern('sell_car_banner');
      res.json(banner);
    } catch (error) {
      res.status(500).json({ error: "Failed to update sell car banner" });
    }
  });

  // Documents API routes
  app.get("/api/documents", async (req, res) => {
    try {
      const type = req.query.type as string;
      const documents = await storage.getDocuments(type);
      res.json(documents);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch documents" });
    }
  });

  app.get("/api/admin/documents", async (req, res) => {
    try {
      const type = req.query.type as string;
      const documents = await storage.getDocuments(type);
      res.json(documents);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch documents" });
    }
  });

  app.get("/api/admin/documents/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const document = await storage.getDocument(id);
      if (!document) {
        return res.status(404).json({ error: "Document not found" });
      }
      res.json(document);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch document" });
    }
  });

  app.post("/api/admin/documents", async (req, res) => {
    try {
      const document = await storage.createDocument(req.body);
      res.status(201).json(document);
    } catch (error) {
      res.status(500).json({ error: "Failed to create document" });
    }
  });

  app.put("/api/admin/documents/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const document = await storage.updateDocument(id, req.body);
      if (!document) {
        return res.status(404).json({ error: "Document not found" });
      }
      res.json(document);
    } catch (error) {
      res.status(500).json({ error: "Failed to update document" });
    }
  });

  app.delete("/api/admin/documents/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const deleted = await storage.deleteDocument(id);
      if (!deleted) {
        return res.status(404).json({ error: "Document not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: "Failed to delete document" });
    }
  });

  // ===============================
  // ADMIN API ENDPOINTS (–¥–ª—è Retool)
  // ===============================

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  app.get("/api/admin/users", adminAuth, async (req, res) => {
    try {
      const users = await storage.getAllUsers();
      res.json(users);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch users" });
    }
  });

  app.put("/api/admin/users/:id/status", adminAuth, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const { isActive } = req.body;
      const user = await storage.updateUserStatus(userId, isActive);
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to update user status" });
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/admin/users/:id", adminAuth, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user" });
    }
  });

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.put("/api/admin/users/:id", adminAuth, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const { fullName, email, phoneNumber } = req.body;
      
      const user = await storage.updateUserProfile(userId, {
        fullName,
        email,
        phoneNumber
      });
      
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to update user profile" });
    }
  });

  // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.delete("/api/admin/users/:id", adminAuth, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      console.log(`Attempting to delete user ${userId}`);
      
      const deleted = await storage.deleteUser(userId);
      if (!deleted) {
        console.log(`User ${userId} not found for deletion`);
        return res.status(404).json({ error: "User not found" });
      }
      
      console.log(`User ${userId} deleted successfully`);
      res.status(204).send();
    } catch (error) {
      console.error("Error deleting user:", error);
      res.status(500).json({ error: "Failed to delete user: " + error.message });
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/admin/users/:id/listings", adminAuth, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const listings = await storage.getListingsBySeller(userId);
      res.json(listings);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user listings" });
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/admin/users/:id/documents", adminAuth, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const documents = await storage.getUserDocuments(userId);
      res.json(documents);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user documents" });
    }
  });

  // –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  app.post("/api/admin/users/:id/documents", adminAuth, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const { type, title, content, fileUrl } = req.body;
      
      const document = await storage.createDocument({
        userId,
        type,
        title,
        content,
        fileUrl
      });
      
      res.status(201).json(document);
    } catch (error) {
      res.status(500).json({ error: "Failed to create document" });
    }
  });

  // –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.delete("/api/admin/users/:userId/documents/:documentId", adminAuth, async (req, res) => {
    try {
      const documentId = parseInt(req.params.documentId);
      const deleted = await storage.deleteDocument(documentId);
      if (!deleted) {
        return res.status(404).json({ error: "Document not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: "Failed to delete document" });
    }
  });

  // –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  app.get("/api/admin/listings", adminAuth, async (req, res) => {
    try {
      const { status } = req.query;
      const listings = await storage.getListingsByStatus(status as string || "pending");
      res.json(listings);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch listings" });
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
  app.get("/api/admin/listings/pending-approval", adminAuth, async (req, res) => {
    try {
      console.log('üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
      const listings = await storage.getListingsByStatus('pending');
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
      
      res.json(listings);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error);
      res.status(500).json({ error: "Failed to fetch pending approval listings" });
    }
  });

  // –û–¥–æ–±—Ä–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  app.post("/api/admin/listings/:id/approve", adminAuth, async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const listing = await storage.updateListingStatus(listingId, 'active');
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
      clearAllCaches();
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await updateListingsCache();
      
      res.json(listing);
    } catch (error) {
      res.status(500).json({ error: "Failed to approve listing" });
    }
  });

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
  app.post("/api/admin/listings/:id/reject", adminAuth, async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const listing = await storage.updateListingStatus(listingId, 'rejected');
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
      clearAllCaches();
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await updateListingsCache();
      
      res.json(listing);
    } catch (error) {
      res.status(500).json({ error: "Failed to reject listing" });
    }
  });

  // –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
  app.delete("/api/admin/listings/:id", adminAuth, async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const success = await storage.deleteListing(listingId);
      if (!success) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      clearAllCaches();
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await updateListingsCache();
      
      res.json({ success: true, message: "Listing deleted successfully" });
    } catch (error) {
      console.error("Error deleting listing:", error);
      res.status(500).json({ error: "Failed to delete listing" });
    }
  });

  app.put("/api/admin/listings/:id/status", adminAuth, async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const { status } = req.body;
      const listing = await storage.updateListingStatus(listingId, status);
      res.json(listing);
    } catch (error) {
      res.status(500).json({ error: "Failed to update listing status" });
    }
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
  app.get("/api/admin/stats", adminAuth, async (req, res) => {
    try {
      const stats = await storage.getAdminStats();
      res.json(stats);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch admin stats" });
    }
  });

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –∏ —Å–æ–∑–¥–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à
  app.post("/api/admin/listings/:id/end-auction", adminAuth, async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
      const listing = await storage.getListing(listingId);
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      const bids = await storage.getBidsForListing(listingId);
      
      if (bids.length === 0) {
        // –ù–µ—Ç —Å—Ç–∞–≤–æ–∫ - –∑–∞–≤–µ—Ä—à–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω (—Å ended_at –¥–ª—è –∞—Ä—Ö–∏–≤–∞)
        await storage.updateListingStatus(listingId, "ended");
        return res.json({ message: "Auction ended without bids" });
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å—Ç–∞–≤–∫–∞)
      const winningBid = bids.reduce((highest, current) => 
        parseFloat(current.amount) > parseFloat(highest.amount) ? current : highest
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ended_at
      await storage.updateListingStatus(listingId, "ended");
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–∏–≥—Ä—ã—à–µ
      const win = await storage.createUserWin({
        userId: winningBid.bidderId,
        listingId: listingId,
        winningBid: winningBid.amount
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
      await storage.createNotification({
        userId: winningBid.bidderId,
        type: "auction_won",
        title: "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!",
        message: `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω ${listing.make} ${listing.model} —Å–æ —Å—Ç–∞–≤–∫–æ–π ${parseFloat(winningBid.amount).toLocaleString()} –°–æ–º–æ–Ω–∏`,
        listingId: listingId,
        isRead: false
      });

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∞—É–∫—Ü–∏–æ–Ω
      await storage.updateListingStatus(listingId, "archived");

      clearCachePattern("/api/listings");
      clearCachePattern("/api/users");

      res.json({ 
        message: "Auction ended successfully and archived", 
        winner: winningBid.bidderId,
        winningAmount: winningBid.amount,
        win 
      });
    } catch (error) {
      console.error("Error ending auction:", error);
      res.status(500).json({ error: "Failed to end auction" });
    }
  });

  // –ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  app.post("/api/admin/notifications/broadcast", adminAuth, async (req, res) => {
    try {
      const { title, message, type = "system" } = req.body;
      const users = await storage.getAllUsers();
      
      const notifications = await Promise.all(
        users.map(user => 
          storage.createNotification({
            userId: user.id,
            type,
            title,
            message,
            isRead: false
          })
        )
      );
      
      res.json({ sent: notifications.length });
    } catch (error) {
      res.status(500).json({ error: "Failed to send broadcast notification" });
    }
  });

  // SMS-–æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  app.post("/api/auth/send-sms", async (req, res) => {
    try {
      const { phoneNumber } = req.body;
      
      if (!phoneNumber) {
        return res.status(400).json({ error: "Phone number is required" });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
      const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –∫—ç—à–µ —Å TTL 5 –º–∏–Ω—É—Ç
      const cacheKey = `sms_code_${phoneNumber}`;
      cache.set(cacheKey, { 
        code: verificationCode, 
        timestamp: Date.now(),
        attempts: 0
      });

      // –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
      // –ù–∞–ø—Ä–∏–º–µ—Ä: Twilio, Nexmo, –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π SMS-—à–ª—é–∑
      console.log(`SMS Code for ${phoneNumber}: ${verificationCode}`);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS (–≤ production –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π SMS API)
      const smsResult = await sendSMSCode(phoneNumber, verificationCode);
      
      if (smsResult.success) {
        res.json({ 
          success: true, 
          message: "SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
          // –í production –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ!
          ...(process.env.NODE_ENV === 'development' && { code: verificationCode })
        });
      } else {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS" });
      }
    } catch (error) {
      console.error("SMS sending error:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS" });
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS-–∫–æ–¥–∞
  app.post("/api/auth/verify-sms", async (req, res) => {
    try {
      const { phoneNumber, code } = req.body;
      
      if (!phoneNumber || !code) {
        return res.status(400).json({ error: "Phone number and code are required" });
      }

      const cacheKey = `sms_code_${phoneNumber}`;
      const cachedData = cache.get(cacheKey);
      
      if (!cachedData) {
        return res.status(400).json({ error: "–ö–æ–¥ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const { code: storedCode, timestamp, attempts } = cachedData;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥ (5 –º–∏–Ω—É—Ç)
      if (Date.now() - timestamp > 300000) {
        cache.delete(cacheKey);
        return res.status(400).json({ error: "–ö–æ–¥ –∏—Å—Ç–µ–∫" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      if (attempts >= 3) {
        cache.delete(cacheKey);
        return res.status(400).json({ error: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫" });
      }

      if (code !== storedCode) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        cache.set(cacheKey, {
          ...cachedData,
          attempts: attempts + 1
        });
        return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
      }

      // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
      cache.delete(cacheKey);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const emailFromPhone = phoneNumber.replace(/\D/g, '') + '@autoauction.tj';
      let user = await storage.getUserByEmail(emailFromPhone);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
      if (!user) {
        console.log(`Creating new inactive user for phone: ${phoneNumber}`);
        user = await storage.createUser({
          email: emailFromPhone,
          username: phoneNumber,
          fullName: null,
          isActive: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
          role: 'buyer'
        });
        console.log(`Created new user with ID: ${user.id}, isActive: ${user.isActive}`);
      }
      
      res.json({ 
        success: true, 
        message: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        phoneNumber: phoneNumber,
        user: {
          id: user.id,
          email: user.email,
          isActive: user.isActive
        }
      });
    } catch (error) {
      console.error("SMS verification error:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞" });
    }
  });

  // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
  const requireAdmin = (req: any, res: any, next: any) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    next();
  };

  // –ê–¥–º–∏–Ω—Å–∫–∏–µ API —Ä–æ—É—Ç—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ +992000000000
  app.get("/api/admin/users", requireAdmin, async (req, res) => {
    try {
      const users = await storage.getAllUsers();
      res.json(users);
    } catch (error) {
      console.error("Failed to fetch all users:", error);
      res.status(500).json({ error: "Failed to fetch users" });
    }
  });

  app.patch("/api/admin/users/:id/status", requireAdmin, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const { isActive } = req.body;
      
      if (isNaN(userId)) {
        return res.status(400).json({ error: "Invalid user ID" });
      }
      
      const user = await storage.updateUserStatus(userId, isActive);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      
      res.json(user);
    } catch (error) {
      console.error("Failed to update user status:", error);
      res.status(500).json({ error: "Failed to update user status" });
    }
  });

  app.get("/api/admin/listings", requireAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
      const listings = await storage.getListingsByStatus('', 1000);
      res.json(listings);
    } catch (error) {
      console.error("Failed to fetch all listings:", error);
      res.status(500).json({ error: "Failed to fetch listings" });
    }
  });

  app.patch("/api/admin/listings/:id/status", requireAdmin, async (req, res) => {
    try {
      const listingId = parseInt(req.params.id);
      const { status } = req.body;
      
      if (isNaN(listingId)) {
        return res.status(400).json({ error: "Invalid listing ID" });
      }
      
      if (!['pending', 'active', 'ended', 'rejected'].includes(status)) {
        return res.status(400).json({ error: "Invalid status" });
      }
      
      const listing = await storage.updateListingStatus(listingId, status);
      if (!listing) {
        return res.status(404).json({ error: "Listing not found" });
      }
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
      clearAllCaches();
      
      res.json(listing);
    } catch (error) {
      console.error("Failed to update listing status:", error);
      res.status(500).json({ error: "Failed to update listing status" });
    }
  });

  app.get("/api/admin/stats", requireAdmin, async (req, res) => {
    try {
      const stats = await storage.getAdminStats();
      res.json(stats);
    } catch (error) {
      console.error("Failed to fetch admin stats:", error);
      res.status(500).json({ error: "Failed to fetch statistics" });
    }
  });

  // –ê–¥–º–∏–Ω –≤—ã–∏–≥—Ä—ã—à–∏ - –≤—Å–µ –ø–æ–±–µ–¥—ã —Å –∏–º–µ–Ω–∞–º–∏
  app.get("/api/admin/wins", requireAdmin, async (req, res) => {
    try {
      const wins = await storage.getAllWins();
      res.json(wins);
    } catch (error) {
      console.error("Failed to fetch admin wins:", error);
      res.status(500).json({ error: "Failed to fetch wins" });
    }
  });

  // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
  app.post('/api/archive-expired', async (req, res) => {
    try {
      const archivedCount = await storage.archiveExpiredListings();
      res.json({ success: true, archivedCount });
    } catch (error) {
      console.error('Error archiving expired listings:', error);
      res.status(500).json({ message: 'Failed to archive expired listings' });
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
  app.get('/api/archived-listings', async (req, res) => {
    try {
      const archivedListings = await storage.getArchivedListings();
      res.json(archivedListings);
    } catch (error) {
      console.error('Error fetching archived listings:', error);
      res.status(500).json({ message: 'Failed to fetch archived listings' });
    }
  });

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω
  app.post('/api/restart-listing/:id', async (req, res) => {
    try {
      const { id } = req.params;
      const newListing = await storage.restartListing(parseInt(id));
      
      if (!newListing) {
        return res.status(404).json({ message: 'Listing not found or not archived' });
      }

      clearCachePattern('listings');
      res.json(newListing);
    } catch (error) {
      console.error('Error restarting listing:', error);
      res.status(500).json({ message: 'Failed to restart listing' });
    }
  });

  // –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞
  app.delete('/api/archived-listings/:id', async (req, res) => {
    try {
      const { id } = req.params;
      const deleted = await storage.deleteArchivedListing(parseInt(id));
      
      if (!deleted) {
        return res.status(404).json({ message: 'Listing not found or not archived' });
      }

      clearCachePattern('listings');
      res.json({ success: true });
    } catch (error) {
      console.error('Error deleting archived listing:', error);
      res.status(500).json({ message: 'Failed to delete archived listing' });
    }
  });

  const httpServer = createServer(app);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  wsManager = new AuctionWebSocketManager(httpServer);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(async () => {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤...');
      const processedCount = await storage.processExpiredListings();
      if (processedCount > 0) {
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤`);
        // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        clearAllCaches();
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
    }
  }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  
  console.log('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  
  return httpServer;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é)
async function sendSMSCode(phoneNumber: string, code: string): Promise<{success: boolean, message?: string}> {
  // –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
  // –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–µ:
  
  // 1. Tcell SMS API
  // 2. Beeline SMS Gateway  
  // 3. Megafon SMS API
  // 4. Twilio (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π)
  
  try {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –í production —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é:
    
    /* –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Twilio:
    const accountSid = process.env.TWILIO_ACCOUNT_SID;
    const authToken = process.env.TWILIO_AUTH_TOKEN;
    const client = require('twilio')(accountSid, authToken);
    
    const message = await client.messages.create({
      body: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è AUTOBID.TJ: ${code}`,
      from: process.env.TWILIO_PHONE_NUMBER,
      to: phoneNumber
    });
    
    return { success: true, message: message.sid };
    */
    
    /* –ü—Ä–∏–º–µ—Ä —Å –ª–æ–∫–∞–ª—å–Ω—ã–º SMS-—à–ª—é–∑–æ–º:
    const response = await fetch('http://localhost:8080/send-sms', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        phone: phoneNumber,
        text: `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è AUTOBID.TJ: ${code}`
      })
    });
    
    return response.ok ? { success: true } : { success: false };
    */
    
    // –¢–µ–∫—É—â–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log(`[SMS DEMO] –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ ${phoneNumber}: ${code}`);
    return { success: true, message: "SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–¥–µ–º–æ-—Ä–µ–∂–∏–º)" };
    
  } catch (error) {
    console.error("SMS sending failed:", error);
    return { success: false, message: error instanceof Error ? error.message : "Unknown error" };
  }

  // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  app.get('/api/bid-updates/timestamp', (req, res) => {
    res.json({ timestamp: lastBidUpdate });
  });

  const httpServer = createServer(app);
  return httpServer;
}


