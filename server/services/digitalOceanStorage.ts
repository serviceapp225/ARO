import AWS from 'aws-sdk';
import sharp from 'sharp';
import { createHash } from 'crypto';
import path from 'path';

// DigitalOcean Spaces configuration
export class DigitalOceanStorageService {
  private s3: AWS.S3;
  private bucketName: string;
  private endpoint: string;
  private cdnEndpoint: string;

  constructor() {
    this.bucketName = process.env.DO_SPACES_BUCKET || 'autobid-storage';
    this.endpoint = process.env.DO_SPACES_ENDPOINT || 'ams3.digitaloceanspaces.com';
    this.cdnEndpoint = process.env.DO_SPACES_CDN_ENDPOINT || `https://${this.bucketName}.ams3.cdn.digitaloceanspaces.com`;

    // Configure AWS SDK for DigitalOcean Spaces
    this.s3 = new AWS.S3({
      endpoint: `https://${this.endpoint}`,
      accessKeyId: process.env.DO_SPACES_ACCESS_KEY,
      secretAccessKey: process.env.DO_SPACES_SECRET_KEY,
      s3ForcePathStyle: false,
      signatureVersion: 'v4',
      region: 'ams3'
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DigitalOcean Spaces
   */
  async testConnection(): Promise<boolean> {
    try {
      await this.s3.headBucket({ Bucket: this.bucketName }).promise();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DigitalOcean Spaces —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DigitalOcean Spaces:', error);
      return false;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ Spaces
   */
  async uploadCarImage(
    buffer: Buffer,
    carId: number,
    imageType: 'main' | 'rotation1' | 'rotation2' | 'rotation3' | 'rotation4' = 'main',
    originalName?: string
  ): Promise<string> {
    try {
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const optimizedBuffer = await sharp(buffer)
        .resize(1200, 900, { 
          fit: 'inside',
          withoutEnlargement: true 
        })
        .jpeg({ 
          quality: 85,
          progressive: true
        })
        .toBuffer();

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const hash = createHash('md5').update(buffer).digest('hex');
      const extension = originalName ? path.extname(originalName) : '.jpg';
      const fileName = `cars/${carId}/${imageType}_${hash}${extension}`;

      // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Spaces
      const uploadResult = await this.s3.upload({
        Bucket: this.bucketName,
        Key: fileName,
        Body: optimizedBuffer,
        ACL: 'public-read',
        ContentType: 'image/jpeg',
        CacheControl: 'public, max-age=31536000', // 1 –≥–æ–¥ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        Metadata: {
          carId: carId.toString(),
          imageType,
          originalName: originalName || 'unknown',
          uploadDate: new Date().toISOString()
        }
      }).promise();

      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Spaces: ${fileName}`);
      return `${this.cdnEndpoint}/${fileName}`;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Spaces:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞ –≤ Spaces
   */
  async uploadBannerImage(buffer: Buffer, bannerId: number, originalName?: string): Promise<string> {
    try {
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–Ω–Ω–µ—Ä–∞
      const optimizedBuffer = await sharp(buffer)
        .resize(1920, 600, { 
          fit: 'cover',
          position: 'center'
        })
        .jpeg({ 
          quality: 90,
          progressive: true
        })
        .toBuffer();

      const hash = createHash('md5').update(buffer).digest('hex');
      const extension = originalName ? path.extname(originalName) : '.jpg';
      const fileName = `banners/${bannerId}_${hash}${extension}`;

      const uploadResult = await this.s3.upload({
        Bucket: this.bucketName,
        Key: fileName,
        Body: optimizedBuffer,
        ACL: 'public-read',
        ContentType: 'image/jpeg',
        CacheControl: 'public, max-age=86400', // 24 —á–∞—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∞–Ω–Ω–µ—Ä–æ–≤
        Metadata: {
          bannerId: bannerId.toString(),
          originalName: originalName || 'unknown',
          uploadDate: new Date().toISOString()
        }
      }).promise();

      console.log(`‚úÖ –ë–∞–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Spaces: ${fileName}`);
      return `${this.cdnEndpoint}/${fileName}`;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞ –≤ Spaces:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Spaces
   */
  async deleteFile(fileUrl: string): Promise<boolean> {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á —Ñ–∞–π–ª–∞ –∏–∑ URL
      const key = fileUrl.replace(`${this.cdnEndpoint}/`, '');
      
      await this.s3.deleteObject({
        Bucket: this.bucketName,
        Key: key
      }).promise();

      console.log(`‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ Spaces: ${key}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Spaces:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
   */
  async getCarImages(carId: number): Promise<string[]> {
    try {
      const result = await this.s3.listObjectsV2({
        Bucket: this.bucketName,
        Prefix: `cars/${carId}/`
      }).promise();

      const imageUrls = result.Contents?.map(object => 
        `${this.cdnEndpoint}/${object.Key}`
      ) || [];

      return imageUrls;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      return [];
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async generateUploadUrl(carId: number, imageType: string): Promise<string> {
    try {
      const fileName = `cars/${carId}/${imageType}_${Date.now()}.jpg`;
      
      const signedUrl = await this.s3.getSignedUrlPromise('putObject', {
        Bucket: this.bucketName,
        Key: fileName,
        ContentType: 'image/jpeg',
        Expires: 300, // 5 –º–∏–Ω—É—Ç
        ACL: 'public-read'
      });

      return signedUrl;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL:', error);
      throw error;
    }
  }

  /**
   * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Spaces
   */
  async migrateImagesFromLocal(sourceDir: string): Promise<void> {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ DigitalOcean Spaces...');
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    // –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Spaces –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ VPS
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const digitalOceanStorage = new DigitalOceanStorageService();