import AWS from 'aws-sdk';
import fs from 'fs';
import path from 'path';
import { promisify } from 'util';

const readFile = promisify(fs.readFile);

export class SpacesService {
  private s3: AWS.S3;
  private bucket: string;

  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DigitalOcean Spaces
    const spacesEndpoint = new AWS.Endpoint(process.env.SPACES_ENDPOINT || 'ams3.digitaloceanspaces.com');
    
    this.s3 = new AWS.S3({
      endpoint: spacesEndpoint,
      accessKeyId: process.env.SPACES_KEY,
      secretAccessKey: process.env.SPACES_SECRET,
      region: process.env.SPACES_REGION || 'ams3',
      s3ForcePathStyle: false, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å DigitalOcean Spaces
      signatureVersion: 'v4'
    });

    this.bucket = process.env.SPACES_BUCKET || 'autobid-storage';
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ DigitalOcean Spaces
   * @param filePath - –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
   * @param key - –ö–ª—é—á (–ø—É—Ç—å) –≤ Spaces
   * @param contentType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
   * @returns URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  async uploadFile(filePath: string, key: string, contentType?: string): Promise<string> {
    try {
      const fileContent = await readFile(filePath);
      
      const params: AWS.S3.PutObjectRequest = {
        Bucket: this.bucket,
        Key: key,
        Body: fileContent,
        ContentType: contentType || this.getMimeType(filePath),
        ACL: 'public-read' // –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      };

      const result = await this.s3.upload(params).promise();
      console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Spaces: ${result.Location}`);
      return result.Location;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Spaces:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—É—Ñ–µ—Ä –≤ DigitalOcean Spaces
   * @param buffer - –ë—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö
   * @param key - –ö–ª—é—á (–ø—É—Ç—å) –≤ Spaces
   * @param contentType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
   * @returns URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  async uploadBuffer(buffer: Buffer, key: string, contentType: string): Promise<string> {
    try {
      const params: AWS.S3.PutObjectRequest = {
        Bucket: this.bucket,
        Key: key,
        Body: buffer,
        ContentType: contentType,
        ACL: 'public-read'
      };

      const result = await this.s3.upload(params).promise();
      console.log(`‚úÖ –ë—É—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Spaces: ${result.Location}`);
      return result.Location;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—É—Ñ–µ—Ä–∞ –≤ Spaces:`, error);
      throw error;
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ DigitalOcean Spaces
   * @param key - –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ Spaces
   * @returns –ë—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞
   */
  async downloadFile(key: string): Promise<Buffer> {
    try {
      const params: AWS.S3.GetObjectRequest = {
        Bucket: this.bucket,
        Key: key
      };

      const result = await this.s3.getObject(params).promise();
      return result.Body as Buffer;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Spaces:`, error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ DigitalOcean Spaces
   * @param key - –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ Spaces
   */
  async deleteFile(key: string): Promise<void> {
    try {
      const params: AWS.S3.DeleteObjectRequest = {
        Bucket: this.bucket,
        Key: key
      };

      await this.s3.deleteObject(params).promise();
      console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Spaces: ${key}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Spaces:`, error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç presigned URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
   * @param key - –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ Spaces
   * @param expires - –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è URL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3600)
   * @returns Presigned URL
   */
  async getSignedUrl(key: string, expires: number = 3600): Promise<string> {
    try {
      const params = {
        Bucket: this.bucket,
        Key: key,
        Expires: expires
      };

      const url = await this.s3.getSignedUrlPromise('getObject', params);
      return url;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è signed URL:`, error);
      throw error;
    }
  }

  /**
   * –ú–∏–≥—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ Spaces
   * @param localDir - –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
   * @param spacesDir - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ Spaces
   */
  async migrateDirectory(localDir: string, spacesDir: string): Promise<string[]> {
    const uploadedFiles: string[] = [];

    try {
      const files = this.getAllFiles(localDir);
      
      for (const filePath of files) {
        const relativePath = path.relative(localDir, filePath);
        const spacesKey = path.join(spacesDir, relativePath).replace(/\\/g, '/'); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –¥–ª—è Unix
        
        console.log(`üì§ –ú–∏–≥—Ä–∏—Ä—É–µ–º: ${filePath} ‚Üí ${spacesKey}`);
        const url = await this.uploadFile(filePath, spacesKey);
        uploadedFiles.push(url);
      }

      console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${uploadedFiles.length} —Ñ–∞–π–ª–æ–≤`);
      return uploadedFiles;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Spaces
   */
  async healthCheck(): Promise<boolean> {
    try {
      const params = {
        Bucket: this.bucket
      };

      await this.s3.headBucket(params).promise();
      return true;
    } catch (error) {
      console.error(`‚ùå Spaces –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL —Ñ–∞–π–ª–∞ –≤ Spaces
   * @param key - –ö–ª—é—á —Ñ–∞–π–ª–∞
   * @returns –ü—É–±–ª–∏—á–Ω—ã–π URL
   */
  getPublicUrl(key: string): string {
    const endpoint = process.env.SPACES_ENDPOINT || 'ams3.digitaloceanspaces.com';
    return `https://${this.bucket}.${endpoint}/${key}`;
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  private getAllFiles(dir: string): string[] {
    const files: string[] = [];
    
    if (!fs.existsSync(dir)) {
      return files;
    }

    const items = fs.readdirSync(dir);
    
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        files.push(...this.getAllFiles(fullPath));
      } else {
        files.push(fullPath);
      }
    }
    
    return files;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
   */
  private getMimeType(filePath: string): string {
    const ext = path.extname(filePath).toLowerCase();
    const mimeTypes: { [key: string]: string } = {
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.gif': 'image/gif',
      '.webp': 'image/webp',
      '.pdf': 'application/pdf',
      '.txt': 'text/plain',
      '.json': 'application/json'
    };

    return mimeTypes[ext] || 'application/octet-stream';
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton –∏–Ω—Å—Ç–∞–Ω—Å–∞
export const spacesService = new SpacesService();