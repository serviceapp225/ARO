import { storage as devStorage } from './storage';
import { db } from './db';
import { 
  users, 
  carListings, 
  bids, 
  favorites, 
  conversations, 
  messages, 
  notifications, 
  carAlerts, 
  banners, 
  documents,
  alertViews 
} from '../shared/schema';

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export async function migrateToPostgreSQL() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
    const allUsers = await devStorage.getUsers();
    const allListings = await devStorage.getListings();
    const allBids = await devStorage.getBids();
    const allFavorites = await devStorage.getFavorites();
    const allConversations = await devStorage.getConversations();
    const allMessages = await devStorage.getMessages();
    const allNotifications = await devStorage.getNotifications();
    const allCarAlerts = await devStorage.getCarAlerts();
    const allBanners = await devStorage.getBanners();
    const allDocuments = await devStorage.getDocuments();

    console.log(`üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:
      - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${allUsers.length}
      - –û–±—ä—è–≤–ª–µ–Ω–∏—è: ${allListings.length}
      - –°—Ç–∞–≤–∫–∏: ${allBids.length}
      - –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: ${allFavorites.length}
      - –î–∏–∞–ª–æ–≥–∏: ${allConversations.length}
      - –°–æ–æ–±—â–µ–Ω–∏—è: ${allMessages.length}
      - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${allNotifications.length}
      - –ê–ª–µ—Ä—Ç—ã: ${allCarAlerts.length}
      - –ë–∞–Ω–Ω–µ—Ä—ã: ${allBanners.length}
      - –î–æ–∫—É–º–µ–Ω—Ç—ã: ${allDocuments.length}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
    await db.execute(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        phone_number TEXT,
        uid TEXT UNIQUE NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        invited_by INTEGER,
        is_invited BOOLEAN DEFAULT FALSE,
        role TEXT DEFAULT 'buyer',
        full_name TEXT,
        username TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    await db.execute(`
      CREATE TABLE IF NOT EXISTS car_listings (
        id SERIAL PRIMARY KEY,
        lot_number TEXT UNIQUE NOT NULL,
        make TEXT NOT NULL,
        model TEXT NOT NULL,
        year INTEGER NOT NULL,
        fuel_type TEXT,
        engine_size TEXT,
        transmission TEXT,
        condition TEXT,
        mileage TEXT,
        location TEXT,
        description TEXT,
        photos TEXT,
        starting_price INTEGER NOT NULL,
        current_bid INTEGER DEFAULT 0,
        buy_now_price INTEGER,
        auction_start_date TIMESTAMP,
        auction_end_date TIMESTAMP,
        status TEXT DEFAULT 'active',
        seller_id INTEGER,
        electric_range INTEGER,
        battery_capacity INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
    if (allUsers.length > 0) {
      await db.insert(users).values(allUsers);
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    if (allListings.length > 0) {
      await db.insert(carListings).values(allListings);
      console.log('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    if (allBids.length > 0) {
      await db.insert(bids).values(allBids);
      console.log('‚úÖ –°—Ç–∞–≤–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    if (allFavorites.length > 0) {
      await db.insert(favorites).values(allFavorites);
      console.log('‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ');
    }

    if (allConversations.length > 0) {
      await db.insert(conversations).values(allConversations);
      console.log('‚úÖ –î–∏–∞–ª–æ–≥–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    if (allMessages.length > 0) {
      await db.insert(messages).values(allMessages);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    if (allNotifications.length > 0) {
      await db.insert(notifications).values(allNotifications);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    if (allCarAlerts.length > 0) {
      await db.insert(carAlerts).values(allCarAlerts);
      console.log('‚úÖ –ê–ª–µ—Ä—Ç—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    if (allBanners.length > 0) {
      await db.insert(banners).values(allBanners);
      console.log('‚úÖ –ë–∞–Ω–Ω–µ—Ä—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    if (allDocuments.length > 0) {
      await db.insert(documents).values(allDocuments);
      console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
 */
export async function checkMigrationNeeded(): Promise<boolean> {
  try {
    const result = await db.select().from(users).limit(1);
    return result.length === 0; // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è
  } catch (error) {
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite');
    return false;
  }
}