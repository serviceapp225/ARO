#!/usr/bin/env node

// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ npm run build
// –û–Ω –∫–æ–ø–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫—É dist –¥–ª—è production deployment

import { copyFileSync, existsSync } from 'fs';
import { join } from 'path';

console.log('üîÑ –ó–∞–ø—É—Å–∫ build-hook –¥–ª—è Replit deployment...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!existsSync('autoauction.db')) {
  console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö autoauction.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  process.exit(1);
}

// –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫—É dist
try {
  copyFileSync('autoauction.db', 'dist/autoauction.db');
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ dist/autoauction.db');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º build-info.json
const buildInfo = {
  timestamp: new Date().toISOString(),
  mode: 'production',
  files: ['index.js', 'autoauction.db', 'public/']
};

try {
  import('fs').then(({ writeFileSync }) => {
    writeFileSync('dist/build-info.json', JSON.stringify(buildInfo, null, 2));
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω dist/build-info.json');
  });
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ build-info.json:', error.message);
}

console.log('üéâ Build-hook –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');