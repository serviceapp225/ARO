import { useQuery, useQueryClient } from '@tanstack/react-query';
import { useEffect, useRef, useCallback } from 'react';
import WebSocketManager from '@/utils/WebSocketManager';

interface RealTimeConfig {
  enableWebSocket?: boolean;
  enablePolling?: boolean;
  pollingInterval?: number;
  retryAttempts?: number;
}

export function useOptimizedRealTime(config: RealTimeConfig = {}) {
  const {
    enableWebSocket = true,
    enablePolling = false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π polling –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pollingInterval = 5000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∫ fallback
    retryAttempts = 3
  } = config;

  const queryClient = useQueryClient();
  const wsManager = WebSocketManager.getInstance();
  const lastDataUpdateRef = useRef(Date.now());
  const unsubscribeMessageRef = useRef<(() => void) | null>(null);
  const unsubscribeConnectionRef = useRef<(() => void) | null>(null);

  // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
  const smartUpdateAuctionData = useCallback(async (listingId?: string) => {
    lastDataUpdateRef.current = Date.now();
    
    try {
      if (listingId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω
        console.log(`üîÑ –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId}`);
        queryClient.invalidateQueries({ queryKey: [`/api/listings/${listingId}`] });
        queryClient.invalidateQueries({ queryKey: [`/api/listings/${listingId}/bids`] });
      } else {
        // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
        console.log('üîÑ –£–º–Ω–æ–µ —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
        const response = await fetch('/api/listings');
        const newData = await response.json();
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const currentData = queryClient.getQueryData(['/api/listings']);
        
        if (JSON.stringify(currentData) !== JSON.stringify(newData)) {
          console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º');
          queryClient.setQueryData(['/api/listings'], newData);
        } else {
          console.log('üìã –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
      }
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });
    }
  }, [queryClient]);

  // –ú—è–≥–∫–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
  const gentleForceUpdate = useCallback(async () => {
    console.log('üîÑ –ú—è–≥–∫–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    await smartUpdateAuctionData();
  }, [smartUpdateAuctionData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleWebSocketMessage = useCallback((message: any) => {
    if (message.type === 'bid_update') {
      console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:', message.listingId);
      smartUpdateAuctionData(message.listingId?.toString());
    } else if (message.type === 'auction_update') {
      console.log('üèÅ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞');
      smartUpdateAuctionData();
    } else if (message.type === 'listing_update') {
      console.log('üìù –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', message);
      console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', message.data);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –∫—ç—à —Å–ø–∏—Å–∫–∞ /api/listings –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
      if (message.data && message.data.id) {
        queryClient.setQueryData(['/api/listings'], (oldListings: any) => {
          if (Array.isArray(oldListings)) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ WebSocket –¥–ª—è ID:', message.data.id);
            return oldListings.map((listing: any) => {
              if (listing.id === message.data.id) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∞—É–∫—Ü–∏–æ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
                  oldCurrentBid: listing.currentBid,
                  newCurrentBid: message.data.currentBid,
                  oldBidCount: listing.bidCount || 0,
                  newBidCount: message.data.bidCount || 0
                });
                return {
                  ...listing,
                  currentBid: message.data.currentBid || listing.currentBid,
                  bidCount: message.data.bidCount !== undefined ? message.data.bidCount : listing.bidCount
                };
              }
              return listing;
            });
          }
          return oldListings;
        });
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫—ç—à –∞—É–∫—Ü–∏–æ–Ω–∞
        const listingId = message.data.id.toString();
        queryClient.setQueryData(['/api/listings', listingId], (oldData: any) => {
          if (oldData) {
            return {
              ...oldData,
              currentBid: message.data.currentBid || oldData.currentBid,
              bidCount: message.data.bidCount !== undefined ? message.data.bidCount : oldData.bidCount
            };
          }
          return oldData;
        });
      }
      
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ smartUpdateAuctionData');
      smartUpdateAuctionData();
    }
  }, [smartUpdateAuctionData]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const getConnectionStatus = useCallback(() => {
    return wsManager.getConnectionStatus();
  }, [wsManager]);

  // Fallback polling (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
  const { data: pollingData } = useQuery({
    queryKey: ['/api/bid-updates/timestamp'],
    enabled: enablePolling && !getConnectionStatus().isConnected,
    refetchInterval: pollingInterval,
    staleTime: 0,
    gcTime: 0,
  });

  useEffect(() => {
    if (enablePolling && pollingData && !getConnectionStatus().isConnected) {
      console.log('üîÑ Fallback polling –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      smartUpdateAuctionData();
    }
  }, [pollingData, enablePolling, smartUpdateAuctionData, getConnectionStatus]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
  useEffect(() => {
    if (enableWebSocket) {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      const userId = user.userId;

      console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ï–î–ò–ù–û–ì–û WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket
      unsubscribeMessageRef.current = wsManager.addMessageHandler(handleWebSocketMessage);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è (–∏–ª–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
      wsManager.connect(userId);

      // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      return () => {
        if (unsubscribeMessageRef.current) {
          unsubscribeMessageRef.current();
          unsubscribeMessageRef.current = null;
        }
      };
    }
  }, [enableWebSocket, handleWebSocketMessage, wsManager]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  return {
    isConnected: getConnectionStatus().isConnected,
    reconnectAttempts: getConnectionStatus().reconnectAttempts,
    forceUpdate: gentleForceUpdate,
    wsManager
  };
}