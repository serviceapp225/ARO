import { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';
import { useEffect, useRef, useCallback } from 'react';

interface RealTimeConfig {
  enableWebSocket?: boolean;
  enablePolling?: boolean;
  pollingInterval?: number;
  retryAttempts?: number;
}

export function useOptimizedRealTime(config: RealTimeConfig = {}) {
  const {
    enableWebSocket = true,
    enablePolling = false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π polling –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pollingInterval = 5000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∫ fallback
    retryAttempts = 3
  } = config;

  const queryClient = useQueryClient();
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isConnectedRef = useRef(false);
  const lastDataUpdateRef = useRef(Date.now());
  const healthCheckIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
  const smartUpdateAuctionData = useCallback(async (listingId?: string) => {
    lastDataUpdateRef.current = Date.now();
    
    try {
      if (listingId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω
        console.log(`üîÑ –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ ${listingId}`);
        queryClient.invalidateQueries({ queryKey: [`/api/listings/${listingId}`] });
        queryClient.invalidateQueries({ queryKey: [`/api/listings/${listingId}/bids`] });
      } else {
        // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
        console.log('üîÑ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
        const response = await fetch('/api/listings');
        const newData = await response.json();
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const currentData = queryClient.getQueryData(['/api/listings']);
        
        if (JSON.stringify(currentData) !== JSON.stringify(newData)) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º');
          queryClient.setQueryData(['/api/listings'], newData);
        } else {
          console.log('üìã –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
      }
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });
    }
  }, [queryClient, lastDataUpdateRef]);

  // –ú—è–≥–∫–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
  const gentleForceUpdate = useCallback(async () => {
    console.log('üîÑ –ú—è–≥–∫–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    await smartUpdateAuctionData();
  }, [smartUpdateAuctionData]);

  // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const connectWebSocket = useCallback(() => {
    if (!enableWebSocket || isConnectedRef.current) return;

    try {
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${protocol}//${window.location.host}/ws`;
      
      wsRef.current = new WebSocket(wsUrl);

      wsRef.current.onopen = () => {
        console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
        isConnectedRef.current = true;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = JSON.parse(localStorage.getItem('user') || '{}');
        if (user.userId) {
          wsRef.current?.send(JSON.stringify({
            type: 'identify_user',
            userId: user.userId
          }));
        }
      };

      wsRef.current.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          
          if (message.type === 'bid_update') {
            console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:', message);
            smartUpdateAuctionData(message.listingId?.toString());
          } else if (message.type === 'auction_update') {
            console.log('üèÅ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞:', message);
            smartUpdateAuctionData();
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };

      wsRef.current.onclose = () => {
        console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        isConnectedRef.current = false;
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        reconnectTimeoutRef.current = setTimeout(() => {
          connectWebSocket();
        }, 3000);
      };

      wsRef.current.onerror = (error) => {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
        isConnectedRef.current = false;
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
    }
  }, [enableWebSocket, smartUpdateAuctionData]);

  // Fallback polling (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
  const { data: pollingData } = useQuery({
    queryKey: ['/api/bid-updates/timestamp'],
    enabled: enablePolling && !isConnectedRef.current,
    refetchInterval: pollingInterval,
    staleTime: 0,
    gcTime: 0,
  });

  useEffect(() => {
    if (enablePolling && pollingData && !isConnectedRef.current) {
      console.log('üîÑ Fallback polling –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      smartUpdateAuctionData();
    }
  }, [pollingData, enablePolling, smartUpdateAuctionData]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    if (enableWebSocket) {
      connectWebSocket();
    }

    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      if (wsRef.current) {
        isConnectedRef.current = false;
        wsRef.current.close();
      }
    };
  }, [connectWebSocket, enableWebSocket]);



  return {
    isConnected: isConnectedRef.current,
    forceUpdate: gentleForceUpdate,
    smartUpdate: smartUpdateAuctionData
  };
}