import { useEffect, useRef, useState } from 'react';
import { useQueryClient } from '@tanstack/react-query';

// Hook –¥–ª—è Server-Sent Events –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ WebSocket
export function useServerSentEvents() {
  const [isConnected, setIsConnected] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<any>(null);
  const eventSourceRef = useRef<EventSource | null>(null);
  const queryClient = useQueryClient();

  useEffect(() => {
    const connectSSE = () => {
      // –°–æ–∑–¥–∞–µ–º SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
      const eventSource = new EventSource('/api/events/bids');
      eventSourceRef.current = eventSource;

      eventSource.onopen = () => {
        setIsConnected(true);
        console.log('üì° SSE –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      };

      eventSource.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üì® SSE –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', data);
          
          if (data.type === 'bid_update') {
            setLastUpdate(data);
            
            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            queryClient.removeQueries({ queryKey: ['/api/listings'] });
            queryClient.invalidateQueries({ queryKey: ['/api/listings'] });
            queryClient.refetchQueries({ queryKey: ['/api/listings'] });
            
            console.log('‚ö° SSE –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª –∫–∞—Ä—Ç–æ—á–∫–∏');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SSE:', error);
        }
      };

      eventSource.onerror = () => {
        setIsConnected(false);
        // console.log('‚ùå SSE –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          if (eventSourceRef.current?.readyState === EventSource.CLOSED) {
            connectSSE();
          }
        }, 2000);
      };
    };

    connectSSE();

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
        setIsConnected(false);
      }
    };
  }, [queryClient]);

  return { isConnected, lastUpdate };
}