import { useEffect, useRef, useState, useCallback } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useQueryClient } from '@tanstack/react-query';

interface WebSocketMessage {
  type: string;
  listingId?: number;
  data?: any;
  message?: string;
  timestamp?: number;
}

interface AuctionWebSocketHook {
  isConnected: boolean;
  connectionQuality: 'excellent' | 'good' | 'poor' | 'disconnected';
  joinAuction: (listingId: number) => void;
  leaveAuction: () => void;
  lastBidUpdate: any;
  participantCount: number;
  isHotAuction: boolean;
}

export function useAuctionWebSocket(): AuctionWebSocketHook {
  const [isConnected, setIsConnected] = useState(false);
  const [connectionQuality, setConnectionQuality] = useState<'excellent' | 'good' | 'poor' | 'disconnected'>('disconnected');
  const [lastBidUpdate, setLastBidUpdate] = useState<any>(null);
  const [participantCount, setParticipantCount] = useState(0);
  const [isHotAuction, setIsHotAuction] = useState(false);
  
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();
  const pingIntervalRef = useRef<NodeJS.Timeout>();
  const currentListingRef = useRef<number | null>(null);
  
  const { user } = useAuth();
  const queryClient = useQueryClient();
  
  const connect = useCallback(() => {
    if (wsRef.current?.readyState === WebSocket.OPEN) return;
    
    try {
      const wsUrl = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/ws/auction`;
      wsRef.current = new WebSocket(wsUrl);
      
      wsRef.current.onopen = () => {
        setIsConnected(true);
        setConnectionQuality('excellent');
        // console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è real-time –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        pingIntervalRef.current = setInterval(() => {
          if (wsRef.current?.readyState === WebSocket.OPEN) {
            wsRef.current.send(JSON.stringify({ type: 'ping' }));
          }
        }, 60000);
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É –µ—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
        if (currentListingRef.current) {
          joinAuction(currentListingRef.current);
        }
      };
      
      wsRef.current.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data);
          // console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
          handleWebSocketMessage(message);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };
      
      wsRef.current.onclose = () => {
        setIsConnected(false);
        setConnectionQuality('disconnected');
        // console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        reconnectTimeoutRef.current = setTimeout(() => {
          connect();
        }, 10000);
      };
      
      wsRef.current.onerror = (error) => {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
        setConnectionQuality('poor');
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      setConnectionQuality('disconnected');
    }
  }, []);
  
  const handleWebSocketMessage = (message: WebSocketMessage) => {
    switch (message.type) {
      case 'connected':
        // console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        break;
        
      case 'joined_auction':
        setParticipantCount(message.data?.participantCount || 0);
        // console.log(`üë• –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∞—É–∫—Ü–∏–æ–Ω—É ${message.listingId}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${message.data?.participantCount}`);
        break;
        
      case 'bid_update':
        // console.log('üî• –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ bid_update:', message);
        setLastBidUpdate({
          ...message,
          receivedAt: Date.now()
        });
        
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        queryClient.removeQueries({ queryKey: ['/api/listings'] });
        queryClient.invalidateQueries({ queryKey: ['/api/listings'] });
        queryClient.refetchQueries({ queryKey: ['/api/listings'] });
        
        // console.log(`üí∞ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ real-time: ${message.data?.bid?.amount} —Å–æ–º–æ–Ω–∏`);
        break;
        
      case 'hot_auction_mode':
        setIsHotAuction(message.data?.isHot || false);
        console.log(`üî• –†–µ–∂–∏–º –≥–æ—Ä—è—á–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞: ${message.data?.isHot ? '–í–ö–õ–Æ–ß–ï–ù' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
        break;
        
      case 'auction_ended':
        console.log(`üèÅ –ê—É–∫—Ü–∏–æ–Ω ${message.listingId} –∑–∞–≤–µ—Ä—à–µ–Ω`);
        setIsHotAuction(false);
        break;
        
      case 'pong':
        // –ü–∏–Ω–≥-–ø–æ–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        break;
        
      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
    }
  };
  
  const joinAuction = useCallback((listingId: number) => {
    currentListingRef.current = listingId;
    console.log(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É ${listingId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, (user as any)?.userId);
    
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      const message = {
        type: 'join_auction',
        listingId,
        userId: (user as any)?.userId
      };
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ join_auction:', message);
      wsRef.current.send(JSON.stringify(message));
    } else {
      console.log('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
      // –ï—Å–ª–∏ WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      connect();
    }
  }, [user, connect]);
  
  const leaveAuction = useCallback(() => {
    currentListingRef.current = null;
    setParticipantCount(0);
    setIsHotAuction(false);
    
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({
        type: 'leave_auction'
      }));
    }
  }, []);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    connect();
    
    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      if (pingIntervalRef.current) {
        clearInterval(pingIntervalRef.current);
      }
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, [connect]);
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (!isConnected) {
      setConnectionQuality('disconnected');
    } else {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      // –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–µ—Ä–∂–∫–∏ ping-pong
      setConnectionQuality('excellent');
    }
  }, [isConnected]);
  
  return {
    isConnected,
    connectionQuality,
    joinAuction,
    leaveAuction,
    lastBidUpdate,
    participantCount,
    isHotAuction
  };
}