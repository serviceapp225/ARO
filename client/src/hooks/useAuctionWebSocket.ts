import { useEffect, useRef, useState, useCallback } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useQueryClient } from '@tanstack/react-query';

interface WebSocketMessage {
  type: string;
  listingId?: number;
  data?: any;
  message?: string;
  timestamp?: number;
}

interface AuctionWebSocketHook {
  isConnected: boolean;
  connectionQuality: 'excellent' | 'good' | 'poor' | 'disconnected';
  joinAuction: (listingId: number) => void;
  leaveAuction: () => void;
  lastBidUpdate: any;
  participantCount: number;
  isHotAuction: boolean;
}

export function useAuctionWebSocket(): AuctionWebSocketHook {
  const [isConnected, setIsConnected] = useState(false);
  const [connectionQuality, setConnectionQuality] = useState<'excellent' | 'good' | 'poor' | 'disconnected'>('disconnected');
  const [lastBidUpdate, setLastBidUpdate] = useState<any>(null);
  const [participantCount, setParticipantCount] = useState(0);
  const [isHotAuction, setIsHotAuction] = useState(false);
  
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();
  const pingIntervalRef = useRef<NodeJS.Timeout>();
  const currentListingRef = useRef<number | null>(null);
  
  const { user } = useAuth();
  const queryClient = useQueryClient();
  
  // –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getCurrentUserId = useCallback(() => {
    if (!user?.phoneNumber) return null;
    
    const phoneToUserIdMap: Record<string, number> = {
      "+992 (90) 333-13-32": 4,   // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 992903331332 (–ê–î–ú–ò–ù)
      "+992 (11) 111-11-11": 3,
      "+992 (22) 222-22-22": 18,
      "+992 (41) 111-11-11": 15,
      "+992 (88) 888-88-88": 17,
      "+992 (88) 747-77-00": 19,  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 19
      "+992 (93) 805-88-33": 20,  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 20
      "+992 (98) 766-77-39": 22,  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 22
      "+992903331332": 4,
      "+992111111111": 3,
      "+992222222222": 18,
      "+992411111111": 15,
      "+992888888888": 17,
      "+992887477700": 19,
      "+992938058833": 20,
      "+992987667739": 22
    };
    
    return phoneToUserIdMap[user?.phoneNumber || ''] || null;
  }, [user?.phoneNumber]);
  
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const currentUserId = getCurrentUserId();
  
  const connect = useCallback(() => {
    // –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      console.log('üîå WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      setIsConnected(true);
      return;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (wsRef.current) {
      wsRef.current.close();
    }
    
    try {
      const wsUrl = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/ws`;
      console.log('üîå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', wsUrl);
      wsRef.current = new WebSocket(wsUrl);
      
      wsRef.current.onopen = () => {
        setIsConnected(true);
        setConnectionQuality('excellent');
        console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è real-time –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        if (pingIntervalRef.current) {
          clearInterval(pingIntervalRef.current);
        }
        pingIntervalRef.current = setInterval(() => {
          if (wsRef.current?.readyState === WebSocket.OPEN) {
            wsRef.current.send(JSON.stringify({ type: 'ping' }));
          }
        }, 60000);
        
        // –í–ê–ñ–ù–û: –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (currentUserId) {
          const identifyMessage = {
            type: 'identify_user',
            userId: currentUserId
          };
          console.log('üë§ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', identifyMessage);
          wsRef.current.send(JSON.stringify(identifyMessage));
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
          console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏');
        }
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É –µ—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
        if (currentListingRef.current) {
          const message = {
            type: 'join_auction',
            listingId: currentListingRef.current,
            userId: currentUserId || null
          };
          console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞—É–∫—Ü–∏–æ–Ω—É:', message);
          wsRef.current.send(JSON.stringify(message));
        }
      };
      
      wsRef.current.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data);
          console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
          handleWebSocketMessage(message);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };
      
      wsRef.current.onclose = () => {
        setIsConnected(false);
        setConnectionQuality('disconnected');
        // console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        reconnectTimeoutRef.current = setTimeout(() => {
          connect();
        }, 10000);
      };
      
      wsRef.current.onerror = (error) => {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
        setConnectionQuality('poor');
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      setConnectionQuality('disconnected');
    }
  }, [user]);
  
  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (currentUserId && wsRef.current?.readyState === WebSocket.OPEN) {
      console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:', currentUserId);
      const identifyMessage = {
        type: 'identify_user',
        userId: currentUserId
      };
      wsRef.current.send(JSON.stringify(identifyMessage));
    }
  }, [currentUserId]);
  
  const handleWebSocketMessage = (message: WebSocketMessage) => {
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ "user is not defined"
    console.log('üîç handleWebSocketMessage - user:', user);
    console.log('üîç handleWebSocketMessage - typeof user:', typeof user);
    console.log('üîç handleWebSocketMessage - currentUserId:', currentUserId);
    console.log('üîç handleWebSocketMessage - typeof currentUserId:', typeof currentUserId);
    
    switch (message.type) {
      case 'connected':
        console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        setIsConnected(true);
        setConnectionQuality('excellent');
        break;
        
      case 'user_identified':
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', message.userId);
        break;
        
      case 'joined_auction':
        setParticipantCount(message.data?.participantCount || 0);
        // console.log(`üë• –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∞—É–∫—Ü–∏–æ–Ω—É ${message.listingId}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${message.data?.participantCount}`);
        break;
        
      case 'bid_update':
        console.log('üí∞ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞', message.listingId, ', –Ω–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:', message.data?.bid?.amount, '—Å–æ–º–æ–Ω–∏');
        setLastBidUpdate({
          ...message,
          receivedAt: Date.now()
        });
        
        // –ü–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –±–µ–∑ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ (—É–±–∏—Ä–∞–µ–º –º–æ—Ä–≥–∞–Ω–∏–µ)
        if (message.listingId && message.data?.bid) {
          const newBid = message.data.bid;
          const newAmount = parseFloat(newBid.amount);
          
          // –ü–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
          queryClient.setQueryData(['/api/listings'], (oldListings: any) => {
            if (Array.isArray(oldListings)) {
              return oldListings.map((listing: any) => {
                if (listing.id === message.listingId) {
                  return {
                    ...listing,
                    currentBid: newAmount.toString(),
                    bidCount: (listing.bidCount || 0) + 1
                  };
                }
                return listing;
              });
            }
            return oldListings;
          });
          
          // –ü–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
          queryClient.setQueryData([`/api/listings/${message.listingId}`], (oldData: any) => {
            if (oldData) {
              return {
                ...oldData,
                currentBid: newAmount.toString(),
                bidCount: (oldData.bidCount || 0) + 1
              };
            }
            return oldData;
          });

          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          queryClient.invalidateQueries({ queryKey: [`/api/listings/${message.listingId}`] });
          
          // –ü–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏
          queryClient.setQueryData([`/api/listings/${message.listingId}/bids`], (oldBids: any) => {
            if (Array.isArray(oldBids)) {
              const existingBid = oldBids.find(bid => bid.id === newBid.id);
              if (!existingBid) {
                return [newBid, ...oldBids];
              }
            }
            return oldBids;
          });
        }
        break;
        
      case 'notification':
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç WebSocket
        if (message.data && currentUserId) {
          const notification = message.data;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–ª—è: userId (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π) –∏ user_id (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∏–∑ –ë–î)
          const notificationUserId = notification.userId || notification.user_id;
          console.log('üìû –ü–æ–ª—É—á–µ–Ω–æ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', notificationUserId, ', —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUserId);
          
          if (notificationUserId === currentUserId) {
            console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º:', notification);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞–ª–∏–¥–µ–Ω)
            if (currentUserId && typeof currentUserId === 'number') {
              queryClient.invalidateQueries({ queryKey: [`/api/notifications/${currentUserId}`] });
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
            if (Notification.permission === 'granted') {
              new Notification(notification.title, {
                body: notification.message,
                icon: '/favicon.ico'
              });
            }
          } else {
            console.log('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
          }
        }
        break;

      case 'bid_outbid':
        // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–±–∏—Ç—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö
        console.log('üèÜ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–±–∏—Ç–æ–π —Å—Ç–∞–≤–∫–µ:', message);
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º toast
        import('@/hooks/use-toast').then(({ toast }) => {
          toast({
            title: "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–±–∏—Ç–∞!",
            description: message.message,
            variant: "destructive",
            duration: 3000,
          });
        });
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞
        if (currentUserId && typeof currentUserId === 'number') {
          console.log('üîî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞ –ø–æ—Å–ª–µ WebSocket bid_outbid');
          
          // –£–±–∏—Ä–∞–µ–º –∫—ç—à –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
          queryClient.removeQueries({ queryKey: [`/api/notifications/${currentUserId}`] });
          queryClient.invalidateQueries({ queryKey: [`/api/notifications/${currentUserId}`] });
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
          queryClient.refetchQueries({ queryKey: [`/api/notifications/${currentUserId}`] });
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 50–º—Å –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
          setTimeout(() => {
            queryClient.refetchQueries({ queryKey: [`/api/notifications/${currentUserId}`] });
          }, 50);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        if (Notification.permission === 'granted') {
          new Notification('–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–±–∏—Ç–∞!', {
            body: message.message,
            icon: '/favicon.ico'
          });
        }
        break;
        
      case 'bid_processed':
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WebSocket
        console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏:', message);
        if (message.success) {
          console.log('üéâ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', message.message);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏:', message.message);
        }
        break;
        
      case 'new_message':
        // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', message);
        
        if (currentUserId && typeof currentUserId === 'number') {
          console.log('üîÑ REAL-TIME: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', currentUserId);
          
          // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–µ—Ä–µ–ø–∏—Å–æ–∫ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π queryKey)
          queryClient.invalidateQueries({ queryKey: ["/api/conversations", currentUserId] });
          
          // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
          if (message.data?.conversationId) {
            console.log('üîÑ REAL-TIME: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏', message.data.conversationId);
            queryClient.invalidateQueries({ 
              queryKey: ["/api/conversations", message.data.conversationId, "messages"] 
            });
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          queryClient.invalidateQueries({ queryKey: [`/api/messages/unread-count/${currentUserId}`] });
          
          // –ö–†–ò–¢–ò–ß–ù–û: –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ localStorage
          console.log('üîÑ REAL-TIME: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
          localStorage.setItem('force-refresh-messages', Date.now().toString());
          
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º toast –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          import('@/hooks/use-toast').then(({ toast }) => {
            toast({
              title: "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
              description: `–û—Ç ${message.data?.senderName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}`,
              duration: 3000,
            });
          });
        }
        break;
        
      case 'new_message_notification':
        // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', message);
        
        if (currentUserId && typeof currentUserId === 'number') {
          console.log('üîÑ REAL-TIME: –ú–ì–ù–û–í–ï–ù–ù–û –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', currentUserId);
          
          // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          queryClient.refetchQueries({ queryKey: ["/api/conversations", currentUserId] });
          
          // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
          if (message.messageData?.conversationId) {
            console.log('üîÑ REAL-TIME: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏', message.messageData.conversationId);
            queryClient.refetchQueries({ 
              queryKey: [`/api/conversations/${message.messageData.conversationId}/messages`] 
            });
          }
          
          // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          queryClient.refetchQueries({ queryKey: [`/api/messages/unread-count/${currentUserId}`] });
          
          // –ö–†–ò–¢–ò–ß–ù–û: –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ localStorage
          console.log('üîÑ REAL-TIME: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
          localStorage.setItem('force-refresh-messages', Date.now().toString());
          
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º toast –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          import('@/hooks/use-toast').then(({ toast }) => {
            toast({
              title: "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
              description: `–û—Ç ${message.messageData?.senderName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}`,
              duration: 3000,
            });
          });
        }
        break;
        
      case 'hot_auction_mode':
        setIsHotAuction(message.data?.isHot || false);
        console.log(`üî• –†–µ–∂–∏–º –≥–æ—Ä—è—á–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞: ${message.data?.isHot ? '–í–ö–õ–Æ–ß–ï–ù' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
        break;
        
      case 'auction_ended':
        console.log(`üèÅ –ê—É–∫—Ü–∏–æ–Ω ${message.listingId} –∑–∞–≤–µ—Ä—à–µ–Ω`);
        setIsHotAuction(false);
        break;
        
      case 'pong':
        // –ü–∏–Ω–≥-–ø–æ–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        break;
        
      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
    }
  };
  
  const joinAuction = useCallback((listingId: number) => {
    currentListingRef.current = listingId;
    console.log(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É ${listingId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, currentUserId || '–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket:', wsRef.current?.readyState, 'isConnected:', isConnected);
    
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      const message = {
        type: 'join_auction',
        listingId,
        userId: currentUserId || null
      };
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ join_auction:', message);
      wsRef.current.send(JSON.stringify(message));
    } else {
      console.log('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –±—É–¥–µ–º –∂–¥–∞—Ç—å...');
      // –ï—Å–ª–∏ WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      connect();
      
      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      const retryInterval = setInterval(() => {
        if (wsRef.current?.readyState === WebSocket.OPEN) {
          clearInterval(retryInterval);
          const message = {
            type: 'join_auction',
            listingId,
            userId: currentUserId || null
          };
          console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ join_auction –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', message);
          wsRef.current.send(JSON.stringify(message));
        }
      }, 100);
      
      // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => clearInterval(retryInterval), 5000);
    }
  }, [user, connect, isConnected]);
  
  const leaveAuction = useCallback(() => {
    currentListingRef.current = null;
    setParticipantCount(0);
    setIsHotAuction(false);
    
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({
        type: 'leave_auction'
      }));
    }
  }, []);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    connect();
    
    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      if (pingIntervalRef.current) {
        clearInterval(pingIntervalRef.current);
      }
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, [connect]);
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (!isConnected) {
      setConnectionQuality('disconnected');
    } else {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      // –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–µ—Ä–∂–∫–∏ ping-pong
      setConnectionQuality('excellent');
    }
  }, [isConnected]);
  
  return {
    isConnected,
    connectionQuality,
    joinAuction,
    leaveAuction,
    lastBidUpdate,
    participantCount,
    isHotAuction
  };
}