import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { MessageCircle, Send, ArrowLeft, User } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface ConversationData {
  id: number;
  listingId: number;
  listing: {
    id: number;
    make: string;
    model: string;
    year: number;
    lotNumber: string;
    photos: string[];
  };
  otherUser: {
    id: number;
    fullName: string;
    email: string;
  };
  lastMessage?: {
    id: number;
    content: string;
    createdAt: string;
    senderId: number;
  };
  unreadCount: number;
}

interface Message {
  id: number;
  content: string;
  createdAt: string;
  senderId: number;
  sender: {
    id: number;
    fullName: string;
    email: string;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  });
}

export default function Messages() {
  const { user } = useAuth();
  const [selectedConversation, setSelectedConversation] = useState<number | null>(null);
  const [messageText, setMessageText] = useState("");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (user?.userId) {
      console.log(`üìñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π - –æ—Ç–º–µ—á–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ`);
      
      // –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      apiRequest('POST', '/api/demo/mark-messages-visited', { userId: user.userId })
        .then(() => {
          console.log(`‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–º–µ—á–µ–Ω–æ`);
          
          // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          // 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
          queryClient.removeQueries({ queryKey: [`/api/messages/unread-count/${user.userId}`] });
          
          // 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          queryClient.refetchQueries({ queryKey: [`/api/messages/unread-count/${user.userId}`] });
          
          // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫—ç—à
          queryClient.setQueryData([`/api/messages/unread-count/${user.userId}`], { count: 0 });
          
          console.log(`üîÑ –°—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 0`);
        })
        .catch(error => {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è:`, error);
        });
    }
  }, [user?.userId, queryClient]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const urlParams = new URLSearchParams(window.location.search);
  const buyerId = urlParams.get('buyerId');
  const sellerId = urlParams.get('sellerId');
  const listingId = urlParams.get('listingId');

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  const createConversationMutation = useMutation({
    mutationFn: async (data: { buyerId: number; sellerId: number; listingId: number }) => {
      const res = await apiRequest('POST', '/api/conversations', data);
      return res.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["/api/conversations", user?.userId] });
      setSelectedConversation(data.id);
      // –û—á–∏—â–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      window.history.replaceState({}, '', window.location.pathname);
      toast({
        title: "–†–∞–∑–≥–æ–≤–æ—Ä —Å–æ–∑–¥–∞–Ω",
        description: "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º",
      });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä",
        variant: "destructive",
      });
    },
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫
  const { data: conversations, isLoading: conversationsLoading } = useQuery<ConversationData[]>({
    queryKey: ["/api/conversations", user?.userId],
    queryFn: async () => {
      const res = await apiRequest('GET', `/api/conversations?userId=${user?.userId}`);
      return res.json();
    },
    enabled: !!user?.userId,
  });

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (buyerId && sellerId && listingId && user && !createConversationMutation.isPending) {
      createConversationMutation.mutate({
        buyerId: parseInt(buyerId),
        sellerId: parseInt(sellerId),
        listingId: parseInt(listingId),
      });
    }
  }, [buyerId, sellerId, listingId, user]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
  const { data: messages, isLoading: messagesLoading, refetch: refetchMessages } = useQuery<Message[]>({
    queryKey: ["/api/conversations", selectedConversation, "messages"],
    queryFn: async () => {
      console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ ${selectedConversation}`);
      const res = await apiRequest('GET', `/api/conversations/${selectedConversation}/messages`);
      const result = await res.json();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è:`, result);
      return result;
    },
    enabled: !!selectedConversation,
    staleTime: 0, // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    gcTime: 0, // –ù–µ –∫—ç—à–∏—Ä—É–µ–º
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–º–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
  useEffect(() => {
    if (selectedConversation && messages && messages.length > 0 && user?.userId) {
      console.log(`üìñ –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ ${selectedConversation}`);
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const unreadMessages = messages.filter(msg => msg.senderId !== user.userId);
      
      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
      unreadMessages.forEach(async (message) => {
        try {
          await apiRequest('PATCH', `/api/conversations/${selectedConversation}/messages/${message.id}/read`);
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${message.id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:`, error);
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –∏ —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ 500–º—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
      setTimeout(() => {
        queryClient.invalidateQueries({ queryKey: ["/api/conversations", user.userId] });
        queryClient.invalidateQueries({ queryKey: [`/api/messages/unread-count/${user.userId}`] });
      }, 500);
    }
  }, [selectedConversation, messages, user?.userId, queryClient]);

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessageMutation = useMutation({
    mutationFn: async (data: { conversationId: number; content: string }) => {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: conversationId=${data.conversationId}, content="${data.content}", senderId=${user?.userId}`);
      const res = await apiRequest('POST', `/api/conversations/${data.conversationId}/messages`, { 
        content: data.content,
        senderId: user?.userId 
      });
      const result = await res.json();
      console.log(`‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, result);
      return result;
    },
    onSuccess: () => {
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è`);
      queryClient.invalidateQueries({ queryKey: ["/api/conversations", selectedConversation, "messages"] });
      queryClient.invalidateQueries({ queryKey: ["/api/conversations", user?.userId] });
      refetchMessages(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      setMessageText("");
    },
    onError: (error: any) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        variant: "destructive",
      });
    },
  });

  const handleSendMessage = async () => {
    if (!messageText.trim() || !selectedConversation || sendMessageMutation.isPending) return;

    sendMessageMutation.mutate({
      conversationId: selectedConversation,
      content: messageText,
    });
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 1) {
      return "–°–µ–≥–æ–¥–Ω—è";
    } else if (diffDays === 2) {
      return "–í—á–µ—Ä–∞";
    } else {
      return date.toLocaleDateString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });
    }
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (conversationsLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px] pb-24">
        <div className="text-center">
          <MessageCircle className="w-12 h-12 mx-auto mb-4 text-gray-400 animate-pulse" />
          <p className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫...</p>
        </div>
      </div>
    );
  }

  // –ù–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–æ–∫
  if (!conversations || conversations.length === 0) {
    return (
      <div className="flex items-center justify-center min-h-[400px] pb-24">
        <div className="text-center">
          <MessageCircle className="w-16 h-16 mx-auto mb-4 text-gray-400" />
          <h2 className="text-xl font-semibold text-gray-800 mb-2">
            –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
          </h2>
          <p className="text-gray-500 mb-4">
            –ö–æ–≥–¥–∞ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏, –≤–∞—à–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å
          </p>
          <Button
            onClick={() => window.history.back()}
            variant="outline"
            className="gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <MessageCircle className="w-6 h-6 text-blue-600" />
            –°–æ–æ–±—â–µ–Ω–∏—è - –ù–æ–≤—ã–π –¥–∏–∑–∞–π–Ω
          </h1>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-6xl mx-auto p-4 pb-24">
        <div className="bg-white rounded-lg shadow-sm overflow-hidden" style={{ height: 'calc(100vh - 200px)' }}>
          <div className="flex h-full">
            {/* –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ */}
            <div className="w-1/3 border-r border-gray-200 flex flex-col">
              <div className="p-4 border-b border-gray-200 bg-gray-50">
                <h2 className="text-lg font-semibold text-gray-800">–ü–µ—Ä–µ–ø–∏—Å–∫–∏</h2>
              </div>
              
              <div className="flex-1 overflow-y-auto">
                {conversations.map((conversation) => (
                  <div
                    key={conversation.id}
                    className={`p-4 cursor-pointer transition-all hover:bg-gray-50 border-b border-gray-100 ${
                      selectedConversation === conversation.id
                        ? "bg-blue-50 border-l-4 border-l-blue-500"
                        : ""
                    }`}
                    onClick={() => setSelectedConversation(conversation.id)}
                  >
                    <div className="flex items-start gap-3">
                      <Avatar className="w-12 h-12 flex-shrink-0">
                        <AvatarFallback className="bg-blue-100 text-blue-600">
                          <User className="w-6 h-6" />
                        </AvatarFallback>
                      </Avatar>
                      
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between mb-1">
                          <h3 className="font-medium text-gray-900 truncate">
                            {conversation.otherUser.fullName}
                          </h3>
                          {conversation.unreadCount > 0 && (
                            <Badge variant="destructive" className="text-xs">
                              {conversation.unreadCount}
                            </Badge>
                          )}
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-2">
                          {conversation.listing.make} {conversation.listing.model} {conversation.listing.year}
                        </p>
                        
                        {conversation.lastMessage && (
                          <p className="text-sm text-gray-500 truncate">
                            {conversation.lastMessage.content}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
            <div className="flex-1 flex flex-col">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ */}
              <div className="p-4 border-b border-gray-200 bg-gray-50 flex-shrink-0">
                {selectedConversation && conversations.find(c => c.id === selectedConversation) ? (
                  <div className="flex items-center gap-3">
                    <Avatar className="w-10 h-10">
                      <AvatarFallback className="bg-blue-100 text-blue-600">
                        <User className="w-5 h-5" />
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <h2 className="font-semibold text-gray-900">
                        {conversations.find(c => c.id === selectedConversation)?.otherUser.fullName}
                      </h2>
                      <p className="text-sm text-gray-600">
                        {conversations.find(c => c.id === selectedConversation)?.listing.make}{" "}
                        {conversations.find(c => c.id === selectedConversation)?.listing.model}{" "}
                        {conversations.find(c => c.id === selectedConversation)?.listing.year}
                      </p>
                    </div>
                  </div>
                ) : (
                  <div className="flex items-center justify-center py-2">
                    <p className="text-gray-500">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</p>
                  </div>
                )}
              </div>

              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-white">
                {!selectedConversation ? (
                  <div className="flex items-center justify-center h-full">
                    <div className="text-center">
                      <MessageCircle className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                      <h2 className="text-xl font-semibold text-gray-800 mb-2">
                        –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É
                      </h2>
                      <p className="text-gray-500">
                        –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
                      </p>
                    </div>
                  </div>
                ) : messagesLoading ? (
                  <div className="flex items-center justify-center py-8">
                    <p className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</p>
                  </div>
                ) : messages && messages.length > 0 ? (
                  messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${
                        message.senderId === user?.userId ? "justify-end" : "justify-start"
                      }`}
                    >
                      <div
                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl shadow-sm ${
                          message.senderId === user?.userId
                            ? "bg-blue-500 text-white"
                            : "bg-gray-100 text-gray-900"
                        }`}
                      >
                        <p className="text-sm">{message.content}</p>
                        <p
                          className={`text-xs mt-1 ${
                            message.senderId === user?.userId
                              ? "text-blue-100"
                              : "text-gray-500"
                          }`}
                        >
                          {formatDate(message.createdAt)}
                        </p>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="flex items-center justify-center py-8">
                    <p className="text-gray-500">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                  </div>
                )}
              </div>

              {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
              <div className="p-4 border-t border-gray-200 bg-gray-50 flex-shrink-0">
                <div className="flex gap-2">
                  <Input
                    value={messageText}
                    onChange={(e) => setMessageText(e.target.value)}
                    placeholder={
                      conversationsLoading 
                        ? "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫..." 
                        : selectedConversation 
                          ? "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
                          : "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É"
                    }
                    onKeyPress={(e) => e.key === "Enter" && selectedConversation && handleSendMessage()}
                    className="flex-1"
                    disabled={sendMessageMutation.isPending || !selectedConversation || conversationsLoading}
                  />
                  <Button
                    onClick={handleSendMessage}
                    disabled={!messageText.trim() || sendMessageMutation.isPending || !selectedConversation || conversationsLoading}
                    className="gap-2"
                  >
                    <Send className="w-4 h-4" />
                    {sendMessageMutation.isPending ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}