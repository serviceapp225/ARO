import { useState } from "react";
import { Upload, X, Plus, CheckCircle, ArrowLeft, HelpCircle, Users } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { CAR_MAKES_MODELS, getModelsForMake } from "../../../shared/car-data";
import { useToast } from "@/hooks/use-toast";
import { useLocation } from "wouter";
import { queryClient } from "@/lib/queryClient";
import { useAuth } from "@/contexts/AuthContext";
import { useQuery } from "@tanstack/react-query";


const TAJIKISTAN_CITIES = [
  "–î—É—à–∞–Ω–±–µ",
  "–•—É–¥–∂–∞–Ω–¥", 
  "–ö—É–ª—è–±",
  "–ö—É—Ä–≥–∞–Ω-–¢—é–±–µ",
  "–ò—Å—Ç–∞—Ä–∞–≤—à–∞–Ω",
  "–ö–∞–Ω–∏–±–∞–¥–∞–º",
  "–¢—É—Ä—Å—É–Ω–∑–∞–¥–µ",
  "–ò—Å—Ñ–∞—Ä–∞",
  "–ü–µ–Ω–¥–∂–∏–∫–µ–Ω—Ç",
  "–ö–∞–π—Ä–∞–∫–∫—É–º",
  "–í–∞—Ö–¥–∞—Ç",
  "–Ø–≤–∞–Ω",
  "–ù—É—Ä–µ–∫",
  "–†–æ–≥—É–Ω",
  "–î–∞–Ω–≥–∏—Ä–∞",
  "–®–∞—Ö—Ä–∏–Ω–∞–≤",
  "–†—É–¥–∞–∫–∏",
  "–•–∏—Å–æ—Ä",
  "–í–∞—Ö—à",
  "–ü—è–Ω–¥–∂",
  "–ú—É—Ä–≥–∞–±",
  "–ò—à–∫–∞—à–∏–º",
  "–•–æ—Ä–æ–≥"
];

export default function SellCar() {
  const { user } = useAuth();
  const [uploadedImages, setUploadedImages] = useState<string[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [countdown, setCountdown] = useState(3);
  const [showReservePriceInfo, setShowReservePriceInfo] = useState(false);
  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);
  const [showUserSelector, setShowUserSelector] = useState(false);

  // Fetch users for admin selection
  const { data: allUsers = [] } = useQuery({
    queryKey: ['/api/admin/users'],
    enabled: user?.role === 'admin' || user?.fullName === 'ADMIN',
  });

  const [formData, setFormData] = useState({
    make: "",
    model: "",
    year: "",
    mileage: "",
    price: "",
    reservePrice: "",
    description: "",
    auctionDuration: "7", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π
    bodyType: "",
    fuelType: "",
    transmission: "",
    engineVolume: "",
    driveType: "",
    color: "",
    condition: "",
    vin: "",
    location: "",
    customsCleared: "",
    recycled: "",
    technicalInspectionValid: "",
    technicalInspectionDate: "",
    tinted: "",
    tintingDate: "",
    // Electric car fields
    batteryCapacity: "",
    electricRange: "",
    // Custom make/model field
    customMakeModel: ""
  });
  
  const [availableModels, setAvailableModels] = useState<string[]>([]);
  const { toast } = useToast();
  const [, setLocation] = useLocation();

  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const remainingSlots = 20 - uploadedImages.length;
      const filesToProcess = Array.from(files).slice(0, remainingSlots);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      toast({
        title: "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        description: `–°–∂–∏–º–∞–µ–º ${filesToProcess.length} —Ñ–æ—Ç–æ...`,
        duration: 2000,
      });
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      const newImages = await Promise.all(
        filesToProcess.map(async (file) => {
          const originalSizeKB = Math.round(file.size / 1024);
          console.log(`üì∏ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ: ${file.name}, —Ä–∞–∑–º–µ—Ä: ${originalSizeKB}KB`);
          
          // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ - —Å—Ä–∞–∑—É –¥–æ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
          return await compressImage(file, 0.65, 800); // –£–º–µ–Ω—å—à–∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–º–µ—Ä
        })
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∂–∞—Ç—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
      setUploadedImages(prev => [...prev, ...newImages]);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const totalSize = newImages.reduce((sum, img) => sum + Math.round((img.length * 3) / 4 / 1024), 0);
      toast({
        title: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ç–æ–≤—ã",
        description: `${newImages.length} —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (${totalSize}KB)`,
        duration: 1500,
      });
    }
  };

  const compressImage = (file: File, quality: number, maxWidth: number): Promise<string> => {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d')!;
      const img = new Image();
      
      img.onload = () => {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        let { width, height } = img;
        
        // –£–º–µ–Ω—å—à–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        if (width > maxWidth || height > maxWidth) {
          const ratio = Math.min(maxWidth / width, maxWidth / height);
          width = Math.round(width * ratio);
          height = Math.round(height * ratio);
        }
        
        canvas.width = width;
        canvas.height = height;
        
        // –ë—ã—Å—Ç—Ä–æ–µ —Å–∂–∞—Ç–∏–µ –±–µ–∑ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        ctx.imageSmoothingEnabled = false;
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ctx.drawImage(img, 0, 0, width, height);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        const compressedDataUrl = canvas.toDataURL('image/jpeg', quality);
        resolve(compressedDataUrl);
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        URL.revokeObjectURL(img.src);
      };
      
      img.src = URL.createObjectURL(file);
    });
  };

  const removeImage = (index: number) => {
    setUploadedImages(prev => prev.filter((_, i) => i !== index));
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // When make changes, update available models and reset model selection
    if (field === "make") {
      const models = getModelsForMake(value);
      setAvailableModels(models);
      setFormData(prev => ({ ...prev, model: "" }));
    }
  };

  const handleDateInputChange = (field: string, value: string) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const numbersOnly = value.replace(/[^\d]/g, '');
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 —Ü–∏—Ñ—Ä (–î–î–ú–ú–ì–ì–ì–ì)
    const limitedNumbers = numbersOnly.slice(0, 8);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏
    let formattedValue = limitedNumbers;
    if (limitedNumbers.length >= 3) {
      formattedValue = limitedNumbers.slice(0, 2) + '.' + limitedNumbers.slice(2);
    }
    if (limitedNumbers.length >= 5) {
      formattedValue = limitedNumbers.slice(0, 2) + '.' + limitedNumbers.slice(2, 4) + '.' + limitedNumbers.slice(4);
    }
    
    setFormData(prev => ({ ...prev, [field]: formattedValue }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    // Validate required fields –≤ —Ç–æ—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ HTML —Ñ–æ—Ä–º–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    const requiredFields = [
      { field: formData.make, name: "–ú–∞—Ä–∫–∞" },
      { field: formData.model, name: "–ú–æ–¥–µ–ª—å" },
      // –î–ª—è "–î—Ä—É–≥–∏–µ –º–∞—Ä–∫–∏" –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ
      ...(formData.make === "–î—Ä—É–≥–∏–µ –º–∞—Ä–∫–∏" ? [{ field: formData.customMakeModel, name: "–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å" }] : []),
      { field: formData.year, name: "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞" },
      { field: formData.mileage, name: "–ü—Ä–æ–±–µ–≥" },
      { field: formData.bodyType, name: "–¢–∏–ø –∫—É–∑–æ–≤–∞" },
      { field: formData.fuelType, name: "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞" },
      { field: formData.transmission, name: "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á" },
      { field: formData.engineVolume, name: "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è" },
      { field: formData.driveType, name: "–ü—Ä–∏–≤–æ–¥" },
      { field: formData.color, name: "–¶–≤–µ—Ç" },
      { field: formData.condition, name: "–°–æ—Å—Ç–æ—è–Ω–∏–µ" },
      { field: formData.location, name: "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" },
      { field: formData.customsCleared, name: "–†–∞—Å—Ç–∞–º–æ–∂–∫–∞" },
      { field: formData.recycled, name: "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä" },
      { field: formData.technicalInspectionValid, name: "–¢–µ—Ö–æ—Å–º–æ—Ç—Ä" },
      { field: formData.tinted, name: "–¢–æ–Ω–∏—Ä–æ–≤–∫–∞" },
      { field: formData.price, name: "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞" },
      { field: formData.description, name: "–û–ø–∏—Å–∞–Ω–∏–µ" },
      { field: formData.auctionDuration, name: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞" }
    ];

    // –£—Å–ª–æ–≤–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è - —Ç—Ä–µ–±—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–¥–∞"
    if (formData.technicalInspectionValid === 'yes' && !formData.technicalInspectionDate) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞—Ç—É —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞",
        variant: "destructive",
        duration: 2000,
      });
      return;
    }

    if (formData.tinted === 'yes' && !formData.tintingDate) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞—Ç—É —Ç–æ–Ω–∏—Ä–æ–≤–∫–∏",
        variant: "destructive",
        duration: 2000,
      });
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π
    if (formData.fuelType === 'electric') {
      if (!formData.batteryCapacity) {
        toast({
          title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏",
          description: "–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–∏–µ –µ–º–∫–æ—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–∏ –≤ –∫–í—Ç¬∑—á",
          variant: "destructive",
          duration: 3000,
        });
        return;
      }
      
      if (!formData.electricRange) {
        toast({
          title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø–∞—Å —Ö–æ–¥–∞",
          description: "–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–∏–µ –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞ –≤ –∫–º",
          variant: "destructive",
          duration: 3000,
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const batteryCapacity = parseFloat(formData.batteryCapacity);
      const electricRange = parseInt(formData.electricRange);
      
      if (batteryCapacity < 10 || batteryCapacity > 200) {
        toast({
          title: "–ù–µ–≤–µ—Ä–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏",
          description: "–ï–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 200 –∫–í—Ç¬∑—á",
          variant: "destructive",
          duration: 3000,
        });
        return;
      }
      
      if (electricRange < 50 || electricRange > 800) {
        toast({
          title: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø–∞—Å —Ö–æ–¥–∞",
          description: "–ó–∞–ø–∞—Å —Ö–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 800 –∫–º",
          variant: "destructive",
          duration: 3000,
        });
        return;
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    const fieldMapping: Record<string, string> = {
      "–ú–∞—Ä–∫–∞": "make",
      "–ú–æ–¥–µ–ª—å": "model", 
      "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞": "year",
      "–ü—Ä–æ–±–µ–≥": "mileage",
      "–¢–∏–ø –∫—É–∑–æ–≤–∞": "bodyType",
      "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞": "fuelType",
      "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á": "transmission",
      "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è": "engineVolume",
      "–ü—Ä–∏–≤–æ–¥": "driveType",
      "–¶–≤–µ—Ç": "color",
      "–°–æ—Å—Ç–æ—è–Ω–∏–µ": "condition",
      "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ": "location",
      "–†–∞—Å—Ç–∞–º–æ–∂–∫–∞": "customsCleared",
      "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä": "recycled",
      "–¢–µ—Ö–æ—Å–º–æ—Ç—Ä": "technicalInspectionValid",
      "–¢–æ–Ω–∏—Ä–æ–≤–∫–∞": "tinted",
      "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞": "price",
      "–û–ø–∏—Å–∞–Ω–∏–µ": "description",
      "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞": "auctionDuration"
    };

    let firstEmptyField = null;
    let fieldId = null;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–æ–ª—è–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –ø—É—Å—Ç–æ–µ
    for (const { field, name } of requiredFields) {
      let isEmpty = false;
      
      // –î–ª—è –ø–æ–ª–µ–π —Å –¥–∞/–Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞–º–∏, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
      if (name === "–¢–µ—Ö–æ—Å–º–æ—Ç—Ä" || name === "–¢–æ–Ω–∏—Ä–æ–≤–∫–∞" || 
          name === "–†–∞—Å—Ç–∞–º–æ–∂–∫–∞" || name === "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä") {
        isEmpty = !field;
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        isEmpty = !field || field.trim() === "";
      }
      
      if (isEmpty) {
        firstEmptyField = { field, name };
        fieldId = fieldMapping[name];
        break;
      }
    }
    
    if (firstEmptyField) {
      // –°–∫—Ä–æ–ª–ª–∏–º –∫ –ø–æ–ª—é
      setTimeout(() => {
        if (fieldId) {
          const element = document.getElementById(fieldId);
          if (element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });
            if (element.focus) {
              element.focus();
            } else if (element.click) {
              element.click();
            }
          } else {
            const altElement = document.querySelector(`[data-field="${fieldId}"]`) || 
                              document.querySelector(`label[for="${fieldId}"]`) ||
                              document.querySelector(`[name="${fieldId}"]`);
            if (altElement) {
              altElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
          }
        }
      }, 100);
      
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        description: `–ü–µ—Ä–≤–æ–µ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ: ${firstEmptyField.name}`,
        variant: "destructive",
        duration: 3000,
      });
      return;
    }

    if (uploadedImages.length < 5) {
      toast({
        title: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        variant: "destructive",
        duration: 2000,
      });
      return;
    }

    setIsSubmitting(true);
    console.log("Submitting car listing:", formData, uploadedImages);

    // Show success modal immediately for better UX
    setShowSuccessModal(true);
    setCountdown(3);
    
    // Start countdown timer
    let countdownInterval: NodeJS.Timeout;
    countdownInterval = setInterval(() => {
      setCountdown(prev => {
        if (prev <= 1) {
          clearInterval(countdownInterval);
          setShowSuccessModal(false);
          setLocation('/'); // Navigate to homepage
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    try {
      console.log('Current user for listing:', user);
      console.log('User ID:', (user as any)?.userId);
      console.log('Selected User ID:', selectedUserId);
      console.log('Final sellerId:', selectedUserId || (user as any)?.userId || (user as any)?.id || 2);
      
      // Create listing data matching database schema
      const listingData = {
        sellerId: selectedUserId || (user as any)?.userId || (user as any)?.id || 2, // Use selected user ID if admin, otherwise current user ID
        // lotNumber will be generated by the server using the standard generator
        make: formData.make,
        model: formData.model,
        customMakeModel: formData.make === "–î—Ä—É–≥–∏–µ –º–∞—Ä–∫–∏" ? formData.customMakeModel : null,
        year: parseInt(formData.year),
        mileage: parseInt(formData.mileage) || 0,
        description: formData.description,
        startingPrice: formData.price,
        reservePrice: formData.reservePrice || null,
        photos: uploadedImages, // Array of photo URLs
        auctionDuration: parseInt(formData.auctionDuration), // Keep as days
        customsCleared: formData.customsCleared === 'yes',
        recycled: formData.recycled === 'yes',
        technicalInspectionValid: formData.technicalInspectionValid === 'yes',
        technicalInspectionDate: formData.technicalInspectionDate || null,
        tinted: formData.tinted === 'yes',
        tintingDate: formData.tintingDate || null,
        engine: formData.engineVolume ? `${formData.engineVolume}L` : null,
        transmission: formData.transmission || null,
        fuelType: formData.fuelType || null,
        bodyType: formData.bodyType || null,
        driveType: formData.driveType || null,
        color: formData.color || null,
        condition: formData.condition || null,
        vin: formData.vin || null,
        location: formData.location || null,
        // Electric car fields
        batteryCapacity: formData.fuelType === 'electric' && formData.batteryCapacity ? parseFloat(formData.batteryCapacity) : null,
        electricRange: formData.fuelType === 'electric' && formData.electricRange ? parseInt(formData.electricRange) : null,
      };

      // Add timeout to prevent hanging
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

      console.log('üö® About to send listing data:', JSON.stringify({...listingData, photos: `[${listingData.photos.length} photos]`}, null, 2));

      // Create FormData to handle file uploads instead of huge JSON
      const multipartData = new FormData();
      
      // Add all non-photo fields
      Object.entries(listingData).forEach(([key, value]) => {
        if (key !== 'photos' && value !== null && value !== undefined) {
          multipartData.append(key, String(value));
        }
      });
      
      // Add photos as individual files
      console.log('üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', uploadedImages.length);
      for (let i = 0; i < uploadedImages.length; i++) {
        try {
          console.log(`üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ ${i}...`);
          const base64Data = uploadedImages[i];
          const blob = await fetch(base64Data).then(r => r.blob());
          multipartData.append(`photo_${i}`, blob, `photo_${i}.jpg`);
          console.log(`‚úÖ –§–æ—Ç–æ ${i} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ FormData`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ ${i}:`, error);
          throw error;
        }
      }

      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData –∑–∞–ø—Ä–æ—Å...');
      
      const response = await fetch('/api/listings', {
        method: 'POST',
        body: multipartData, // Send as FormData instead of JSON
        signal: controller.signal,
      });
      
      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', response.headers);

      clearTimeout(timeoutId);

      // Accept both 200 (OK) and 201 (Created) as success
      if (response.status !== 200 && response.status !== 201) {
        const errorText = await response.text().catch(() => 'Unknown error');
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, errorText);
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

      const newListing = await response.json();

      // Reset form (non-blocking)
      setTimeout(() => {
        setFormData({
          make: "",
          model: "",
          year: "",
          mileage: "",
          price: "",
          reservePrice: "",
          description: "",
          auctionDuration: "7",
          bodyType: "",
          fuelType: "",
          transmission: "",
          engineVolume: "",
          driveType: "",
          color: "",
          condition: "",
          vin: "",
          location: "",
          customsCleared: "",
          recycled: "",
          technicalInspectionValid: "",
          technicalInspectionDate: "",
          tinted: "",
          tintingDate: "",
          batteryCapacity: "",
          electricRange: "",
          customMakeModel: ""
        });
        setUploadedImages([]);
      }, 100);

      // Optimistic update - add new listing to cache without full reload
      queryClient.setQueryData(['/api/listings'], (oldData: any) => {
        if (Array.isArray(oldData)) {
          return [newListing, ...oldData];
        }
        return [newListing];
      });
      
      // Mark cache as fresh to prevent immediate reload on page navigation
      queryClient.setQueryData(['/api/listings'], (data: any) => data, {
        updatedAt: Date.now()
      });

    } catch (error) {
      console.error('Error creating listing:', error);
      
      // Close success modal if there's an error
      clearInterval(countdownInterval);
      setShowSuccessModal(false);
      
      let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
      
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          errorMessage = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.";
        } else if (error.message.includes('Failed to fetch')) {
          errorMessage = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É.";
        }
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        variant: "destructive",
        duration: 2000,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-neutral-50 main-content">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-neutral-200">
        <div className="container mx-auto px-4 py-4">
          <h1 className="text-2xl font-bold text-neutral-900 text-center">–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å</h1>
          <p className="text-neutral-600 mt-1 text-center">–°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞</p>
        </div>
      </header>

      <main className="container mx-auto px-4 py-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Photo Upload Section */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Upload className="w-5 h-5" />
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ <span className="text-red-500">*</span>
              </CardTitle>
              <p className="text-sm text-gray-600">
                –ú–∏–Ω–∏–º—É–º 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è 
                <span className={`ml-2 font-medium ${uploadedImages.length >= 5 ? 'text-green-600' : 'text-red-500'}`}>
                  ({uploadedImages.length}/5)
                </span>
              </p>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {uploadedImages.map((image, index) => (
                  <div key={index} className="relative aspect-video bg-neutral-100 rounded-lg overflow-hidden">
                    <img src={image} alt={`Upload ${index + 1}`} className="w-full h-full object-cover" />
                    <Button
                      type="button"
                      variant="destructive"
                      size="sm"
                      className="absolute top-2 right-2 w-6 h-6 p-0"
                      onClick={() => removeImage(index)}
                    >
                      <X className="w-3 h-3" />
                    </Button>
                  </div>
                ))}
                
                {uploadedImages.length < 20 && (
                  <label className="aspect-video border-2 border-dashed border-neutral-300 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-primary hover:bg-neutral-50 transition-colors">
                    <Plus className="w-8 h-8 text-neutral-400 mb-2" />
                    <span className="text-sm text-neutral-500">–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</span>
                    <input
                      type="file"
                      multiple
                      accept="image/*"
                      className="hidden"
                      onChange={handleImageUpload}
                    />
                  </label>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Car Details Section */}
          <Card>
            <CardHeader>
              <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="make">–ú–∞—Ä–∫–∞ <span className="text-red-500">*</span></Label>
                  <Select value={formData.make} onValueChange={(value) => handleInputChange("make", value)}>
                    <SelectTrigger id="make">
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.keys(CAR_MAKES_MODELS).map(make => (
                        <SelectItem key={make} value={make}>{make}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="model">–ú–æ–¥–µ–ª—å <span className="text-red-500">*</span></Label>
                  <Select value={formData.model} onValueChange={(value) => handleInputChange("model", value)} disabled={!formData.make}>
                    <SelectTrigger id="model">
                      <SelectValue placeholder={formData.make ? "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å" : "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É"} />
                    </SelectTrigger>
                    <SelectContent>
                      {availableModels.map(model => (
                        <SelectItem key={model} value={model}>{model}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Custom Make/Model Field - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–∏–µ –º–∞—Ä–∫–∏" */}
              {formData.make === "–î—Ä—É–≥–∏–µ –º–∞—Ä–∫–∏" && (
                <div>
                  <Label htmlFor="customMakeModel">–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å <span className="text-red-500">*</span></Label>
                  <Input
                    id="customMakeModel"
                    type="text"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Changan CS75, Hongqi H9, –ù–æ–≤–∞—è –ú–∞—Ä–∫–∞ X1"
                    value={formData.customMakeModel}
                    onChange={(e) => handleInputChange("customMakeModel", e.target.value)}
                    className="mt-1"
                  />
                  <p className="text-sm text-gray-600 mt-1">
                    –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
                  </p>
                </div>
              )}

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="year">–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ <span className="text-red-500">*</span></Label>
                  <Select value={formData.year} onValueChange={(value) => handleInputChange("year", value)}>
                    <SelectTrigger id="year">
                      <SelectValue placeholder="–ì–æ–¥" />
                    </SelectTrigger>
                    <SelectContent>
                      {Array.from({ length: 55 }, (_, i) => 2025 - i).map(year => (
                        <SelectItem key={year} value={year.toString()}>{year}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="mileage">–ü—Ä–æ–±–µ–≥ (–∫–º) <span className="text-red-500">*</span></Label>
                  <Input
                    id="mileage"
                    type="number"
                    placeholder="150000"
                    value={formData.mileage}
                    onChange={(e) => handleInputChange("mileage", e.target.value)}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div>
                  <Label htmlFor="bodyType">–¢–∏–ø –∫—É–∑–æ–≤–∞ <span className="text-red-500">*</span></Label>
                  <Select value={formData.bodyType} onValueChange={(value) => handleInputChange("bodyType", value)}>
                    <SelectTrigger id="bodyType">
                      <SelectValue placeholder="–¢–∏–ø –∫—É–∑–æ–≤–∞" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="sedan">–°–µ–¥–∞–Ω</SelectItem>
                      <SelectItem value="crossover">–ö—Ä–æ—Å—Å–æ–≤–µ—Ä</SelectItem>
                      <SelectItem value="suv">–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫</SelectItem>
                      <SelectItem value="hatchback">–•—ç—Ç—á–±–µ–∫</SelectItem>
                      <SelectItem value="wagon">–£–Ω–∏–≤–µ—Ä—Å–∞–ª</SelectItem>
                      <SelectItem value="minivan">–ú–∏–Ω–∏–≤–µ–Ω</SelectItem>
                      <SelectItem value="coupe">–ö—É–ø–µ</SelectItem>
                      <SelectItem value="convertible">–ö–∞–±—Ä–∏–æ–ª–µ—Ç</SelectItem>
                      <SelectItem value="pickup">–ü–∏–∫–∞–ø</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="fuelType">–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞ <span className="text-red-500">*</span></Label>
                  <Select value={formData.fuelType} onValueChange={(value) => handleInputChange("fuelType", value)}>
                    <SelectTrigger id="fuelType">
                      <SelectValue placeholder="–¢–æ–ø–ª–∏–≤–æ" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="gasoline">–ë–µ–Ω–∑–∏–Ω</SelectItem>
                      <SelectItem value="diesel">–î–∏–∑–µ–ª—å</SelectItem>
                      <SelectItem value="gas">–ì–∞–∑</SelectItem>
                      <SelectItem value="gas_gasoline">–ì–∞–∑+–±–µ–Ω–∑–∏–Ω</SelectItem>
                      <SelectItem value="hybrid">–ì–∏–±—Ä–∏–¥</SelectItem>
                      <SelectItem value="electric">–≠–ª–µ–∫—Ç—Ä–æ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="transmission">–ö–ü–ü <span className="text-red-500">*</span></Label>
                  <Select value={formData.transmission} onValueChange={(value) => handleInputChange("transmission", value)}>
                    <SelectTrigger id="transmission">
                      <SelectValue placeholder="–ö–ü–ü" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="automatic">–ê–≤—Ç–æ–º–∞—Ç</SelectItem>
                      <SelectItem value="manual">–ú–µ—Ö–∞–Ω–∏–∫–∞</SelectItem>
                      <SelectItem value="cvt">–í–∞—Ä–∏–∞—Ç–æ—Ä</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="engineVolume">–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª) <span className="text-red-500">*</span></Label>
                  <Input
                    id="engineVolume"
                    type="number"
                    step="0.1"
                    placeholder="2.0"
                    value={formData.engineVolume}
                    onChange={(e) => handleInputChange("engineVolume", e.target.value)}
                  />
                </div>

                <div>
                  <Label htmlFor="driveType">–ü—Ä–∏–≤–æ–¥ <span className="text-red-500">*</span></Label>
                  <Select value={formData.driveType} onValueChange={(value) => handleInputChange("driveType", value)}>
                    <SelectTrigger id="driveType">
                      <SelectValue placeholder="–ü—Ä–∏–≤–æ–¥" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="front">–ü–µ—Ä–µ–¥–Ω–∏–π</SelectItem>
                      <SelectItem value="rear">–ó–∞–¥–Ω–∏–π</SelectItem>
                      <SelectItem value="all">–ü–æ–ª–Ω—ã–π</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="color">–¶–≤–µ—Ç <span className="text-red-500">*</span></Label>
                  <Select value={formData.color} onValueChange={(value) => handleInputChange("color", value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="–¶–≤–µ—Ç" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="white">–ë–µ–ª—ã–π</SelectItem>
                      <SelectItem value="black">–ß–µ—Ä–Ω—ã–π</SelectItem>
                      <SelectItem value="silver">–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π</SelectItem>
                      <SelectItem value="gray">–°–µ—Ä—ã–π</SelectItem>
                      <SelectItem value="red">–ö—Ä–∞—Å–Ω—ã–π</SelectItem>
                      <SelectItem value="blue">–°–∏–Ω–∏–π</SelectItem>
                      <SelectItem value="green">–ó–µ–ª–µ–Ω—ã–π</SelectItem>
                      <SelectItem value="yellow">–ñ–µ–ª—Ç—ã–π</SelectItem>
                      <SelectItem value="brown">–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π</SelectItem>
                      <SelectItem value="gold">–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π</SelectItem>
                      <SelectItem value="other">–î—Ä—É–≥–æ–π</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="condition">–°–æ—Å—Ç–æ—è–Ω–∏–µ <span className="text-red-500">*</span></Label>
                  <Select value={formData.condition} onValueChange={(value) => handleInputChange("condition", value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="excellent">–û—Ç–ª–∏—á–Ω–æ–µ</SelectItem>
                      <SelectItem value="very_good">–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ</SelectItem>
                      <SelectItem value="good">–•–æ—Ä–æ—à–µ–µ</SelectItem>
                      <SelectItem value="satisfactory">–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ</SelectItem>
                      <SelectItem value="requires_repair">–¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞</SelectItem>
                      <SelectItem value="accident">–ü–æ—Å–ª–µ –î–¢–ü</SelectItem>
                      <SelectItem value="not_running">–ù–µ –Ω–∞ —Ö–æ–¥—É</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Electric car specific fields - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π */}
              {formData.fuelType === 'electric' && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg border-2 border-blue-200 dark:border-blue-800">
                  <div className="md:col-span-2">
                    <h4 className="text-lg font-semibold text-blue-700 dark:text-blue-300 mb-2">
                      ‚ö° –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è
                    </h4>
                    <p className="text-sm text-blue-600 dark:text-blue-400 mb-4">
                      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π
                    </p>
                  </div>
                  
                  <div>
                    <Label htmlFor="batteryCapacity">–ï–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏ (–∫–í—Ç¬∑—á) <span className="text-red-500">*</span></Label>
                    <Input
                      id="batteryCapacity"
                      type="number"
                      step="0.1"
                      min="10"
                      max="200"
                      placeholder="75.0"
                      value={formData.batteryCapacity}
                      onChange={(e) => handleInputChange("batteryCapacity", e.target.value)}
                    />
                    <p className="text-xs text-gray-500 mt-1">–ï–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –≤ –∫–∏–ª–æ–≤–∞—Ç—Ç-—á–∞—Å–∞—Ö</p>
                  </div>

                  <div>
                    <Label htmlFor="electricRange">–ó–∞–ø–∞—Å —Ö–æ–¥–∞ (–∫–º) <span className="text-red-500">*</span></Label>
                    <Input
                      id="electricRange"
                      type="number"
                      min="50"
                      max="800"
                      placeholder="400"
                      value={formData.electricRange}
                      onChange={(e) => handleInputChange("electricRange", e.target.value)}
                    />
                    <p className="text-xs text-gray-500 mt-1">–î–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –æ–¥–Ω–æ–π –∑–∞—Ä—è–¥–∫–µ</p>
                  </div>
                </div>
              )}

              <div className="grid grid-cols-1 gap-4">
                <div>
                  <Label htmlFor="vin">VIN-–Ω–æ–º–µ—Ä</Label>
                  <Input
                    id="vin"
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ VIN-–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
                    value={formData.vin}
                    onChange={(e) => handleInputChange("vin", e.target.value.toUpperCase())}
                    maxLength={17}
                  />
                  <p className="text-xs text-gray-500 mt-1">17-–∑–Ω–∞—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è</p>
                </div>
                
                <div>
                  <Label htmlFor="location">–ì–æ—Ä–æ–¥ <span className="text-red-500">*</span></Label>
                  <Select value={formData.location} onValueChange={(value) => handleInputChange("location", value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥" />
                    </SelectTrigger>
                    <SelectContent>
                      {TAJIKISTAN_CITIES.map((city) => (
                        <SelectItem key={city} value={city}>
                          {city}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <Label>–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω <span className="text-red-500">*</span></Label>
                  <div className="flex gap-2 mt-2">
                    <Button
                      type="button"
                      variant={formData.customsCleared === "yes" ? "default" : "outline"}
                      className="flex-1"
                      onClick={() => handleInputChange("customsCleared", "yes")}
                    >
                      –î–∞
                    </Button>
                    <Button
                      type="button"
                      variant={formData.customsCleared === "no" ? "default" : "outline"}
                      className="flex-1"
                      onClick={() => handleInputChange("customsCleared", "no")}
                    >
                      –ù–µ—Ç
                    </Button>
                  </div>
                </div>

                <div>
                  <Label>–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è <span className="text-red-500">*</span></Label>
                  <div className="flex gap-2 mt-2">
                    <Button
                      type="button"
                      variant={formData.recycled === "yes" ? "default" : "outline"}
                      className="flex-1"
                      onClick={() => handleInputChange("recycled", "yes")}
                    >
                      –ï—Å—Ç—å
                    </Button>
                    <Button
                      type="button"
                      variant={formData.recycled === "no" ? "default" : "outline"}
                      className="flex-1"
                      onClick={() => handleInputChange("recycled", "no")}
                    >
                      –ù–µ—Ç
                    </Button>
                  </div>
                </div>

                <div>
                  <Label>–¢–µ—Ö–æ—Å–º–æ—Ç—Ä <span className="text-red-500">*</span></Label>
                  <div className="flex gap-2 mt-2">
                    <Button
                      type="button"
                      variant={formData.technicalInspectionValid === "yes" ? "default" : "outline"}
                      className="flex-1"
                      onClick={() => handleInputChange("technicalInspectionValid", "yes")}
                    >
                      –ï—Å—Ç—å
                    </Button>
                    <Button
                      type="button"
                      variant={formData.technicalInspectionValid === "no" ? "default" : "outline"}
                      className="flex-1"
                      onClick={() => handleInputChange("technicalInspectionValid", "no")}
                    >
                      –ù–µ—Ç
                    </Button>
                  </div>
                </div>
              </div>

              {/* –ü–æ–ª–µ –¥–∞—Ç—ã —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä –µ—Å—Ç—å */}
              {formData.technicalInspectionValid === "yes" && (
                <div>
                  <Label htmlFor="technicalInspectionDate">–î–µ–π—Å—Ç–≤–∏–µ —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞ –¥–æ <span className="text-red-500">*</span></Label>
                  <Input
                    id="technicalInspectionDate"
                    type="text"
                    value={formData.technicalInspectionDate}
                    onChange={(e) => handleDateInputChange("technicalInspectionDate", e.target.value)}
                    placeholder="–î–î.–ú–ú.–ì–ì–ì–ì"
                    maxLength={10}
                  />
                </div>
              )}

              <div>
                <Label>–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ <span className="text-red-500">*</span></Label>
                <div className="flex gap-2 mt-2">
                  <Button
                    type="button"
                    variant={formData.tinted === "yes" ? "default" : "outline"}
                    className="flex-1"
                    onClick={() => handleInputChange("tinted", "yes")}
                  >
                    –ï—Å—Ç—å
                  </Button>
                  <Button
                    type="button"
                    variant={formData.tinted === "no" ? "default" : "outline"}
                    className="flex-1"
                    onClick={() => handleInputChange("tinted", "no")}
                  >
                    –ù–µ—Ç
                  </Button>
                </div>
              </div>

              {/* –ü–æ–ª–µ –¥–∞—Ç—ã —Ç–æ–Ω–∏—Ä–æ–≤–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–Ω–∏—Ä–æ–≤–∫–∞ –µ—Å—Ç—å */}
              {formData.tinted === "yes" && (
                <div>
                  <Label htmlFor="tintingDate">–î–∞—Ç–∞ —Ç–æ–Ω–∏—Ä–æ–≤–∫–∏ <span className="text-red-500">*</span></Label>
                  <Input
                    id="tintingDate"
                    type="text"
                    value={formData.tintingDate}
                    onChange={(e) => handleDateInputChange("tintingDate", e.target.value)}
                    placeholder="–î–î.–ú–ú.–ì–ì–ì–ì"
                    maxLength={10}
                  />
                </div>
              )}

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="price">–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ (–°–æ–º–æ–Ω–∏) <span className="text-red-500">*</span></Label>
                  <Input
                    id="price"
                    type="number"
                    placeholder="0"
                    value={formData.price}
                    onChange={(e) => handleInputChange("price", e.target.value)}
                  />
                </div>
                
                <div>
                  <div className="flex items-center gap-2">
                    <Label htmlFor="reservePrice">–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ü–µ–Ω–∞ (–°–æ–º–æ–Ω–∏)</Label>
                    <button 
                      type="button" 
                      onClick={() => setShowReservePriceInfo(!showReservePriceInfo)}
                      className="inline-flex items-center p-1 rounded-full hover:bg-gray-100 transition-colors"
                    >
                      <HelpCircle className="w-4 h-4 text-gray-400 hover:text-gray-600 cursor-pointer" />
                    </button>
                  </div>
                  {showReservePriceInfo && (
                    <div className="mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <p className="text-sm text-blue-800">
                        <strong>–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ü–µ–Ω–∞</strong> - —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å. 
                        –û–Ω–∞ —Å–∫—Ä—ã—Ç–∞ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—Å –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ. 
                        –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Ü–µ–Ω—ã, –≤—ã –Ω–µ –æ–±—è–∑–∞–Ω—ã –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å.
                      </p>
                    </div>
                  )}
                  <Input
                    id="reservePrice"
                    type="number"
                    placeholder="0"
                    value={formData.reservePrice}
                    onChange={(e) => handleInputChange("reservePrice", e.target.value)}
                  />
                  <p className="text-xs text-gray-500 mt-1">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–Ω–µ –≤–∏–¥–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º)</p>
                </div>
              </div>

              <div>
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ <span className="text-red-500">*</span></Label>
                <Textarea
                  id="description"
                  placeholder="–û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∏—Å—Ç–æ—Ä–∏—é –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è..."
                  rows={4}
                  value={formData.description}
                  onChange={(e) => handleInputChange("description", e.target.value)}
                />
              </div>

              <div>
                <Label htmlFor="auctionDuration">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ <span className="text-red-500">*</span></Label>
                <Select value={formData.auctionDuration} onValueChange={(value) => handleInputChange("auctionDuration", value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="7">7 –¥–Ω–µ–π</SelectItem>
                    <SelectItem value="10">10 –¥–Ω–µ–π</SelectItem>
                    <SelectItem value="15">15 –¥–Ω–µ–π</SelectItem>
                  </SelectContent>
                </Select>
                <p className="text-xs text-gray-500 mt-1">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞</p>
              </div>
            </CardContent>
          </Card>

          {/* Admin User Selection - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ */}
          {(user?.role === 'admin' || user?.fullName === 'ADMIN') && (
            <Card>
              <CardContent className="p-6">
                <div className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Users className="h-5 w-5 text-blue-600" />
                    <Label className="text-lg font-semibold">–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Label>
                  </div>
                  
                  {!showUserSelector ? (
                    <div className="space-y-3">
                      <p className="text-sm text-muted-foreground">
                        {selectedUserId ? 
                          (() => {
                            const selectedUser = allUsers.find(u => (u.userId || u.id) === selectedUserId);
                            return selectedUser ? 
                              `–°–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç –∏–º–µ–Ω–∏: ${selectedUser.phoneNumber} - ${selectedUser.fullName}` :
                              "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
                          })() :
                          "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏"
                        }
                      </p>
                      <Button 
                        type="button"
                        variant="outline"
                        onClick={() => setShowUserSelector(true)}
                        className="w-full"
                      >
                        <Users className="mr-2 h-4 w-4" />
                        {selectedUserId ? "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" : "–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      <div className="max-h-60 overflow-y-auto border rounded-md">
                        <div className="p-2">
                          {/* –û–ø—Ü–∏—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ */}
                          <button
                            type="button"
                            onClick={() => {
                              setSelectedUserId(null);
                              setShowUserSelector(false);
                            }}
                            className={`w-full text-left p-3 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors ${
                              selectedUserId === null ? 'bg-blue-100 dark:bg-blue-900 border-2 border-blue-500' : 'border-2 border-transparent'
                            }`}
                          >
                            <div className="font-medium">–û—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏</div>
                            <div className="text-sm text-muted-foreground">{user?.phoneNumber} - {user?.fullName}</div>
                          </button>
                        </div>
                        <div className="border-t">
                          {allUsers.map((userItem: any, index: number) => {
                            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            const userUniqueId = userItem.userId || userItem.id || `temp-${index}`;
                            
                            return (
                              <button
                                key={`user-${userUniqueId}`}
                                type="button"
                                onClick={() => {
                                  setSelectedUserId(userUniqueId);
                                  setShowUserSelector(false);
                                }}
                                className={`w-full text-left p-3 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors ${
                                  selectedUserId === userUniqueId ? 'bg-blue-100 dark:bg-blue-900 border-2 border-blue-500' : 'border-2 border-transparent'
                                }`}
                              >
                                <div className="font-medium">{userItem.phoneNumber}</div>
                                <div className="text-sm text-muted-foreground">{userItem.fullName}</div>
                              </button>
                            );
                          })}
                        </div>
                      </div>
                      <Button 
                        type="button"
                        variant="outline"
                        onClick={() => setShowUserSelector(false)}
                        className="w-full"
                      >
                        –û—Ç–º–µ–Ω–∞
                      </Button>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Submit Button */}
          <Card>
            <CardContent className="p-6">
              <Button 
                type="submit" 
                disabled={isSubmitting}
                className="w-full bg-red-600 hover:bg-red-700 text-lg py-3 disabled:opacity-50"
              >
                {isSubmitting ? "–ü—É–±–ª–∏–∫–∞—Ü–∏—è..." : "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ"}
              </Button>
              <p className="text-sm text-neutral-500 text-center mt-3">
                –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
              </p>
            </CardContent>
          </Card>
        </form>
      </main>

      {/* Success Modal */}
      <Dialog open={showSuccessModal} onOpenChange={() => {}}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2 text-green-600">
              <CheckCircle className="h-6 w-6" />
              –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!
            </DialogTitle>
            <DialogDescription>
              –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –∞—É–∫—Ü–∏–æ–Ω.
            </p>
            <div className="flex items-center justify-center">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <ArrowLeft className="h-4 w-4" />
                –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ {countdown} —Å–µ–∫...
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      </div>
  );
}