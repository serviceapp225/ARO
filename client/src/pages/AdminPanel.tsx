import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { Trash2, User as UserIcon, Car, Bell, Settings, CheckCircle, XCircle, AlertCircle, Edit, Search, Image, Plus, Eye, ChevronUp, RefreshCw, Award, Gift } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import { Link } from 'wouter';
import { UserDetailModal } from '@/components/UserDetailModal';
import { ListingEditModal } from '@/components/ListingEditModal';
import type { User, CarListing, Notification, AdvertisementCarousel } from '@shared/schema';

export default function AdminPanel() {
  const { user, loading } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 992903331332
  const hasAdminAccess = user?.email?.includes('992903331332') || 
                         user?.phoneNumber?.includes('333-13-32');

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-300">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  if (!user || !hasAdminAccess) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <CardTitle className="text-red-600">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</CardTitle>
            <CardDescription>
              –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            </CardDescription>
          </CardHeader>
          <CardContent className="text-center">
            <Link href="/">
              <Button variant="outline">–ù–∞ –≥–ª–∞–≤–Ω—É—é</Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 page-content">
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
          </h1>
          <p className="text-gray-600 dark:text-gray-300">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –∞–≤—Ç–æ–∞—É–∫—Ü–∏–æ–Ω–∞
          </p>
        </div>

        <Tabs defaultValue="users" className="w-full">
          <TabsList className="flex flex-col w-full h-auto">
            <TabsTrigger value="users" className="flex items-center gap-2 w-full justify-start">
              <UserIcon className="h-4 w-4" />
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            </TabsTrigger>
            <TabsTrigger value="moderation" className="flex items-center gap-2 w-full justify-start">
              <CheckCircle className="h-4 w-4" />
              –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            </TabsTrigger>
            <TabsTrigger value="listings" className="flex items-center gap-2 w-full justify-start">
              <Car className="h-4 w-4" />
              –û–±—ä—è–≤–ª–µ–Ω–∏—è
            </TabsTrigger>
            <TabsTrigger value="notifications" className="flex items-center gap-2 w-full justify-start">
              <Bell className="h-4 w-4" />
              –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </TabsTrigger>
            <TabsTrigger value="sell-banner" className="flex items-center gap-2 w-full justify-start">
              <Plus className="h-4 w-4" />
              –ë–∞–Ω–Ω–µ—Ä "–ü—Ä–æ–¥–∞–π –∞–≤—Ç–æ"
            </TabsTrigger>
            <TabsTrigger value="banners" className="flex items-center gap-2 w-full justify-start">
              <Settings className="h-4 w-4" />
              –ë–∞–Ω–Ω–µ—Ä—ã
            </TabsTrigger>
            <TabsTrigger value="ad-carousel" className="flex items-center gap-2 w-full justify-start">
              <Plus className="h-4 w-4" />
              –†–µ–∫–ª–∞–º–∞-–∫–∞—Ä—É—Å–µ–ª—å
            </TabsTrigger>
            <TabsTrigger value="archive" className="flex items-center gap-2 w-full justify-start">
              <Trash2 className="h-4 w-4" />
              –ê—Ä—Ö–∏–≤
            </TabsTrigger>
            <TabsTrigger value="wins" className="flex items-center gap-2 w-full justify-start">
              <Award className="h-4 w-4" />
              –í—ã–∏–≥—Ä—ã—à–∏
            </TabsTrigger>
            <TabsTrigger value="referrals" className="flex items-center gap-2 w-full justify-start">
              <Gift className="h-4 w-4" />
              –†–µ—Ñ–µ—Ä–∞–ª—ã
            </TabsTrigger>
            <TabsTrigger value="stats" className="flex items-center gap-2 w-full justify-start">
              <Settings className="h-4 w-4" />
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </TabsTrigger>
          </TabsList>

          <TabsContent value="users">
            <UsersManagement />
          </TabsContent>

          <TabsContent value="moderation">
            <ModerationManagement />
          </TabsContent>

          <TabsContent value="listings">
            <ListingsManagement />
          </TabsContent>

          <TabsContent value="notifications">
            <NotificationsManagement />
          </TabsContent>

          <TabsContent value="sell-banner">
            <SellBannerManagement />
          </TabsContent>

          <TabsContent value="banners">
            <BannersManagement />
          </TabsContent>

          <TabsContent value="ad-carousel">
            <AdvertisementCarouselManagement />
          </TabsContent>

          <TabsContent value="archive">
            <ArchiveManagement />
          </TabsContent>

          <TabsContent value="wins">
            <WinsSection />
          </TabsContent>

          <TabsContent value="referrals">
            <ReferralsSection />
          </TabsContent>

          <TabsContent value="stats">
            <AdminStats />
          </TabsContent>
        </Tabs>
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞–≤–µ—Ä—Ö */}
      <ScrollToTopButton />
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
function ModerationManagement() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [editingListing, setEditingListing] = useState<CarListing | null>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è
  const { data: pendingListings = [], isLoading, error: pendingError } = useQuery<CarListing[]>({
    queryKey: ['/api/admin/listings/pending-approval'],
    queryFn: async () => {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é...');
      const response = await fetch('/api/admin/listings/pending-approval');
      if (!response.ok) throw new Error('Failed to fetch pending listings');
      const data = await response.json();
      console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', data);
      return data;
    },
    staleTime: 0, // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    gcTime: 0, // –ù–µ –∫—ç—à–∏—Ä—É–µ–º –≤–æ–æ–±—â–µ
    refetchInterval: 5000, // –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    refetchOnMount: true,
    refetchOnWindowFocus: true
  });

  // –ú—É—Ç–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const approveMutation = useMutation({
    mutationFn: async (listingId: number) => {
      const response = await fetch(`/api/admin/listings/${listingId}/approve`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) throw new Error('Failed to approve listing');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ",
        description: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø—É–±–ª–∏—á–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ",
        variant: "default",
        duration: 1000
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/listings/pending-approval'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const rejectMutation = useMutation({
    mutationFn: async (listingId: number) => {
      const response = await fetch(`/api/admin/listings/${listingId}/reject`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) throw new Error('Failed to reject listing');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        description: "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        variant: "default"
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/listings/pending-approval'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const updateMutation = useMutation({
    mutationFn: async ({ id, data }: { id: number, data: any }) => {
      const response = await fetch(`/api/listings/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      if (!response.ok) throw new Error('Failed to update listing');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
        description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
        variant: "default"
      });
      setEditingListing(null);
      queryClient.invalidateQueries({ queryKey: ['/api/admin/listings/pending-approval'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const deleteMutation = useMutation({
    mutationFn: async (listingId: number) => {
      const response = await fetch(`/api/admin/listings/${listingId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) throw new Error('Failed to delete listing');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
        description: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
        variant: "default",
        duration: 1000
      });
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫—ç—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      queryClient.invalidateQueries({ queryKey: ['/api/admin/listings/pending-approval'] });
      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });
      queryClient.refetchQueries({ queryKey: ['/api/listings'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π</CardTitle>
          <CardDescription>–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è...</CardDescription>
        </CardHeader>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-center">
          <div>
            <CardTitle>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π</CardTitle>
            <CardDescription>
              –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {pendingListings.length}
            </CardDescription>
          </div>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => {
              console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏...');
              queryClient.removeQueries({ queryKey: ['/api/admin/listings/pending-approval'] });
              queryClient.invalidateQueries({ queryKey: ['/api/admin/listings/pending-approval'] });
            }}
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {pendingError && (
          <div className="text-center py-4 mb-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-600">–û—à–∏–±–∫–∞: {pendingError.message}</p>
          </div>
        )}
        {pendingListings.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-gray-500">–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏</p>
            <p className="text-xs text-gray-400 mt-2">Debug: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {pendingListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π</p>
          </div>
        ) : (
          <div className="space-y-4">
            {pendingListings.map((listing) => (
              <div key={listing.id} className="border border-gray-200 dark:border-gray-700 rounded-xl p-6 bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-shadow">
                <div className="space-y-4">
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                  <div className="space-y-3">
                    <div className="flex items-center gap-3">
                      <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-300 dark:border-yellow-800">
                        –û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è
                      </Badge>
                      <span className="text-sm font-medium text-gray-500 dark:text-gray-400">
                        –õ–æ—Ç #{listing.lotNumber}
                      </span>
                    </div>
                    <h3 className="text-xl font-bold text-gray-900 dark:text-white">
                      {listing.make} {listing.model} {listing.year}
                    </h3>
                  </div>
                  
                  {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => setEditingListing(listing)}
                      disabled={approveMutation.isPending || rejectMutation.isPending || updateMutation.isPending}
                      className="flex items-center justify-center gap-2 h-10 font-medium border-gray-300 hover:border-gray-400 hover:bg-gray-50 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-700"
                    >
                      <Edit className="h-4 w-4" />
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                    <Button
                      size="sm"
                      variant="default"
                      onClick={() => approveMutation.mutate(listing.id)}
                      disabled={approveMutation.isPending || rejectMutation.isPending || updateMutation.isPending}
                      className="flex items-center justify-center gap-2 h-10 font-medium bg-green-600 hover:bg-green-700 border-green-600 hover:border-green-700"
                    >
                      <CheckCircle className="h-4 w-4" />
                      –û–¥–æ–±—Ä–∏—Ç—å
                    </Button>
                    <Button
                      size="sm"
                      variant="destructive"
                      onClick={() => rejectMutation.mutate(listing.id)}
                      disabled={approveMutation.isPending || rejectMutation.isPending || updateMutation.isPending || deleteMutation.isPending}
                      className="flex items-center justify-center gap-2 h-10 font-medium bg-orange-600 hover:bg-orange-700 border-orange-600 hover:border-orange-700"
                    >
                      <XCircle className="h-4 w-4" />
                      –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </Button>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          size="sm"
                          variant="destructive"
                          disabled={approveMutation.isPending || rejectMutation.isPending || updateMutation.isPending || deleteMutation.isPending}
                          className="flex items-center justify-center gap-2 h-10 font-medium bg-red-600 hover:bg-red-700 border-red-600 hover:border-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                          –£–¥–∞–ª–∏—Ç—å
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</AlertDialogTitle>
                          <AlertDialogDescription>
                            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "{listing.make} {listing.model}"? 
                            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() => deleteMutation.mutate(listing.id)}
                            className="bg-red-600 hover:bg-red-700"
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {editingListing && (
        <EditListingModal
          listing={editingListing}
          onClose={() => setEditingListing(null)}
          onUpdate={(data) => updateMutation.mutate({ id: editingListing.id, data })}
          isUpdating={updateMutation.isPending}
        />
      )}
    </Card>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
function EditListingModal({ listing, onClose, onUpdate, isUpdating }: {
  listing: CarListing;
  onClose: () => void;
  onUpdate: (data: any) => void;
  isUpdating: boolean;
}) {
  const [formData, setFormData] = useState({
    make: listing.make,
    model: listing.model,
    year: listing.year,
    mileage: listing.mileage,
    description: listing.description,
    startingPrice: listing.startingPrice,
    reservePrice: listing.reservePrice ? String(listing.reservePrice) : '',
    auctionDuration: Math.round((listing.auctionDuration || 168) / 24),
    condition: listing.condition || 'good',
    location: listing.location || '',
    engine: listing.engine || '',
    transmission: listing.transmission || '',
    fuelType: listing.fuelType || '',
    bodyType: listing.bodyType || '',
    driveType: listing.driveType || '',
    color: listing.color || '',
    customsCleared: listing.customsCleared || false,
    recycled: listing.recycled || false,
    technicalInspectionValid: listing.technicalInspectionValid || false,
    tinted: listing.tinted || false,
    photos: listing.photos || []
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Å—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dataToSend = {
      ...formData,
      auctionDuration: formData.auctionDuration * 24
    };
    onUpdate(dataToSend);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60] p-4 pb-24">
      <div className="bg-white dark:bg-gray-900 rounded-lg max-w-4xl w-full max-h-[85vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</h2>
            <Button variant="outline" size="sm" onClick={onClose}>
              <XCircle className="h-4 w-4" />
            </Button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="make">–ú–∞—Ä–∫–∞</Label>
                <Input
                  id="make"
                  value={formData.make}
                  onChange={(e) => setFormData({ ...formData, make: e.target.value })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="model">–ú–æ–¥–µ–ª—å</Label>
                <Input
                  id="model"
                  value={formData.model}
                  onChange={(e) => setFormData({ ...formData, model: e.target.value })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="year">–ì–æ–¥</Label>
                <Input
                  id="year"
                  type="number"
                  value={formData.year}
                  onChange={(e) => setFormData({ ...formData, year: parseInt(e.target.value) })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="mileage">–ü—Ä–æ–±–µ–≥ (–∫–º)</Label>
                <Input
                  id="mileage"
                  type="number"
                  value={formData.mileage}
                  onChange={(e) => setFormData({ ...formData, mileage: parseInt(e.target.value) })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="startingPrice">–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (—Å–æ–º–æ–Ω–∏)</Label>
                <Input
                  id="startingPrice"
                  value={formData.startingPrice}
                  onChange={(e) => setFormData({ ...formData, startingPrice: e.target.value })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="reservePrice">–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ü–µ–Ω–∞ (—Å–æ–º–æ–Ω–∏)</Label>
                <Input
                  id="reservePrice"
                  value={formData.reservePrice}
                  onChange={(e) => setFormData({ ...formData, reservePrice: e.target.value })}
                  placeholder="–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                />
              </div>
              <div>
                <Label htmlFor="auctionDuration">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ (–¥–Ω–∏)</Label>
                <div className="space-y-2">
                  <Input
                    id="auctionDuration"
                    type="number"
                    min="1"
                    max="30"
                    value={formData.auctionDuration}
                    onChange={(e) => setFormData({ ...formData, auctionDuration: parseInt(e.target.value) || 7 })}
                    required
                  />
                  <div className="text-sm text-gray-500 dark:text-gray-400 space-y-1">
                    <div>
                      –ü—Ä–æ–¥–∞–≤–µ—Ü –≤—ã–±—Ä–∞–ª: {formData.auctionDuration} {formData.auctionDuration === 1 ? '–¥–µ–Ω—å' : formData.auctionDuration < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}
                    </div>
                    {listing.auctionStartTime && (
                      <div>
                        –ù–∞—á–∞–ª–æ: {new Date(listing.auctionStartTime).toLocaleString('ru-RU')}
                      </div>
                    )}
                    {listing.auctionEndTime && (
                      <div>
                        –û–∫–æ–Ω—á–∞–Ω–∏–µ: {new Date(listing.auctionEndTime).toLocaleString('ru-RU')}
                      </div>
                    )}
                  </div>
                </div>
              </div>
              <div>
                <Label htmlFor="condition">–°–æ—Å—Ç–æ—è–Ω–∏–µ</Label>
                <Select
                  value={formData.condition}
                  onValueChange={(value) => setFormData({ ...formData, condition: value })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="excellent">–û—Ç–ª–∏—á–Ω–æ–µ</SelectItem>
                    <SelectItem value="very_good">–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ</SelectItem>
                    <SelectItem value="good">–•–æ—Ä–æ—à–µ–µ</SelectItem>
                    <SelectItem value="fair">–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ</SelectItem>
                    <SelectItem value="poor">–ü–ª–æ—Ö–æ–µ</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="location">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</Label>
                <Input
                  id="location"
                  value={formData.location}
                  onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                />
              </div>
              <div>
                <Label htmlFor="color">–¶–≤–µ—Ç</Label>
                <Input
                  id="color"
                  value={formData.color}
                  onChange={(e) => setFormData({ ...formData, color: e.target.value })}
                />
              </div>
            </div>

            <div>
              <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <Textarea
                id="description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                rows={3}
                required
              />
            </div>

            {/* –°–µ–∫—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
            <div>
              <Label className="text-base font-medium">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({formData.photos.length} —à—Ç.)</Label>
              {formData.photos && formData.photos.length > 0 ? (
                <div className="mt-3 grid grid-cols-2 md:grid-cols-4 gap-3">
                  {formData.photos.map((photo, index) => (
                    <div key={index} className="relative group">
                      <img
                        src={photo}
                        alt={`–§–æ—Ç–æ ${index + 1}`}
                        className="w-full h-24 object-cover rounded-lg border"
                      />
                      <button
                        type="button"
                        onClick={() => {
                          const newPhotos = formData.photos.filter((_, i) => i !== index);
                          setFormData({ ...formData, photos: newPhotos });
                        }}
                        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600 opacity-0 group-hover:opacity-100 transition-opacity"
                      >
                        √ó
                      </button>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 text-sm mt-2">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
              )}
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="customsCleared"
                    checked={formData.customsCleared}
                    onChange={(e) => setFormData({ ...formData, customsCleared: e.target.checked })}
                  />
                  <Label htmlFor="customsCleared">–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="recycled"
                    checked={formData.recycled}
                    onChange={(e) => setFormData({ ...formData, recycled: e.target.checked })}
                  />
                  <Label htmlFor="recycled">–£—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω</Label>
                </div>
              </div>
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="technicalInspectionValid"
                    checked={formData.technicalInspectionValid}
                    onChange={(e) => setFormData({ ...formData, technicalInspectionValid: e.target.checked })}
                  />
                  <Label htmlFor="technicalInspectionValid">–¢–µ—Ö–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="tinted"
                    checked={formData.tinted}
                    onChange={(e) => setFormData({ ...formData, tinted: e.target.checked })}
                  />
                  <Label htmlFor="tinted">–¢–æ–Ω–∏—Ä–æ–≤–∫–∞</Label>
                </div>
              </div>
            </div>

            <div className="flex gap-3 pt-4 border-t">
              <Button 
                type="submit" 
                disabled={isUpdating}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isUpdating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
              </Button>
              <Button type="button" variant="outline" onClick={onClose}>
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
function UsersManagement() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);

  const handleRefreshUsers = () => {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    queryClient.removeQueries({ queryKey: ['/api/admin/users'] });
    queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });
    queryClient.refetchQueries({ queryKey: ['/api/admin/users'] });
    
    toast({
      title: "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω",
      description: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
      duration: 1000
    });
  };

  const { data: users = [], isLoading } = useQuery<User[]>({
    queryKey: ['/api/admin/users'],
    refetchInterval: 3000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    staleTime: 0, // –î–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏
    gcTime: 1000, // –û—á–∏—â–∞–µ–º –∫—ç—à —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
  });



  if (isLoading) {
    return <div className="text-center py-8">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>;
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            <Button 
              variant="outline" 
              size="sm"
              onClick={handleRefreshUsers}
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </CardTitle>
          <CardDescription>
            –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {users.map((user) => (
              <div key={user.id} className="flex items-center justify-between p-4 border rounded-lg">
                <div className="flex-1">
                  <div className="flex items-center gap-3">
                    <div>
                      <p className="font-medium">{user.fullName || user?.phoneNumber}</p>
                      <p className="text-sm text-gray-600 dark:text-gray-300">
                        {user?.phoneNumber} ‚Ä¢ {user.role}
                      </p>
                      {(user as any).isInvited && (
                        <p className="text-xs text-green-600">
                          –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {(user as any).invitedBy}
                        </p>
                      )}
                    </div>
                    <div className="flex gap-2">
                      <Badge variant={(user.isActive || false) ? 'default' : 'secondary'}>
                        {(user.isActive || false) ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                      </Badge>
                      {(user as any).isInvited && (
                        <Badge variant="outline" className="text-green-600 border-green-300">
                          –†–µ—Ñ–µ—Ä–∞–ª
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => setSelectedUserId(user.id)}
                    className="flex items-center gap-1"
                  >
                    <Edit className="w-4 h-4" />
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <UserDetailModal
        userId={selectedUserId}
        isOpen={!!selectedUserId}
        onClose={() => setSelectedUserId(null)}
      />
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
function ListingsManagement() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedListingId, setSelectedListingId] = useState<number | null>(null);
  const [searchLotNumber, setSearchLotNumber] = useState('');

  const { data: allListings = [], isLoading } = useQuery<CarListing[]>({
    queryKey: ['/api/admin/listings'],
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –Ω–æ–º–µ—Ä—É –ª–æ—Ç–∞
  const listings = allListings.filter(listing => 
    searchLotNumber === '' || 
    listing.lotNumber?.toLowerCase().includes(searchLotNumber.toLowerCase())
  );

  const updateListingStatusMutation = useMutation({
    mutationFn: async ({ listingId, status }: { listingId: number; status: string }) => {
      const response = await fetch(`/api/admin/listings/${listingId}/status`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status }),
      });
      if (!response.ok) throw new Error('Failed to update listing status');
      return response.json();
    },
    onSuccess: () => {
      toast({ title: '–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω' });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/listings'] });
    },
    onError: () => {
      toast({ title: '–û—à–∏–±–∫–∞', description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', variant: 'destructive' });
    },
  });

  const deleteListingMutation = useMutation({
    mutationFn: async (listingId: number) => {
      const response = await fetch(`/api/admin/listings/${listingId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) throw new Error('Failed to delete listing');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
        description: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
        variant: "default",
        duration: 1000
      });
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫—ç—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      queryClient.invalidateQueries({ queryKey: ['/api/admin/listings'] });
      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });
      queryClient.refetchQueries({ queryKey: ['/api/listings'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  const endAuctionMutation = useMutation({
    mutationFn: async (listingId: number) => {
      const response = await fetch(`/api/admin/listings/${listingId}/end-auction`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) throw new Error('Failed to end auction');
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "üèÜ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: data.winner ? 
          `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ID ${data.winner}, —Å—Ç–∞–≤–∫–∞: ${parseFloat(data.winningAmount).toLocaleString()} –°–æ–º–æ–Ω–∏` : 
          "–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫",
        variant: "default"
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/listings'] });
      queryClient.invalidateQueries({ queryKey: ['/api/archived-listings'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  if (isLoading) {
    return <div className="text-center py-8">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...</div>;
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏</CardTitle>
          <CardDescription>
            –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
          </CardDescription>
        </CardHeader>
        <CardContent>
          {/* –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –ª–æ—Ç–∞ */}
          <div className="mb-6">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –ª–æ—Ç–∞..."
                value={searchLotNumber}
                onChange={(e) => setSearchLotNumber(e.target.value)}
                className="pl-10"
              />
            </div>
            {searchLotNumber && (
              <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">
                –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {listings.length}
              </p>
            )}
          </div>

          <div className="space-y-4">
            {listings.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                {searchLotNumber ? '–û–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –ª–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π'}
              </div>
            ) : (
              listings.map((listing) => (
                <div key={listing.id} className="flex flex-col md:flex-row md:items-start md:justify-between p-4 md:p-6 border border-gray-200 dark:border-gray-700 rounded-xl bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-shadow">
                
                {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="flex-1 mb-4 md:mb-0">
                  <div className="flex items-start gap-3 md:gap-4">
                    <div className="w-16 h-16 md:w-20 md:h-20 bg-gray-100 dark:bg-gray-700 rounded-xl flex-shrink-0 overflow-hidden">
                      {listing.photos && Array.isArray(listing.photos) && listing.photos.length > 0 ? (
                        <img 
                          src={listing.photos[0]} 
                          alt={`${listing.make} ${listing.model}`}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center">
                          <Car className="h-6 w-6 md:h-8 md:w-8 text-gray-400" />
                        </div>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h3 className="text-base md:text-lg font-semibold text-gray-900 dark:text-white mb-1">
                        {listing.make} {listing.model}
                      </h3>
                      <p className="text-sm md:text-base text-gray-600 dark:text-gray-300 mb-2">
                        {listing.year} –≥–æ–¥
                      </p>
                      <div className="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-3 mb-2">
                        <span className="text-xs md:text-sm font-medium text-gray-500 dark:text-gray-400">
                          –õ–æ—Ç #{listing.lotNumber}
                        </span>
                        <span className="hidden sm:inline text-sm text-gray-500 dark:text-gray-400">‚Ä¢</span>
                        <span className="text-sm md:text-base font-semibold text-blue-600 dark:text-blue-400">
                          {listing.currentBid} –°–æ–º–æ–Ω–∏
                        </span>
                      </div>
                      <Badge 
                        variant={
                          listing.status === 'pending' ? 'secondary' :
                          listing.status === 'active' ? 'default' :
                          listing.status === 'ended' ? 'outline' : 'destructive'
                        }
                        className="text-xs px-2 md:px-3 py-1 w-fit"
                      >
                        {listing.status === 'pending' ? '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' :
                         listing.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' :
                         listing.status === 'ended' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–û—Ç–∫–ª–æ–Ω–µ–Ω'}
                      </Badge>
                    </div>
                  </div>
                </div>
                
                {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
                <div className="flex flex-col gap-3 w-full md:w-40">
                  <div className="flex flex-row md:flex-col gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => setSelectedListingId(listing.id)}
                      className="flex-1 md:flex-none flex items-center justify-center gap-1 md:gap-2 h-8 md:h-9 text-xs md:text-sm font-medium border-gray-300 hover:border-gray-400 hover:bg-gray-50 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-700"
                    >
                      <Edit className="w-3 h-3 md:w-4 md:h-4" />
                      <span className="hidden sm:inline">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
                      <span className="sm:hidden">–†–µ–¥.</span>
                    </Button>
                    
                    {listing.status === 'active' && (
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button
                            size="sm"
                            variant="default"
                            disabled={endAuctionMutation.isPending}
                            className="flex-1 md:flex-none flex items-center justify-center gap-1 md:gap-2 h-8 md:h-9 text-xs md:text-sm font-medium bg-amber-600 hover:bg-amber-700 border-amber-600 hover:border-amber-700"
                          >
                            <Award className="w-3 h-3 md:w-4 md:h-4" />
                            <span className="hidden sm:inline">–ó–∞–≤–µ—Ä—à–∏—Ç—å</span>
                            <span className="sm:hidden">–ö–æ–Ω–µ—Ü</span>
                          </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω</AlertDialogTitle>
                            <AlertDialogDescription>
                              –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω "{listing.make} {listing.model}"? 
                              –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Å—Ç–∞–≤–∫–µ.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
                            <AlertDialogAction
                              onClick={() => endAuctionMutation.mutate(listing.id)}
                              className="bg-amber-600 hover:bg-amber-700"
                            >
                              –ó–∞–≤–µ—Ä—à–∏—Ç—å
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    )}
                    
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          size="sm"
                          variant="destructive"
                          disabled={deleteListingMutation.isPending}
                          className="flex-1 md:flex-none flex items-center justify-center gap-1 md:gap-2 h-8 md:h-9 text-xs md:text-sm font-medium bg-red-600 hover:bg-red-700 border-red-600 hover:border-red-700"
                        >
                          <Trash2 className="w-3 h-3 md:w-4 md:h-4" />
                          –£–¥–∞–ª–∏—Ç—å
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</AlertDialogTitle>
                          <AlertDialogDescription>
                            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "{listing.make} {listing.model}"? 
                            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() => deleteListingMutation.mutate(listing.id)}
                            className="bg-red-600 hover:bg-red-700"
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                  <div className="border-t border-gray-200 dark:border-gray-600 pt-3">
                    <Label className="text-xs font-medium text-gray-600 dark:text-gray-400 mb-2 block">
                      –°—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞
                    </Label>
                    <Select
                      value={listing.status}
                      onValueChange={(status) => 
                        updateListingStatusMutation.mutate({ listingId: listing.id, status })
                      }
                      disabled={updateListingStatusMutation.isPending}
                    >
                      <SelectTrigger className="w-full h-8 md:h-9 text-xs md:text-sm">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="pending">–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</SelectItem>
                        <SelectItem value="active">–ê–∫—Ç–∏–≤–µ–Ω</SelectItem>
                        <SelectItem value="ended">–ó–∞–≤–µ—Ä—à–µ–Ω</SelectItem>
                        <SelectItem value="rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                </div>
              ))
            )}
          </div>
        </CardContent>
      </Card>
      
      <ListingEditModal
        listingId={selectedListingId}
        isOpen={!!selectedListingId}
        onClose={() => setSelectedListingId(null)}
      />
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
function NotificationsManagement() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</CardTitle>
        <CardDescription>
          –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </CardDescription>
      </CardHeader>
      <CardContent>
        <p className="text-gray-600 dark:text-gray-300">
          –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
        </p>
      </CardContent>
    </Card>
  );
}



// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
interface AdminStatsData {
  totalUsers: number;
  activeAuctions: number;
  pendingListings: number;
  bannedUsers: number;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–æ–º "–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ"
function SellBannerManagement() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isEditing, setIsEditing] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    buttonText: '',
    linkUrl: '',
    backgroundImageUrl: '',
    gradientFrom: '',
    gradientTo: '',
    textColor: '',
    isActive: true,
    overlayOpacity: 60
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–∞
  const { data: banner, isLoading: bannerLoading } = useQuery({
    queryKey: ['/api/sell-car-banner'],
    staleTime: 30000,
  });

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (banner && typeof banner === 'object') {
      setFormData({
        title: (banner as any).title || '',
        description: (banner as any).description || '',
        buttonText: (banner as any).buttonText || '',
        linkUrl: (banner as any).linkUrl || '',
        backgroundImageUrl: (banner as any).backgroundImageUrl || '',
        gradientFrom: (banner as any).gradientFrom || '',
        gradientTo: (banner as any).gradientTo || '',
        textColor: (banner as any).textColor || '',
        isActive: (banner as any).isActive !== false,
        overlayOpacity: (banner as any).overlayOpacity || 60
      });
    }
  }, [banner]);

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞
  const updateBannerMutation = useMutation({
    mutationFn: async (bannerData: any) => {
      const response = await fetch('/api/admin/sell-car-banner', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(bannerData),
      });
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–ë–∞–Ω–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/sell-car-banner'] });
      setIsEditing(false);
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä",
        variant: "destructive",
      });
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    updateBannerMutation.mutate(formData);
  };

  const handleCancel = () => {
    if (banner && typeof banner === 'object') {
      setFormData({
        title: (banner as any).title || '',
        description: (banner as any).description || '',
        buttonText: (banner as any).buttonText || '',
        linkUrl: (banner as any).linkUrl || '',
        backgroundImageUrl: (banner as any).backgroundImageUrl || '',
        gradientFrom: (banner as any).gradientFrom || '',
        gradientTo: (banner as any).gradientTo || '',
        textColor: (banner as any).textColor || '',
        isActive: (banner as any).isActive !== false,
        overlayOpacity: (banner as any).overlayOpacity || 60
      });
    }
    setIsEditing(false);
  };

  if (bannerLoading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–æ–º "–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ"</h2>
        <Button
          onClick={() => {
            if (isEditing) {
              handleCancel();
            } else {
              setIsEditing(true);
            }
          }}
          variant={isEditing ? "outline" : "default"}
          className="flex items-center gap-2"
        >
          <Edit className="w-4 h-4" />
          {isEditing ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
        </Button>
      </div>

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      {banner && !isEditing && (
        <Card>
          <CardHeader>
            <CardTitle>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</CardTitle>
          </CardHeader>
          <CardContent>
            <div 
              className="relative h-44 rounded-2xl p-6 text-white overflow-hidden shadow-2xl"
              style={{
                background: `linear-gradient(135deg, ${(banner as any).gradientFrom || '#059669'} 0%, ${(banner as any).gradientTo || '#047857'} 100%)`,
              }}
            >
              {(banner as any).backgroundImageUrl && (
                <div 
                  className="absolute inset-0 rounded-2xl bg-cover bg-center bg-no-repeat"
                  style={{
                    backgroundImage: `url('${(banner as any).backgroundImageUrl}')`,
                    opacity: ((banner as any).overlayOpacity || 60) / 100,
                  }}
                />
              )}
              
              <div 
                className="absolute inset-0 rounded-2xl"
                style={{
                  background: `linear-gradient(135deg, ${(banner as any).gradientFrom || '#059669'}CC 0%, ${(banner as any).gradientTo || '#047857'}CC 100%)`,
                }}
              />
              
              <div className="relative z-10 h-full flex flex-col justify-center items-center text-center space-y-3">
                <h2 className="text-2xl font-bold drop-shadow-lg text-white">
                  {(banner as any).title}
                </h2>
                <p className="text-base leading-relaxed opacity-95 drop-shadow-md max-w-md text-white">
                  {(banner as any).description}
                </p>
                <div className="mt-4">
                  <span className="px-6 py-3 rounded-full text-sm font-bold bg-white text-green-600 shadow-lg inline-flex items-center gap-2">
                    <Plus className="w-4 h-4" />
                    {(banner as any).buttonText}
                  </span>
                </div>
              </div>
            </div>
            
            <div className="mt-4 grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="font-medium">–°—Ç–∞—Ç—É—Å:</span>
                <Badge variant={(banner as any).isActive ? 'default' : 'secondary'} className="ml-2">
                  {(banner as any).isActive ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
                </Badge>
              </div>
              <div>
                <span className="font-medium">–°—Å—ã–ª–∫–∞:</span>
                <span className="ml-2 text-blue-600">{(banner as any).linkUrl}</span>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {isEditing && (
        <Card>
          <CardHeader>
            <CardTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–Ω–µ—Ä</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                  <Input
                    id="title"
                    value={formData.title}
                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                    placeholder="–ü—Ä–æ–¥–∞–π —Å–≤–æ–µ –∞–≤—Ç–æ"
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="buttonText">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</Label>
                  <Input
                    id="buttonText"
                    value={formData.buttonText}
                    onChange={(e) => setFormData({ ...formData, buttonText: e.target.value })}
                    placeholder="–ù–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É"
                    required
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="–ü–æ–ª—É—á–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ –Ω–∞—à–µ–º –∞—É–∫—Ü–∏–æ–Ω–µ"
                  rows={3}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="linkUrl">–°—Å—ã–ª–∫–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å)</Label>
                <Input
                  id="linkUrl"
                  value={formData.linkUrl}
                  onChange={(e) => setFormData({ ...formData, linkUrl: e.target.value })}
                  placeholder="/sell"
                />
                <p className="text-xs text-gray-500">–í–≤–µ–¥–∏—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /sell –∏–ª–∏ /create-listing</p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="backgroundImageUrl">URL —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
                <Input
                  id="backgroundImageUrl"
                  value={formData.backgroundImageUrl}
                  onChange={(e) => setFormData({ ...formData, backgroundImageUrl: e.target.value })}
                  placeholder="https://images.unsplash.com/photo-1568605117036-5fe5e7bab0b7?w=800&h=300&fit=crop"
                  type="url"
                />
              </div>

              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="gradientFrom">–¶–≤–µ—Ç –Ω–∞—á–∞–ª–∞</Label>
                  <Input
                    id="gradientFrom"
                    type="color"
                    value={formData.gradientFrom}
                    onChange={(e) => setFormData({ ...formData, gradientFrom: e.target.value })}
                    className="h-10"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="gradientTo">–¶–≤–µ—Ç –∫–æ–Ω—Ü–∞</Label>
                  <Input
                    id="gradientTo"
                    type="color"
                    value={formData.gradientTo}
                    onChange={(e) => setFormData({ ...formData, gradientTo: e.target.value })}
                    className="h-10"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="overlayOpacity">–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (%)</Label>
                  <Input
                    id="overlayOpacity"
                    type="number"
                    min="0"
                    max="100"
                    value={formData.overlayOpacity}
                    onChange={(e) => setFormData({ ...formData, overlayOpacity: parseInt(e.target.value) || 60 })}
                    className="h-10"
                  />
                </div>

                <div className="flex items-center space-x-2 pt-6">
                  <input
                    type="checkbox"
                    id="isActive"
                    checked={formData.isActive}
                    onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}
                    className="rounded border-gray-300"
                  />
                  <Label htmlFor="isActive">–ê–∫—Ç–∏–≤–Ω—ã–π</Label>
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
              <div className="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700 flex gap-3">
                <Button
                  type="submit"
                  disabled={updateBannerMutation.isPending}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 text-base font-medium"
                >
                  {updateBannerMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                </Button>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={handleCancel}
                  className="px-6 py-2 text-base"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞–º–∏
function BannersManagement() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [editingBanner, setEditingBanner] = useState<any>(null);
  const [isCreating, setIsCreating] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    imageUrl: '',
    linkUrl: '',
    position: 'main',
    isActive: true,
    order: 1
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–æ–≤
  const { data: banners, isLoading: bannersLoading } = useQuery({
    queryKey: ['/api/admin/banners'],
    staleTime: 30000,
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞
  const createBannerMutation = useMutation({
    mutationFn: async (bannerData: any) => {
      const response = await fetch('/api/admin/banners', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(bannerData),
      });
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–ë–∞–Ω–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/banners'] });
      setIsCreating(false);
      resetForm();
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–Ω–Ω–µ—Ä",
        variant: "destructive",
      });
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞
  const updateBannerMutation = useMutation({
    mutationFn: async ({ id, data }: { id: number; data: any }) => {
      const response = await fetch(`/api/admin/banners/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–ë–∞–Ω–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/banners'] });
      setEditingBanner(null);
      resetForm();
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä",
        variant: "destructive",
      });
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞
  const deleteBannerMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await fetch(`/api/admin/banners/${id}`, {
        method: 'DELETE',
      });
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–ë–∞–Ω–Ω–µ—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/banners'] });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–Ω–Ω–µ—Ä",
        variant: "destructive",
      });
    },
  });

  const resetForm = () => {
    setFormData({
      title: '',
      description: '',
      imageUrl: '',
      linkUrl: '',
      position: 'main',
      isActive: true,
      order: 1
    });
  };

  const handleEdit = (banner: any) => {
    setEditingBanner(banner);
    setFormData({
      title: banner.title || '',
      description: banner.description || '',
      imageUrl: banner.imageUrl || '',
      linkUrl: banner.linkUrl || '',
      position: banner.position || 'main',
      isActive: banner.isActive !== false,
      order: banner.order || 1
    });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (editingBanner) {
      updateBannerMutation.mutate({ id: editingBanner.id, data: formData });
    } else {
      createBannerMutation.mutate(formData);
    }
  };

  const handleCancel = () => {
    setEditingBanner(null);
    setIsCreating(false);
    resetForm();
  };

  if (bannersLoading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞–º–∏</h2>
        <Button
          onClick={() => setIsCreating(true)}
          className="flex items-center gap-2"
          disabled={isCreating || editingBanner}
        >
          <Plus className="w-4 h-4" />
          –°–æ–∑–¥–∞—Ç—å –±–∞–Ω–Ω–µ—Ä
        </Button>
      </div>

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {(isCreating || editingBanner) && (
        <Card>
          <CardHeader>
            <CardTitle>
              {editingBanner ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–Ω–µ—Ä' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä'}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                  <Input
                    id="title"
                    value={formData.title}
                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                    placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–∞–Ω–Ω–µ—Ä–∞"
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="position">–ü–æ–∑–∏—Ü–∏—è</Label>
                  <Select 
                    value={formData.position} 
                    onValueChange={(value) => setFormData({ ...formData, position: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="main">–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</SelectItem>
                      <SelectItem value="sidebar">–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å</SelectItem>
                      <SelectItem value="footer">–ü–æ–¥–≤–∞–ª</SelectItem>
                      <SelectItem value="header">–ó–∞–≥–æ–ª–æ–≤–æ–∫</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞"
                  rows={3}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="imageUrl">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
                <Input
                  id="imageUrl"
                  value={formData.imageUrl}
                  onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}
                  placeholder="https://example.com/image.jpg"
                  type="url"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="linkUrl">–°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
                <Input
                  id="linkUrl"
                  value={formData.linkUrl}
                  onChange={(e) => setFormData({ ...formData, linkUrl: e.target.value })}
                  placeholder="https://example.com"
                  type="url"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="order">–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
                  <Input
                    id="order"
                    type="number"
                    value={formData.order}
                    onChange={(e) => setFormData({ ...formData, order: parseInt(e.target.value) || 1 })}
                    min="1"
                  />
                </div>

                <div className="flex items-center space-x-2 pt-6">
                  <input
                    type="checkbox"
                    id="isActive"
                    checked={formData.isActive}
                    onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}
                    className="rounded border-gray-300"
                  />
                  <Label htmlFor="isActive">–ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä</Label>
                </div>
              </div>

              <div className="flex gap-2 pt-4">
                <Button
                  type="submit"
                  disabled={createBannerMutation.isPending || updateBannerMutation.isPending}
                >
                  {createBannerMutation.isPending || updateBannerMutation.isPending
                    ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...'
                    : editingBanner
                    ? '–û–±–Ω–æ–≤–∏—Ç—å'
                    : '–°–æ–∑–¥–∞—Ç—å'}
                </Button>
                <Button type="button" variant="outline" onClick={handleCancel}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      )}

      {/* –°–ø–∏—Å–æ–∫ –±–∞–Ω–Ω–µ—Ä–æ–≤ */}
      <div className="grid gap-4">
        {banners && banners.length > 0 ? (
          banners.map((banner: any) => (
            <Card key={banner.id} className="overflow-hidden">
              <CardContent className="p-6">
                <div className="flex items-start justify-between gap-4">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <h3 className="text-lg font-semibold">{banner.title}</h3>
                      <Badge variant={banner.isActive ? 'default' : 'secondary'}>
                        {banner.isActive ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
                      </Badge>
                      <Badge variant="outline">{banner.position}</Badge>
                    </div>
                    
                    {banner.description && (
                      <p className="text-gray-600 dark:text-gray-400 mb-3">{banner.description}</p>
                    )}
                    
                    <div className="flex items-center gap-4 text-sm text-gray-500">
                      {banner.imageUrl && (
                        <span className="flex items-center gap-1">
                          <Image className="w-4 h-4" />
                          –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        </span>
                      )}
                      {banner.linkUrl && (
                        <span className="flex items-center gap-1">
                          <Eye className="w-4 h-4" />
                          –°—Å—ã–ª–∫–∞
                        </span>
                      )}
                      <span>–ü–æ—Ä—è–¥–æ–∫: {banner.order}</span>
                    </div>
                  </div>
                  
                  <div className="flex gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleEdit(banner)}
                      disabled={isCreating || editingBanner}
                    >
                      <Edit className="w-4 h-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => deleteBannerMutation.mutate(banner.id)}
                      disabled={deleteBannerMutation.isPending}
                      className="text-red-600 hover:text-red-700"
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </div>

                {banner.imageUrl && (
                  <div className="mt-4 pt-4 border-t">
                    <img
                      src={banner.imageUrl}
                      alt={banner.title}
                      className="max-w-xs h-20 object-cover rounded border"
                      onError={(e) => {
                        (e.target as HTMLImageElement).style.display = 'none';
                      }}
                    />
                  </div>
                )}
              </CardContent>
            </Card>
          ))
        ) : (
          <Card>
            <CardContent className="text-center py-8">
              <Image className="w-12 h-12 mx-auto mb-4 text-gray-300" />
              <p className="text-gray-500">–ë–∞–Ω–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p className="text-sm text-gray-400 mt-1">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±–∞–Ω–Ω–µ—Ä</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª—å—é
function AdvertisementCarouselManagement() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [editingItem, setEditingItem] = useState<AdvertisementCarousel | null>(null);
  const [deletingItem, setDeletingItem] = useState<AdvertisementCarousel | null>(null);
  const [formKey, setFormKey] = useState(0); // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    imageUrl: '',
    linkUrl: '',
    buttonText: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
    order: 1,
    isActive: true,
  });

  const { data: carouselItems = [], isLoading } = useQuery<AdvertisementCarousel[]>({
    queryKey: ['/api/admin/advertisement-carousel'],
    staleTime: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞ - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    refetchInterval: 5000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  });



  const createItemMutation = useMutation({
    mutationFn: async (data: any) => {
      const response = await fetch('/api/admin/advertisement-carousel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error('Failed to create item');
      return response.json();
    },
    onSuccess: () => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
      queryClient.removeQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
      queryClient.removeQueries({ queryKey: ['/api/advertisement-carousel'] });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
      queryClient.invalidateQueries({ queryKey: ['/api/advertisement-carousel'] });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      queryClient.refetchQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
      
      handleCancel();
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–†–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
      });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        variant: "destructive",
      });
    },
  });

  const updateItemMutation = useMutation({
    mutationFn: async (data: any) => {
      const response = await fetch(`/api/admin/advertisement-carousel/${editingItem?.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error('Failed to update item');
      return response.json();
    },
    onSuccess: async (updatedItem) => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
      queryClient.removeQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
      queryClient.removeQueries({ queryKey: ['/api/advertisement-carousel'] });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
      queryClient.invalidateQueries({ queryKey: ['/api/advertisement-carousel'] });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await queryClient.refetchQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      if (editingItem) {
        const response = await fetch(`/api/admin/advertisement-carousel/${editingItem.id}`);
        if (response.ok) {
          const freshItem = await response.json();
          setEditingItem(freshItem);
          setFormData({
            title: freshItem.title,
            description: freshItem.description || '',
            imageUrl: freshItem.imageUrl,
            linkUrl: freshItem.linkUrl || '',
            buttonText: freshItem.buttonText || '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
            order: freshItem.order || 1,
            isActive: freshItem.isActive || true,
          });
          setFormKey(prev => prev + 1); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        }
      }
      
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–†–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        variant: "destructive",
      });
    },
  });

  const deleteItemMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await fetch(`/api/admin/advertisement-carousel/${id}`, {
        method: 'DELETE',
      });
      if (!response.ok) throw new Error('Failed to delete item');
    },
    onSuccess: () => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
      queryClient.removeQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
      queryClient.removeQueries({ queryKey: ['/api/advertisement-carousel'] });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
      queryClient.invalidateQueries({ queryKey: ['/api/advertisement-carousel'] });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      queryClient.refetchQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
      
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–†–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
      });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        variant: "destructive",
      });
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (editingItem) {
      updateItemMutation.mutate(formData);
    } else {
      createItemMutation.mutate(formData);
    }
  };

  const handleEdit = async (item: AdvertisementCarousel) => {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const response = await fetch(`/api/admin/advertisement-carousel/${item.id}`);
    if (response.ok) {
      const freshItem = await response.json();
      setEditingItem(freshItem);
      setFormData({
        title: freshItem.title,
        description: freshItem.description || '',
        imageUrl: freshItem.imageUrl,
        linkUrl: freshItem.linkUrl || '',
        buttonText: freshItem.buttonText || '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
        order: freshItem.order || 1,
        isActive: freshItem.isActive,
      });
    } else {
      // Fallback –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
      setEditingItem(item);
      setFormData({
        title: item.title,
        description: item.description || '',
        imageUrl: item.imageUrl,
        linkUrl: item.linkUrl || '',
        buttonText: item.buttonText || '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
        order: item.order || 1,
        isActive: item.isActive || true,
      });
    }
  };

  const handleCancel = () => {
    setEditingItem(null);
    setFormData({
      title: '',
      description: '',
      imageUrl: '',
      linkUrl: '',
      buttonText: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
      order: 1,
      isActive: true,
    });
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    queryClient.refetchQueries({ queryKey: ['/api/admin/advertisement-carousel'] });
  };

  const handleDelete = (item: AdvertisementCarousel) => {
    setDeletingItem(item);
  };

  const confirmDelete = () => {
    if (deletingItem) {
      deleteItemMutation.mutate(deletingItem.id);
      setDeletingItem(null);
    }
  };

  if (isLoading) {
    return <div className="text-center py-8">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <p className="text-sm text-gray-600 dark:text-gray-400">
          –ú–∞–∫—Å–∏–º—É–º 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        </p>
        <Button onClick={() => setEditingItem({} as AdvertisementCarousel)}>
          <Plus className="w-4 h-4 mr-2" />
          –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        </Button>
      </div>

      {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {editingItem && (
        <Card key={formKey}>
          <CardHeader>
            <CardTitle>
              {editingItem.id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' : '–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                  <Input
                    id="title"
                    value={formData.title}
                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                    placeholder="–ü—Ä–∏–≤–µ–¥–∏ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫"
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="buttonText">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</Label>
                  <Input
                    id="buttonText"
                    value={formData.buttonText}
                    onChange={(e) => setFormData({ ...formData, buttonText: e.target.value })}
                    placeholder="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è..."
                  rows={3}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="imageUrl">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
                <Input
                  id="imageUrl"
                  value={formData.imageUrl}
                  onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}
                  placeholder="https://example.com/image.jpg"
                  type="url"
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="linkUrl">–°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
                <Input
                  id="linkUrl"
                  value={formData.linkUrl}
                  onChange={(e) => setFormData({ ...formData, linkUrl: e.target.value })}
                  placeholder="home, sell, favorites (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è /)"
                />
                <p className="text-xs text-gray-500 dark:text-gray-400">
                  –ü—Ä–∏–º–µ—Ä—ã: home ‚Üí /home, sell ‚Üí /sell, favorites ‚Üí /favorites
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="order">–ü–æ—Ä—è–¥–æ–∫ –ø–æ–∫–∞–∑–∞ (1-3)</Label>
                  <Input
                    id="order"
                    type="number"
                    value={formData.order}
                    onChange={(e) => setFormData({ ...formData, order: parseInt(e.target.value) || 1 })}
                    min="1"
                    max="3"
                    required
                  />
                </div>

                <div className="flex items-center space-x-2 pt-6">
                  <input
                    type="checkbox"
                    id="isActive"
                    checked={formData.isActive}
                    onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}
                    className="rounded border-gray-300"
                  />
                  <Label htmlFor="isActive">–ê–∫—Ç–∏–≤–Ω–æ–µ</Label>
                </div>
              </div>

              <div className="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700 flex gap-3">
                <Button
                  type="submit"
                  disabled={createItemMutation.isPending || updateItemMutation.isPending}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 text-base font-medium"
                >
                  {createItemMutation.isPending || updateItemMutation.isPending
                    ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...'
                    : editingItem.id
                    ? '–û–±–Ω–æ–≤–∏—Ç—å'
                    : '–°–æ–∑–¥–∞—Ç—å'}
                </Button>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={handleCancel}
                  className="px-6 py-2 text-base"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      )}

      {/* –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π */}
      <div className="grid gap-4">
        {carouselItems && carouselItems.length > 0 ? (
          carouselItems.map((item) => (
            <Card key={item.id} className={`${!item.isActive ? 'opacity-50' : ''}`}>
              <CardContent className="p-4">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <h3 className="font-semibold text-lg">{item.title}</h3>
                      <span className="text-sm bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
                        #{item.order}
                      </span>
                      {item.isActive && (
                        <span className="text-sm bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100 px-2 py-1 rounded">
                          –ê–∫—Ç–∏–≤–Ω–æ
                        </span>
                      )}
                    </div>
                    <p className="text-gray-600 dark:text-gray-400 mb-2">{item.description}</p>
                    <div className="text-sm text-gray-500">
                      <div>–ö–Ω–æ–ø–∫–∞: {item.buttonText}</div>
                      {item.linkUrl && <div>–°—Å—ã–ª–∫–∞: {item.linkUrl}</div>}
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleEdit(item)}
                    >
                      <Edit className="w-4 h-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleDelete(item)}
                      className="text-red-600 hover:text-red-700"
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </div>

                {item.imageUrl && (
                  <div className="mt-4 pt-4 border-t">
                    <img
                      src={item.imageUrl}
                      alt={item.title}
                      className="max-w-xs h-20 object-cover rounded border"
                      onError={(e) => {
                        (e.target as HTMLImageElement).style.display = 'none';
                      }}
                    />
                  </div>
                )}
              </CardContent>
            </Card>
          ))
        ) : (
          <Card>
            <CardContent className="text-center py-8">
              <Plus className="w-12 h-12 mx-auto mb-4 text-gray-300" />
              <p className="text-gray-500">–†–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p className="text-sm text-gray-400 mt-1">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</p>
            </CardContent>
          </Card>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <AlertDialog open={!!deletingItem} onOpenChange={() => setDeletingItem(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</AlertDialogTitle>
            <AlertDialogDescription>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "{deletingItem?.title}"?
              –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmDelete}
              className="bg-red-600 hover:bg-red-700"
            >
              –£–¥–∞–ª–∏—Ç—å
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function AdminStats() {
  const { data: stats, isLoading } = useQuery<AdminStatsData>({
    queryKey: ['/api/admin/stats'],
  });

  if (isLoading) {
    return <div className="text-center py-8">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>;
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</CardTitle>
          <UserIcon className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{stats?.totalUsers || 0}</div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã</CardTitle>
          <Car className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{stats?.activeAuctions || 0}</div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</CardTitle>
          <AlertCircle className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{stats?.pendingListings || 0}</div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö</CardTitle>
          <XCircle className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{stats?.bannedUsers || 0}</div>
        </CardContent>
      </Card>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–æ–º
function ArchiveManagement() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [deletingArchived, setDeletingArchived] = useState<any>(null);
  
  // –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const { data: archivedListings, isLoading: isLoadingArchived } = useQuery({
    queryKey: ['/api/archived-listings'],
    queryFn: async () => {
      const response = await fetch('/api/archived-listings');
      if (!response.ok) throw new Error('Failed to fetch archived listings');
      return response.json();
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
  const archiveExpiredMutation = useMutation({
    mutationFn: async () => {
      const response = await fetch('/api/archive-expired', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) throw new Error('Failed to archive expired listings');
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        description: `–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${data.archivedCount} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤`,
        variant: "default"
      });
      queryClient.invalidateQueries({ queryKey: ['/api/archived-listings'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞
  const restartListingMutation = useMutation({
    mutationFn: async (listingId: number) => {
      const response = await fetch(`/api/restart-listing/${listingId}`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'x-user-id': user?.userId?.toString() || user?.id?.toString() || '4',
          'x-user-email': user?.email || '+992 (90) 333-13-32@autoauction.tj'
        }
      });
      if (!response.ok) throw new Error('Failed to restart listing');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–ê—É–∫—Ü–∏–æ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω",
        description: "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –ª–æ—Ç–∞",
        variant: "default"
      });
      queryClient.invalidateQueries({ queryKey: ['/api/archived-listings'] });
      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
  const deleteArchivedMutation = useMutation({
    mutationFn: async (listingId: number) => {
      const response = await fetch(`/api/archived-listings/${listingId}`, {
        method: 'DELETE'
      });
      if (!response.ok) throw new Error('Failed to delete archived listing');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–ê—É–∫—Ü–∏–æ–Ω —É–¥–∞–ª–µ–Ω",
        description: "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞",
        variant: "default"
      });
      queryClient.invalidateQueries({ queryKey: ['/api/archived-listings'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  if (isLoadingArchived) {
    return (
      <div className="p-6 text-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
        <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">–ê—Ä—Ö–∏–≤ –∞—É–∫—Ü–∏–æ–Ω–æ–≤</h2>
          <p className="text-gray-600">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤</p>
        </div>
        <Button
          onClick={() => archiveExpiredMutation.mutate()}
          disabled={archiveExpiredMutation.isPending}
          className="bg-blue-600 hover:bg-blue-700"
        >
          {archiveExpiredMutation.isPending ? '–ê—Ä—Ö–∏–≤–∏—Ä—É—é...' : '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ'}
        </Button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-4">
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-600">
                {archivedListings?.length || 0}
              </div>
              <div className="text-sm text-gray-500">–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-green-600">
                {archivedListings?.filter((l: any) => l.currentBid)?.length || 0}
              </div>
              <div className="text-sm text-gray-500">–°–æ —Å—Ç–∞–≤–∫–∞–º–∏</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ */}
      <div className="space-y-4">
        {archivedListings && archivedListings.length > 0 ? (
          archivedListings.map((listing: any) => (
            <Card key={listing.id} className="border-red-200 dark:border-red-800">
              <CardContent className="p-4">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <h3 className="font-semibold text-lg">
                        {listing.make} {listing.model} ({listing.year})
                      </h3>
                      <Badge variant="secondary" className="bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100">
                        –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
                      </Badge>
                    </div>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm text-gray-600 dark:text-gray-400">
                      <div>–õ–æ—Ç: {listing.lotNumber}</div>
                      <div>–ü—Ä–æ–±–µ–≥: {listing.mileage.toLocaleString()} –∫–º</div>
                      <div>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: ${listing.startingPrice}</div>
                      <div>
                        {listing.currentBid ? (
                          <span className="text-green-600 font-semibold">
                            –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${listing.currentBid}
                          </span>
                        ) : (
                          <span className="text-gray-500">–ë–µ–∑ —Å—Ç–∞–≤–æ–∫</span>
                        )}
                      </div>
                    </div>
                    {listing.endedAt && (
                      <div className="mt-2 text-xs text-gray-500">
                        –ó–∞–≤–µ—Ä—à–µ–Ω: {new Date(listing.endedAt).toLocaleString('ru-RU')}
                      </div>
                    )}
                  </div>
                  <div className="flex gap-2 ml-4">
                    <Button
                      size="sm"
                      onClick={() => restartListingMutation.mutate(listing.id)}
                      disabled={restartListingMutation.isPending}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
                    </Button>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          size="sm"
                          variant="destructive"
                          disabled={deleteArchivedMutation.isPending}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>–£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞</AlertDialogTitle>
                          <AlertDialogDescription>
                            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞ —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω "{listing.make} {listing.model}"? 
                            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() => deleteArchivedMutation.mutate(listing.id)}
                            className="bg-red-600 hover:bg-red-700"
                          >
                            –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        ) : (
          <Card>
            <CardContent className="p-8 text-center">
              <Trash2 className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-600 mb-2">
                –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç
              </h3>
              <p className="text-gray-500">
                –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å
              </p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞–≤–µ—Ä—Ö
// –†–∞–∑–¥–µ–ª "–í—ã–∏–≥—Ä—ã—à–∏"
function WinsSection() {
  const { data: wins = [], isLoading, refetch } = useQuery({
    queryKey: ['/api/admin/wins'],
    staleTime: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
    refetchInterval: 3000, // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
  });

  const formatDate = (date: string | Date) => {
    return new Date(date).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatPrice = (price: number | string) => {
    return `${Number(price).toLocaleString()} —Å–æ–º–æ–Ω–∏`;
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Award className="h-5 w-5" />
              –í—Å–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
            </CardTitle>
            <CardDescription>
              –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π...</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Award className="h-5 w-5" />
                –í—Å–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ ({wins.length})
              </CardTitle>
              <CardDescription>
                –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö
              </CardDescription>
            </div>
            <Button onClick={() => refetch()} size="sm" variant="outline">
              <RefreshCw className="h-4 w-4 mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {wins.length === 0 ? (
            <div className="text-center py-8">
              <Award className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-600">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏</p>
            </div>
          ) : (
            <div className="space-y-4">
              {wins.map((win: any) => (
                <div key={win.id} className="border rounded-lg p-4 bg-gradient-to-r from-yellow-50 to-orange-50 border-yellow-200">
                  <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">
                          üèÜ –ü–û–ë–ï–î–ê
                        </Badge>
                        <span className="text-sm text-gray-600">
                          –õ–æ—Ç #{win.listing.lotNumber}
                        </span>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <h3 className="font-semibold text-lg">
                            {win.listing.make} {win.listing.model}
                          </h3>
                          <p className="text-gray-600">
                            {win.listing.year} –≥–æ–¥
                          </p>
                        </div>
                        
                        <div>
                          <p className="font-semibold text-green-600">
                            –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {win.winnerName}
                          </p>
                          {win.winnerPhone && (
                            <p className="text-sm text-gray-600">
                              üìû {win.winnerPhone}
                            </p>
                          )}
                        </div>
                        
                        <div>
                          <p className="font-bold text-lg text-green-600">
                            {formatPrice(win.winningBid)}
                          </p>
                          <p className="text-sm text-gray-600">
                            {formatDate(win.wonAt)}
                          </p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex-shrink-0">
                      {win.listing.photos && win.listing.photos.length > 0 ? (
                        <img 
                          src={win.listing.photos[0]} 
                          alt={`${win.listing.make} ${win.listing.model}`}
                          className="w-20 h-16 object-cover rounded-lg border-2 border-yellow-300"
                        />
                      ) : (
                        <div className="w-20 h-16 bg-gray-200 rounded-lg flex items-center justify-center border-2 border-yellow-300">
                          <Car className="h-8 w-8 text-gray-400" />
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

function ScrollToTopButton() {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const toggleVisibility = () => {
      if (window.pageYOffset > 300) {
        setIsVisible(true);
      } else {
        setIsVisible(false);
      }
    };

    window.addEventListener('scroll', toggleVisibility);
    return () => window.removeEventListener('scroll', toggleVisibility);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };

  return (
    <>
      {isVisible && (
        <Button
          onClick={scrollToTop}
          className="fixed bottom-24 right-6 z-50 w-12 h-12 rounded-full shadow-lg bg-blue-600 hover:bg-blue-700 text-white p-0"
          size="sm"
        >
          <ChevronUp className="h-6 w-6" />
        </Button>
      )}
    </>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
function ReferralsSection() {
  const { data: users = [], isLoading } = useQuery<User[]>({
    queryKey: ['/api/admin/users'],
    staleTime: 1000,
    refetchInterval: 5000,
  });

  if (isLoading) {
    return <div className="text-center py-8">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const referredUsers = users.filter(user => (user as any).isInvited);
  const referrers = users.filter(user => 
    referredUsers.some(ref => (ref as any).invitedBy === user?.phoneNumber)
  );

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
  const stats = {
    totalReferrals: referredUsers.length,
    activeReferrals: referredUsers.filter(user => user.isActive).length,
    uniqueReferrers: referrers.length
  };

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</p>
                <p className="text-2xl font-bold">{stats.totalReferrals}</p>
              </div>
              <Gift className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</p>
                <p className="text-2xl font-bold">{stats.activeReferrals}</p>
              </div>
              <UserIcon className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–ü—Ä–∏–≥–ª–∞—à–∞—é—â–∏—Ö</p>
                <p className="text-2xl font-bold">{stats.uniqueReferrers}</p>
              </div>
              <Award className="h-8 w-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ */}
      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</CardTitle>
          <CardDescription>
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
          </CardDescription>
        </CardHeader>
        <CardContent>
          {referredUsers.length > 0 ? (
            <div className="space-y-3">
              {referredUsers.map((user) => (
                <div key={user.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-3">
                      <div>
                        <p className="font-medium">{user.fullName || user?.phoneNumber}</p>
                        <p className="text-sm text-gray-600">
                          –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {(user as any).invitedBy}
                        </p>
                        <p className="text-xs text-gray-500">
                          –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {new Date(user.createdAt!).toLocaleDateString('ru-RU')}
                        </p>
                      </div>
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Badge variant={user.isActive ? 'default' : 'secondary'}>
                      {user.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </Badge>
                    <Badge variant="outline" className="text-green-600 border-green-300">
                      –†–µ—Ñ–µ—Ä–∞–ª
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500">
              <Gift className="w-12 h-12 mx-auto mb-4 text-gray-300" />
              <p>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
              <p className="text-sm mt-1">–ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –∑–¥–µ—Å—å</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏—Ö */}
      {referrers.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–µ</CardTitle>
            <CardDescription>
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –¥—Ä—É–≥–∏—Ö –≤ —Å–∏—Å—Ç–µ–º—É
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {referrers.map((referrer) => {
                const referredCount = referredUsers.filter(
                  ref => (ref as any).invitedBy === referrer.phoneNumber
                ).length;
                
                return (
                  <div key={referrer.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex-1">
                      <div className="flex items-center gap-3">
                        <div>
                          <p className="font-medium">{referrer.fullName || referrer.phoneNumber}</p>
                          <p className="text-sm text-gray-600">
                            {referrer.phoneNumber} ‚Ä¢ {referrer.role}
                          </p>
                          <p className="text-xs text-blue-600">
                            –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {referredCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª{referredCount === 1 ? '—è' : referredCount < 5 ? '–µ–π' : '–µ–π'}
                          </p>
                        </div>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Badge variant={referrer.isActive ? 'default' : 'secondary'}>
                        {referrer.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                      </Badge>
                      <Badge variant="outline" className="text-blue-600 border-blue-300">
                        –ü—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π
                      </Badge>
                    </div>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}