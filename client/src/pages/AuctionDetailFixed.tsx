import { useState, useEffect } from 'react';
import { useParams, useLocation } from 'wouter';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import type { User } from '@shared/schema';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { useAuctions } from '@/contexts/AuctionContext';
import { useFavorites } from '@/contexts/FavoritesContext';
import { useAuth } from '@/contexts/AuthContext';
import { useAuctionWebSocket } from '@/hooks/useAuctionWebSocket';
import { AutoImageCarousel } from '@/components/AutoImageCarousel';
import { BidConfirmationDialog } from '@/components/BidConfirmationDialog';
import { ReservePriceIndicator } from '@/components/ReservePriceIndicator';
import { 
  ArrowLeft, Car, Heart, Clock, TrendingUp, 
  Users, MapPin, Calendar, Gauge, Fuel, 
  Settings, Palette, Hash, Camera,
  ChevronLeft, ChevronRight
} from 'lucide-react';

export default function AuctionDetail() {
  const { id } = useParams();
  const [, setLocation] = useLocation();
  const [bidAmount, setBidAmount] = useState("");
  const [timeLeft, setTimeLeft] = useState({
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0
  });
  const [auctionEndTime, setAuctionEndTime] = useState<Date | null>(null);
  const [isTimerReady, setIsTimerReady] = useState(false);
  const [isGalleryOpen, setIsGalleryOpen] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [touchStart, setTouchStart] = useState<number | null>(null);
  const [touchEnd, setTouchEnd] = useState<number | null>(null);
  const [activeImageIndex, setActiveImageIndex] = useState(0);
  const [mouseStart, setMouseStart] = useState<number | null>(null);
  const [mouseEnd, setMouseEnd] = useState<number | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false);
  const [currentPrice, setCurrentPrice] = useState(0);
  const [showBidInput, setShowBidInput] = useState(false);
  const [isPlacingBid, setIsPlacingBid] = useState(false);
  const [imageLoadError, setImageLoadError] = useState(false);
  const [showActivationDialog, setShowActivationDialog] = useState(false);
  const [showBidConfirmation, setShowBidConfirmation] = useState(false);
  const [pendingBidAmount, setPendingBidAmount] = useState("");
  const [hasShownEndNotification, setHasShownEndNotification] = useState(false);
  
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const { 
    isConnected: wsConnected, 
    connectionQuality, 
    joinAuction, 
    leaveAuction, 
    lastBidUpdate,
    participantCount,
    isHotAuction 
  } = useAuctionWebSocket();

  // Translation functions for car characteristics
  const translateTransmission = (transmission: string) => {
    const translations = {
      'automatic': '–ê–≤—Ç–æ–º–∞—Ç',
      'manual': '–ú–µ—Ö–∞–Ω–∏–∫–∞', 
      'cvt': '–í–∞—Ä–∏–∞—Ç–æ—Ä'
    };
    return translations[transmission as keyof typeof translations] || transmission || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  };

  const translateFuelType = (fuelType: string) => {
    const translations = {
      'gasoline': '–ë–µ–Ω–∑–∏–Ω',
      'diesel': '–î–∏–∑–µ–ª—å',
      'gas': '–ì–∞–∑',
      'gas_gasoline': '–ì–∞–∑+–±–µ–Ω–∑–∏–Ω',
      'hybrid': '–ì–∏–±—Ä–∏–¥',
      'electric': '–≠–ª–µ–∫—Ç—Ä–æ'
    };
    return translations[fuelType as keyof typeof translations] || fuelType || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  const translateBodyType = (bodyType: string) => {
    const translations = {
      'sedan': '–°–µ–¥–∞–Ω',
      'crossover': '–ö—Ä–æ—Å—Å–æ–≤–µ—Ä',
      'suv': '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫',
      'hatchback': '–•—ç—Ç—á–±–µ–∫',
      'wagon': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
      'minivan': '–ú–∏–Ω–∏–≤–µ–Ω',
      'coupe': '–ö—É–ø–µ',
      'convertible': '–ö–∞–±—Ä–∏–æ–ª–µ—Ç',
      'pickup': '–ü–∏–∫–∞–ø'
    };
    return translations[bodyType as keyof typeof translations] || bodyType || '–ù–µ —É–∫–∞–∑–∞–Ω';
  };

  const translateDriveType = (driveType: string) => {
    const translations = {
      'front': '–ü–µ—Ä–µ–¥–Ω–∏–π',
      'rear': '–ó–∞–¥–Ω–∏–π', 
      'all': '–ü–æ–ª–Ω—ã–π'
    };
    return translations[driveType as keyof typeof translations] || driveType || '–ù–µ —É–∫–∞–∑–∞–Ω';
  };

  const translateCondition = (condition: string) => {
    const translations = {
      'excellent': '–û—Ç–ª–∏—á–Ω–æ–µ',
      'very_good': '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ', 
      'good': '–•–æ—Ä–æ—à–µ–µ',
      'satisfactory': '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ',
      'requires_repair': '–¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞',
      'accident': '–ü–æ—Å–ª–µ –î–¢–ü',
      'not_running': '–ù–µ –Ω–∞ —Ö–æ–¥—É'
    };
    return translations[condition as keyof typeof translations] || condition || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  const translateColor = (color: string) => {
    const translations = {
      'white': '–ë–µ–ª—ã–π',
      'black': '–ß–µ—Ä–Ω—ã–π',
      'silver': '–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π',
      'gray': '–°–µ—Ä—ã–π',
      'red': '–ö—Ä–∞—Å–Ω—ã–π',
      'blue': '–°–∏–Ω–∏–π',
      'green': '–ó–µ–ª–µ–Ω—ã–π',
      'yellow': '–ñ–µ–ª—Ç—ã–π',
      'brown': '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π',
      'gold': '–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π',
      'other': '–î—Ä—É–≥–æ–π'
    };
    return translations[color as keyof typeof translations] || color || '–ù–µ —É–∫–∞–∑–∞–Ω';
  };



  // Fetch current auction data
  const { data: currentAuction, refetch: refetchAuction } = useQuery({
    queryKey: [`/api/listings/${id}`],
    enabled: !!id,
    refetchInterval: 5000, // Refresh every 5 seconds for real-time updates
    refetchIntervalInBackground: true,
  });

  // Fetch real bidding history with auto-refresh
  const { data: bidsData } = useQuery({
    queryKey: [`/api/listings/${id}/bids`],
    enabled: !!id,
    refetchInterval: 3000, // Refresh every 3 seconds for real-time feel
    refetchIntervalInBackground: true,
    staleTime: 1000, // –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–≤–∞—é—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    gcTime: 5000, // –í –∫—ç—à–µ —Ç–æ–ª—å–∫–æ 5 —Å–µ–∫—É–Ω–¥
  });

  // Get unique bidder IDs to fetch user data
  const bidderIds = Array.isArray(bidsData) 
    ? (bidsData as any[]).map(bid => bid.bidderId).filter((id, index, arr) => arr.indexOf(id) === index)
    : [];

  // Use a single query to fetch all user data when bidderIds change
  const { data: usersData = [] } = useQuery({
    queryKey: ['users', bidderIds.sort().join(',')],
    queryFn: async () => {
      if (bidderIds.length === 0) return [];
      
      const userPromises = bidderIds.map(id => 
        fetch(`/api/users/${id}`).then(res => res.ok ? res.json() : null)
      );
      
      const users = await Promise.all(userPromises);
      return users.filter(Boolean);
    },
    enabled: bidderIds.length > 0,
  });

  // Create a map of user data by ID
  const userDataMap = usersData.reduce((acc: Record<number, any>, user: any) => {
    if (user && user.id) {
      acc[user.id] = user;
    }
    return acc;
  }, {});

  const { 
    auctions
  } = useAuctions();
  
  const { 
    isFavorite, 
    addToFavorites, 
    removeFromFavorites 
  } = useFavorites();
  
  const { user: currentUser } = useAuth();

  // Fetch current user activation status from database
  const { data: serverUser } = useQuery<User>({
    queryKey: [`/api/users/${(currentUser as any)?.userId}`],
    enabled: !!currentUser && !!(currentUser as any)?.userId,
  });

  // Use real auction data from database
  const auction = currentAuction as any;
  const sortedBids = Array.isArray(bidsData) ? bidsData : [];

  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const getCurrentBid = () => {
    if (Array.isArray(bidsData) && bidsData.length > 0) {
      // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
      const maxBid = Math.max(...bidsData.map((bid: any) => parseFloat(bid.amount)));
      return maxBid;
    }
    // –ï—Å–ª–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É
    return auction ? parseFloat(auction.startingPrice) : 0;
  };
  
  const currentBid = getCurrentBid();
  
  const condition = auction ? translateCondition(auction.condition) : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

  // All useEffect hooks - placed after state initialization but before conditional returns
  useEffect(() => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, []);

  useEffect(() => {
    if (!auctionEndTime && auction?.auctionEndTime) {
      const endTime = new Date(auction.auctionEndTime);
      setAuctionEndTime(endTime);
      setIsTimerReady(true);
    }
  }, [auction, auctionEndTime]);

  // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞—É–∫—Ü–∏–æ–Ω—É
  useEffect(() => {
    if (auction?.id) {
      joinAuction(parseInt(auction.id));
      
      return () => {
        leaveAuction();
      };
    }
  }, [auction?.id, joinAuction, leaveAuction]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ WebSocket
  useEffect(() => {
    if (lastBidUpdate && lastBidUpdate.listingId === parseInt(id || '0')) {
      console.log('üî• Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:', lastBidUpdate);
      
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
      if (lastBidUpdate.data?.bid?.amount) {
        const newAmount = parseFloat(lastBidUpdate.data.bid.amount);
        console.log('üí∞ –û–±–Ω–æ–≤–ª—è—é —Ü–µ–Ω—É —Å', currentPrice, '–Ω–∞', newAmount);
        setCurrentPrice(newAmount);
        setBidAmount((newAmount + 1000).toString());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
        toast({
          title: "üî• –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞!",
          description: `${newAmount.toLocaleString()} –°–æ–º–æ–Ω–∏`,
          duration: 2000,
        });
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      queryClient.removeQueries({ queryKey: [`/api/listings/${id}/bids`] });
      queryClient.removeQueries({ queryKey: [`/api/listings/${id}`] });
      queryClient.removeQueries({ queryKey: ['/api/listings'] });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      queryClient.invalidateQueries({ queryKey: [`/api/listings/${id}/bids`] });
      queryClient.invalidateQueries({ queryKey: [`/api/listings/${id}`] });
      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      refetchAuction();
    }
  }, [lastBidUpdate, id, queryClient, toast, refetchAuction]);

  useEffect(() => {
    const calculateTimeLeft = () => {
      if (!auctionEndTime) return;
      
      const difference = auctionEndTime.getTime() - new Date().getTime();
      
      if (difference > 0) {
        setTimeLeft({
          days: Math.floor(difference / (1000 * 60 * 60 * 24)),
          hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
          minutes: Math.floor((difference / 1000 / 60) % 60),
          seconds: Math.floor((difference / 1000) % 60)
        });
      } else {
        setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });
        if (isTimerReady) {
          handleAuctionEnd();
        }
      }
    };

    if (isTimerReady) {
      calculateTimeLeft();
      const timer = setInterval(calculateTimeLeft, 1000);
      return () => clearInterval(timer);
    }
  }, [auctionEndTime, isTimerReady]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–æ–∫

  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º currentPrice –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏
    if (currentBid && currentBid !== currentPrice) {
      setCurrentPrice(currentBid);
      setBidAmount((currentBid + 1000).toString());
    }
  }, [currentBid, currentPrice]);

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!isGalleryOpen) return;
      
      if (e.key === 'Escape') {
        closeGallery();
      } else if (e.key === 'ArrowLeft') {
        prevImage();
      } else if (e.key === 'ArrowRight') {
        nextImage();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isGalleryOpen]);

  // Function definitions
  const handleAuctionEnd = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if (hasShownEndNotification) {
      return;
    }

    const bidsArray = sortedBids || [];
    
    if (bidsArray.length === 0) {
      if (isFavorite(id!)) {
        removeFromFavorites(id!);
      }
      setHasShownEndNotification(true);
      return;
    }

    const highestBid = bidsArray[0];
    const userId = (currentUser as any)?.userId || (currentUser as any)?.id;
    const isWinner = currentUser && userId && highestBid.bidderId === userId;

    if (isWinner) {
      setShowConfetti(true);
      setTimeout(() => setShowConfetti(false), 5000);
      
      toast({
        title: "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
        description: `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω —Å–æ —Å—Ç–∞–≤–∫–æ–π ${parseFloat(highestBid.amount).toLocaleString()} –°–æ–º–æ–Ω–∏`,
        duration: 10000,
      });
    } else {
      if (isFavorite(id!)) {
        removeFromFavorites(id!);
        toast({
          title: "–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω",
          description: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ —ç—Ç–æ—Ç –∞—É–∫—Ü–∏–æ–Ω",
          duration: 5000,
        });
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ
    setHasShownEndNotification(true);
  };

  const calculateTimeLeft = (endDate: string) => {
    if (!endDate) return { days: 0, hours: 0, minutes: 0, seconds: 0 };
    
    const endTime = new Date(endDate);
    const currentTime = new Date();
    const difference = endTime.getTime() - currentTime.getTime();
    
    if (difference > 0) {
      return {
        days: Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
        minutes: Math.floor((difference / 1000 / 60) % 60),
        seconds: Math.floor((difference / 1000) % 60)
      };
    }
    
    return { days: 0, hours: 0, minutes: 0, seconds: 0 };
  };

  const handlePlaceBid = async () => {
    if (!currentUser) {
      toast({
        title: "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É",
        description: "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
        variant: "destructive",
        duration: 3000,
      });
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      setLocation('/login');
      return;
    }

    // Check if user is active before allowing bid - use server data if available
    const isUserActive = serverUser?.isActive ?? (currentUser as any)?.isActive ?? false;
    if (!isUserActive) {
      setShowActivationDialog(true);
      return;
    }

    const timeLeftData = calculateTimeLeft(auction.auctionEndTime);
    const isAuctionEnded = timeLeftData.days === 0 && timeLeftData.hours === 0 && 
                          timeLeftData.minutes === 0 && timeLeftData.seconds === 0;
    
    if (isAuctionEnded) {
      toast({
        title: "–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –≤—ã—Å–æ–∫–æ–π. –ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.",
        variant: "destructive",
        duration: 5000,
      });
      return;
    }
    
    const bidValue = parseFloat(bidAmount);
    const currentBidValue = (currentAuction as any)?.currentBid ? parseFloat((currentAuction as any).currentBid) : auction.currentBid;
    
    if (bidValue <= currentBidValue) {
      toast({
        title: "–°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è",
        description: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${(currentBidValue + 100).toLocaleString()} –°–æ–º–æ–Ω–∏`,
        variant: "destructive",
        duration: 3000,
      });
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    setPendingBidAmount(bidAmount);
    setShowBidConfirmation(true);
  };

  const handleConfirmBid = async () => {
    setShowBidConfirmation(false);
    setIsPlacingBid(true);
    
    const bidValue = parseFloat(pendingBidAmount);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∏–¥–∏—Ä—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–µ–π—á–∞—Å
    const userId = (currentUser as any)?.userId || (currentUser as any)?.id;
    const userIsCurrentLeader = sortedBids && sortedBids.length > 0 && sortedBids[0].bidderId === userId;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ª–∏–¥–∏—Ä—É–µ—Ç —Å–µ–π—á–∞—Å
    // –ï—Å–ª–∏ –ª–∏–¥–∏—Ä—É–µ—Ç - —Ç–∏—Ö–∞—è —Å—Ç–∞–≤–∫–∞ –±–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    const shouldShowEffects = !userIsCurrentLeader;
    
    if (shouldShowEffects) {
      // Play celebration sound and show confetti only for non-leaders
      setShowConfetti(true);
      
      try {
        import('@assets/celebration_1750167957407.mp3').then((audioModule) => {
          const audio = new Audio(audioModule.default);
          audio.volume = 0.7;
          audio.play().catch(() => {
            console.log('Audio playback failed, using fallback');
            // Fallback to generated sound if custom audio fails
            try {
              const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
              const duration = 1.5;
              const sampleRate = audioContext.sampleRate;
              const buffer = audioContext.createBuffer(1, duration * sampleRate, sampleRate);
              const data = buffer.getChannelData(0);
              
              for (let i = 0; i < data.length; i++) {
                const t = i / sampleRate;
                const envelope = Math.exp(-t * 3) * (1 - Math.exp(-t * 10));
                const freq1 = 440 * (1 + t * 0.8);
                const freq2 = 550 * (1 + t * 0.6); 
                const wave = Math.sin(2 * Math.PI * freq1 * t) * 0.3 + Math.sin(2 * Math.PI * freq2 * t) * 0.2;
                data[i] = wave * envelope * 0.15;
              }
              
              const source = audioContext.createBufferSource();
              source.buffer = buffer;
              source.connect(audioContext.destination);
              source.start();
            } catch (fallbackError) {
              console.log('Fallback audio also failed');
            }
          });
        }).catch(() => {
          console.log('Custom audio import failed, using fallback');
          // Fallback to generated sound
          try {
            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
            const duration = 1.5;
            const sampleRate = audioContext.sampleRate;
            const buffer = audioContext.createBuffer(1, duration * sampleRate, sampleRate);
            const data = buffer.getChannelData(0);
            
            for (let i = 0; i < data.length; i++) {
              const t = i / sampleRate;
              const envelope = Math.exp(-t * 3) * (1 - Math.exp(-t * 10));
              const freq1 = 440 * (1 + t * 0.8);
              const freq2 = 550 * (1 + t * 0.6); 
              const wave = Math.sin(2 * Math.PI * freq1 * t) * 0.3 + Math.sin(2 * Math.PI * freq2 * t) * 0.2;
              data[i] = wave * envelope * 0.15;
            }
            
            const source = audioContext.createBufferSource();
            source.buffer = buffer;
            source.connect(audioContext.destination);
            source.start();
          } catch (fallbackError) {
            console.log('All audio options failed');
          }
        });
      } catch (e) {
        console.log('Audio system not available');
      }
      
      setTimeout(() => setShowConfetti(false), 1500);
    }
    
    try {
      if (!userId) {
        console.error('User ID not found in auth context:', currentUser);
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.",
          variant: "destructive",
        });
        return;
      }

      // Place bid using API
      const response = await fetch(`/api/listings/${id}/bids`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: bidValue.toString(),
          bidderId: userId,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        if (response.status === 403 && errorData.error === "Account not activated") {
          // Show activation dialog
          setShowActivationDialog(true);
          return;
        }
        
        // Handle specific error types with user-friendly messages
        if (errorData.error === "Already highest bidder") {
          toast({
            title: "–í—ã —É–∂–µ –ª–∏–¥–∏—Ä—É–µ—Ç–µ",
            description: "–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ –¥–∞–Ω–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ.",
            variant: "destructive",
            duration: 4000,
          });
          return;
        } else if (errorData.error === "Bid too low") {
          toast({
            title: "–°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è",
            description: "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏.",
            variant: "destructive",
            duration: 4000,
          });
          return;
        }
        
        throw new Error(errorData.message || 'Failed to place bid');
      }
      
      // –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (userIsCurrentLeader) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∏–¥–∏—Ä—É–µ—Ç - —Ç–∏—Ö–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        toast({
          title: "–í—ã –ª–∏–¥–∏—Ä—É–µ—Ç–µ",
          description: `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ${bidValue.toLocaleString()} –°–æ–º–æ–Ω–∏ –ø—Ä–∏–Ω—è—Ç–∞.`,
          duration: 2000,
        });
      } else {
        // –û–±—ã—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        toast({
          title: "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
          description: `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ${bidValue.toLocaleString()} –°–æ–º–æ–Ω–∏ –ø—Ä–∏–Ω—è—Ç–∞.`,
          duration: 2000,
        });
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏
      if (!isFavorite(id!)) {
        addToFavorites(id!);
        toast({
          title: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
          description: "–ê—É–∫—Ü–∏–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
          duration: 2000,
        });
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
      queryClient.setQueryData([`/api/listings/${id}`], (oldData: any) => {
        if (oldData) {
          return {
            ...oldData,
            currentBid: bidValue.toString(),
            bidCount: (oldData.bidCount || 0) + 1
          };
        }
        return oldData;
      });
      

      
      setBidAmount((bidValue + 1000).toString());
      setShowBidInput(false);
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
      queryClient.setQueryData(['/api/listings'], (oldData: any) => {
        if (oldData && Array.isArray(oldData)) {
          return oldData.map((listing: any) => 
            listing.id === parseInt(id!) 
              ? { ...listing, currentBid: bidValue.toString(), bidCount: (listing.bidCount || 0) + 1 }
              : listing
          );
        }
        return oldData;
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      queryClient.invalidateQueries({ queryKey: [`/api/listings/${id}`] });
      queryClient.invalidateQueries({ queryKey: [`/api/listings/${id}/bids`] });
      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });
      
    } catch (error) {
      console.error('Error placing bid:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive",
        duration: 3000,
      });
    } finally {
      setIsPlacingBid(false);
      setBidAmount("");
      setPendingBidAmount("");
    }
  };

  const handleCancelBid = () => {
    setShowBidConfirmation(false);
    setPendingBidAmount("");
  };

  const handleFavoriteToggle = async () => {
    if (!currentUser) {
      toast({
        title: "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É",
        description: "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
        variant: "destructive",
        duration: 3000,
      });
      return;
    }

    try {
      if (isFavorite(id!)) {
        await removeFromFavorites(id!);
        toast({
          title: "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
          description: "–ê—É–∫—Ü–∏–æ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
          duration: 2000,
        });
      } else {
        await addToFavorites(id!);
        toast({
          title: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
          description: "–ê—É–∫—Ü–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
          duration: 2000,
        });
      }
    } catch (error) {
      console.error('Error toggling favorite:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
        variant: "destructive",
        duration: 3000,
      });
    }
  };

  const openGallery = (index: number) => {
    setCurrentImageIndex(index);
    setIsGalleryOpen(true);
  };

  const closeGallery = () => {
    setIsGalleryOpen(false);
  };

  const nextImage = () => {
    if (auction?.photos && auction.photos.length > 1) {
      setCurrentImageIndex((prev) => (prev + 1) % auction.photos.length);
    }
  };

  const prevImage = () => {
    if (auction?.photos && auction.photos.length > 1) {
      setCurrentImageIndex((prev) => (prev - 1 + auction.photos.length) % auction.photos.length);
    }
  };

  // Touch and mouse handlers
  const minSwipeDistance = 50;

  const onTouchStart = (e: React.TouchEvent) => {
    setTouchEnd(null);
    setTouchStart(e.targetTouches[0].clientX);
  };

  const onTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const onTouchEnd = () => {
    if (!touchStart || !touchEnd) return;
    
    const distance = touchStart - touchEnd;
    const isLeftSwipe = distance > minSwipeDistance;
    const isRightSwipe = distance < -minSwipeDistance;

    if (isLeftSwipe) {
      nextImage();
    } else if (isRightSwipe) {
      prevImage();
    }
  };

  const onMouseDown = (e: React.MouseEvent) => {
    setMouseEnd(null);
    setMouseStart(e.clientX);
    setIsDragging(true);
  };

  const onMouseMove = (e: React.MouseEvent) => {
    if (!isDragging) return;
    setMouseEnd(e.clientX);
  };

  const onMouseUp = () => {
    if (!mouseStart || !mouseEnd || !isDragging) {
      setIsDragging(false);
      return;
    }
    
    const distance = mouseStart - mouseEnd;
    const isLeftSwipe = distance > minSwipeDistance;
    const isRightSwipe = distance < -minSwipeDistance;

    if (isLeftSwipe) {
      nextImage();
    } else if (isRightSwipe) {
      prevImage();
    }
    
    setIsDragging(false);
  };

  const onMouseLeave = () => {
    setIsDragging(false);
  };

  // Skip loading screen for faster navigation
  if (!auction) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 page-content">
      {/* Header */}
      <div className="bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Button
              variant="ghost"
              onClick={() => setLocation("/")}
              className="hover:bg-blue-100 dark:hover:bg-gray-700"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥ –∫ –∞—É–∫—Ü–∏–æ–Ω–∞–º
            </Button>
            
            <div className="flex items-center gap-2">
              <Button 
                variant="ghost" 
                size="sm"
                onClick={handleFavoriteToggle}
              >
                <Heart className={`h-4 w-4 ${isFavorite(id!) ? 'fill-red-500 text-red-500' : ''}`} />
              </Button>
            </div>
          </div>
        </div>
      </div>

      <main className="container mx-auto px-4 py-8 grid lg:grid-cols-3 gap-8">
        {/* Left Column - Images */}
        <div className="lg:col-span-2">
          <Card className="overflow-hidden relative">
            <div 
              className="h-64 cursor-pointer"
              onClick={() => openGallery(0)}
            >
              <AutoImageCarousel 
                images={auction?.photos || []} 
                alt={`${auction?.year} ${auction?.make} ${auction?.model}`}
                className="h-64"
                autoPlayInterval={3000}
              />
            </div>

            <div className="absolute bottom-4 left-4 bg-black/50 text-white px-2 py-1 rounded text-sm">
              –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∞–ª–µ—Ä–µ–∏
            </div>
            <div className="absolute bottom-4 right-4 bg-black/50 text-white px-2 py-1 rounded text-sm">
              {auction?.photos?.length || 0} —Ñ–æ—Ç–æ
            </div>
          </Card>

          <Card className="overflow-hidden">
            <CardHeader className="bg-gradient-to-r from-blue-50 to-indigo-50 border-b">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                  <Car className="w-5 h-5 text-blue-600" />
                </div>
                <div>
                  <CardTitle className="text-xl text-gray-900">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</CardTitle>
                  <p className="text-sm text-gray-600 mt-1">–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ</p>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-6">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
              <div className="mb-6 p-4 bg-gray-50 rounded-xl">
                <div className="flex items-center justify-between mb-2">
                  <h1 className="text-2xl font-bold text-gray-900">
                    {auction.make} {auction.model}
                  </h1>
                  <Badge className="bg-green-100 text-green-800 border-green-200">
                    –ê–∫—Ç–∏–≤–Ω—ã–π
                  </Badge>
                </div>
                <div className="flex flex-wrap items-center gap-2">
                  <Badge variant="outline" className="font-mono text-blue-700 bg-blue-50 border-blue-200">
                    –õ–æ—Ç ‚Ññ {auction.lotNumber}
                  </Badge>
                  {/* Electric car range - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ü–ï–†–í–´–ú –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π */}
                  {(auction.fuelType === '–≠–ª–µ–∫—Ç—Ä–æ' || auction.fuelType === 'electric') && auction.electricRange && (
                    <Badge variant="outline" className="text-blue-700 bg-blue-100 border-blue-200">
                      ‚ö° –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {auction.electricRange} –∫–º
                    </Badge>
                  )}
                  <Badge variant="outline" className={`${auction.customsCleared ? 'text-green-700 bg-green-50 border-green-200' : 'text-red-700 bg-red-50 border-red-200'}`}>
                    {auction.customsCleared ? '‚úì –†–∞—Å—Ç–∞–º–æ–∂–µ–Ω' : '‚úó –ù–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–Ω'}
                  </Badge>
                  <Badge variant="outline" className={`${auction.recycled ? 'text-blue-700 bg-blue-50 border-blue-200' : 'text-orange-700 bg-orange-50 border-orange-200'}`}>
                    {auction.recycled ? '–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è: –µ—Å—Ç—å' : '–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è: –Ω–µ—Ç'}
                  </Badge>
                  <Badge variant="outline" className={`${auction.technicalInspectionValid ? 'text-purple-700 bg-purple-50 border-purple-200' : 'text-gray-700 bg-gray-50 border-gray-200'}`}>
                    {auction.technicalInspectionValid ? `–¢–µ—Ö–æ—Å–º–æ—Ç—Ä –¥–æ ${auction.technicalInspectionDate}` : '–¢–µ—Ö–æ—Å–º–æ—Ç—Ä: –Ω–µ—Ç'}
                  </Badge>
                  <Badge variant="outline" className={`${auction.tinted ? 'text-indigo-700 bg-indigo-50 border-indigo-200' : 'text-gray-700 bg-gray-50 border-gray-200'}`}>
                    {auction.tinted ? `–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ (${auction.tintingDate || '–¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})` : '–¢–æ–Ω–∏—Ä–æ–≤–∫–∞: –Ω–µ—Ç'}
                  </Badge>
                </div>
              </div>

              {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                  <Settings className="w-5 h-5 text-blue-600" />
                  –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞</span>
                    <span className="font-semibold text-gray-900">{auction.year}</span>
                  </div>
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">–ü—Ä–æ–±–µ–≥</span>
                    <span className="font-semibold text-gray-900">{auction.mileage?.toLocaleString()} –∫–º</span>
                  </div>
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">–°–æ—Å—Ç–æ—è–Ω–∏–µ</span>
                    <span className="font-semibold text-gray-900">{translateCondition(auction.condition)}</span>
                  </div>
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">–î–≤–∏–≥–∞—Ç–µ–ª—å</span>
                    <span className="font-semibold text-gray-900">{auction.engine || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">–ö–æ—Ä–æ–±–∫–∞</span>
                    <span className="font-semibold text-gray-900">{translateTransmission(auction.transmission)}</span>
                  </div>
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">–ü—Ä–∏–≤–æ–¥</span>
                    <span className="font-semibold text-gray-900">{translateDriveType(auction.driveType)}</span>
                  </div>
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">–¢–æ–ø–ª–∏–≤–æ</span>
                    <span className="font-semibold text-gray-900">{translateFuelType(auction.fuelType)}</span>
                  </div>
                  {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è */}
                  {(auction.fuelType === '–≠–ª–µ–∫—Ç—Ä–æ' || auction.fuelType === 'electric') && (
                    <>
                      {auction.batteryCapacity && (
                        <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-blue-50 border border-blue-200">
                          <span className="text-blue-700 font-medium">–ë–∞—Ç–∞—Ä–µ—è</span>
                          <span className="font-semibold text-blue-900">{auction.batteryCapacity} –∫–í—Ç¬∑—á</span>
                        </div>
                      )}
                      {auction.electricRange && (
                        <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-blue-50 border border-blue-200">
                          <span className="text-blue-700 font-medium">–ó–∞–ø–∞—Å —Ö–æ–¥–∞</span>
                          <span className="font-semibold text-blue-900">{auction.electricRange} –∫–º</span>
                        </div>
                      )}
                    </>
                  )}
                </div>
              </div>

              {/* –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                  <Palette className="w-5 h-5 text-blue-600" />
                  –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">–ö—É–∑–æ–≤</span>
                    <span className="font-semibold text-gray-900">{translateBodyType(auction.bodyType)}</span>
                  </div>
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">–¶–≤–µ—Ç</span>
                    <span className="font-semibold text-gray-900">{translateColor(auction.color)}</span>
                  </div>
                  <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                    <span className="text-gray-600 font-medium">VIN</span>
                    <span className="font-semibold text-gray-900 font-mono text-sm">{auction.vin || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>

                </div>
              </div>

              {/* –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                  <MapPin className="w-5 h-5 text-blue-600" />
                  –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                </h3>
                <div className="flex justify-between items-center py-2 px-3 rounded-lg bg-white border border-gray-100">
                  <span className="text-gray-600 font-medium">–ì–æ—Ä–æ–¥</span>
                  <span className="font-semibold text-gray-900">{auction.location || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Right Column - Auction Info */}
        <div className="space-y-6">
          {/* Bidding Card */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-green-600" />
                –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <div className="text-3xl font-bold text-green-600">
                  {currentBid.toLocaleString()} –°–æ–º–æ–Ω–∏
                </div>
                <p className="text-sm text-gray-600 mt-1">
                  –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {parseFloat(auction.startingPrice).toLocaleString()} –°–æ–º–æ–Ω–∏
                </p>
                
                {/* Reserve Price Indicator */}
                <div className="mt-3">
                  <ReservePriceIndicator
                    reservePrice={auction.reservePrice}
                    currentBid={currentBid.toString()}
                    startingPrice={auction.startingPrice}
                    size="md"
                    showProgress={false}
                  />
                </div>
              </div>

              {/* Auction Timer or Winner Congratulations */}
              {(() => {
                const isAuctionEnded = auction.status === 'ended' || auction.status === 'archived';
                const highestBid = sortedBids && sortedBids.length > 0 ? sortedBids[0] : null;
                const userId = (currentUser as any)?.userId || (currentUser as any)?.id;
                const isWinner = isAuctionEnded && highestBid && userId && highestBid.bidderId === userId;
                
                if (isAuctionEnded && isWinner) {
                  return (
                    <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-4 rounded-lg border border-green-200">
                      <div className="flex items-center gap-2 mb-3">
                        <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                          <span className="text-white font-bold text-lg">üèÜ</span>
                        </div>
                        <span className="font-bold text-green-800 text-lg">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</span>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-green-600 mb-1">
                          {parseFloat(highestBid.amount).toLocaleString()} –°–æ–º–æ–Ω–∏
                        </div>
                        <div className="text-sm text-green-700 mb-2">
                          –í–∞—à–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞
                        </div>
                        <div className="text-xs text-green-600">
                          –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω {new Date(auction.endDate || auction.auctionEndTime).toLocaleDateString('ru-RU')}
                        </div>
                      </div>
                    </div>
                  );
                } else if (isAuctionEnded) {
                  return (
                    <div className="bg-gradient-to-r from-gray-50 to-gray-100 p-4 rounded-lg border border-gray-200">
                      <div className="flex items-center gap-2 mb-2">
                        <Clock className="h-4 w-4 text-gray-600" />
                        <span className="font-medium text-gray-900">–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω</span>
                      </div>
                      <div className="text-center">
                        <div className="text-lg font-medium text-gray-600 mb-1">
                          –¢–æ—Ä–≥–∏ –æ–∫–æ–Ω—á–µ–Ω—ã
                        </div>
                        <div className="text-sm text-gray-500">
                          –ó–∞–≤–µ—Ä—à–µ–Ω {new Date(auction.endDate || auction.auctionEndTime).toLocaleDateString('ru-RU')}
                        </div>
                      </div>
                    </div>
                  );
                } else {
                  return (
                    <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <Clock className="h-4 w-4 text-blue-600" />
                        <span className="font-medium text-gray-900">–í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è</span>
                      </div>
                      <div className="grid grid-cols-4 gap-2 text-center">
                        <div>
                          <div className="text-xl font-bold text-blue-600">{timeLeft.days}</div>
                          <div className="text-xs text-gray-600">–¥–Ω–∏</div>
                        </div>
                        <div>
                          <div className="text-xl font-bold text-blue-600">{timeLeft.hours}</div>
                          <div className="text-xs text-gray-600">—á–∞—Å—ã</div>
                        </div>
                        <div>
                          <div className="text-xl font-bold text-blue-600">{timeLeft.minutes}</div>
                          <div className="text-xs text-gray-600">–º–∏–Ω</div>
                        </div>
                        <div>
                          <div className="text-xl font-bold text-blue-600">{timeLeft.seconds}</div>
                          <div className="text-xs text-gray-600">—Å–µ–∫</div>
                        </div>
                      </div>
                    </div>
                  );
                }
              })()}

              {/* Bidding Controls */}
              {(() => {
                const isAuctionEnded = auction.status === 'ended' || auction.status === 'archived';
                
                if (isAuctionEnded) {
                  return (
                    <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 text-center">
                      <div className="text-gray-600 font-medium mb-2">–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω</div>
                      <p className="text-sm text-gray-500">
                        –¢–æ—Ä–≥–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ª–æ—Ç—É –æ–∫–æ–Ω—á–µ–Ω—ã
                      </p>
                    </div>
                  );
                } else if (auction.sellerId === (currentUser as any)?.userId) {
                  return (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-center">
                      <div className="text-blue-800 font-medium mb-2">–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å</div>
                      <p className="text-sm text-blue-600">
                        –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                      </p>
                    </div>
                  );
                } else if (!showBidInput) {
                  return (
                    <Button 
                      onClick={() => {
                        if (!currentUser) {
                          toast({
                            title: "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É",
                            description: "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
                            variant: "destructive",
                            duration: 3000,
                          });
                          setLocation('/login');
                          return;
                        }
                        
                        // Check if user is active before showing bid input
                        if (!currentUser.isActive) {
                          setShowActivationDialog(true);
                          return;
                        }
                        
                        setShowBidInput(true);
                      }}
                      className="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-3"
                      size="lg"
                    >
                      –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
                    </Button>
                  );
                } else {
                  return (
                    <div className="space-y-3">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ (–º–∏–Ω–∏–º—É–º: {(currentBid + 100).toLocaleString()} –°–æ–º–æ–Ω–∏)
                        </label>
                        <div className="relative">
                          <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">–°–æ–º–æ–Ω–∏</span>
                          <input
                            type="number"
                            value={bidAmount}
                            onChange={(e) => setBidAmount(e.target.value)}
                            className="w-full pl-20 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                            min={currentBid + 100}
                            step="100"
                          />
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          onClick={handlePlaceBid}
                          disabled={isPlacingBid || !bidAmount || parseFloat(bidAmount) <= currentBid}
                          className="flex-1 bg-green-600 hover:bg-green-700 text-white"
                        >
                          {isPlacingBid ? "–†–∞–∑–º–µ—â–µ–Ω–∏–µ..." : "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞–≤–∫—É"}
                        </Button>
                        <Button
                          variant="outline"
                          onClick={() => setShowBidInput(false)}
                        >
                          –û—Ç–º–µ–Ω–∞
                        </Button>
                      </div>
                    </div>
                  );
                }
              })()}
            </CardContent>
          </Card>

          {/* Bidding History */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5 text-blue-600" />
                –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 max-h-64 overflow-y-auto">
                {sortedBids && sortedBids.length > 0 ? sortedBids.map((bid: any, index: number) => (
                  <div key={bid.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium ${
                        index === 0 ? 'bg-yellow-500' : 'bg-gray-400'
                      }`}>
                        {index + 1}
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">
                          {
                            userDataMap[bid.bidderId]?.fullName && userDataMap[bid.bidderId]?.fullName.trim() !== '' 
                              ? userDataMap[bid.bidderId]?.fullName 
                              : "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
                          }
                        </div>
                        <div className="text-sm text-gray-600">
                          {new Date(bid.createdAt).toLocaleString('ru-RU')}
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className={`font-bold ${index === 0 ? 'text-green-600' : 'text-gray-700'}`}>
                        {parseFloat(bid.amount).toLocaleString()} –°–æ–º–æ–Ω–∏
                      </div>
                      {index === 0 && (
                        <div className="text-xs text-green-600 font-medium">
                          –õ–∏–¥–∏—Ä—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞
                        </div>
                      )}
                    </div>
                  </div>
                )) : (
                  <div className="text-center py-8 text-gray-500">
                    <Users className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫</p>
                    <p className="text-sm">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </main>

      {/* Full Screen Gallery */}
      {isGalleryOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center">
          <div className="relative w-full h-full flex items-center justify-center">
            <button
              onClick={closeGallery}
              className="absolute top-4 right-4 text-white z-10 bg-black/50 p-3 rounded-full hover:bg-black/70 transition-colors"
            >
              ‚úï
            </button>
            
            <button
              onClick={prevImage}
              className="absolute left-4 text-white z-10 bg-black/50 p-3 rounded-full hover:bg-black/70 transition-colors"
            >
              <ChevronLeft className="w-6 h-6" />
            </button>
            
            <button
              onClick={nextImage}
              className="absolute right-4 text-white z-10 bg-black/50 p-3 rounded-full hover:bg-black/70 transition-colors"
            >
              <ChevronRight className="w-6 h-6" />
            </button>

            <div
              className="max-w-full max-h-full flex items-center justify-center cursor-grab active:cursor-grabbing select-none"
              onTouchStart={onTouchStart}
              onTouchMove={onTouchMove}
              onTouchEnd={onTouchEnd}
              onMouseDown={onMouseDown}
              onMouseMove={onMouseMove}
              onMouseUp={onMouseUp}
              onMouseLeave={onMouseLeave}
            >
              <img
                src={auction?.photos?.[currentImageIndex] || ''}
                alt={`${auction.year} ${auction.make} ${auction.model} - —Ñ–æ—Ç–æ ${currentImageIndex + 1}`}
                className="max-w-full max-h-full object-contain select-none pointer-events-none"
                onError={(e) => {
                  e.currentTarget.style.display = 'none';
                }}
                draggable={false}
              />
            </div>

            {/* Image indicator */}
            <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex items-center gap-2">
              {auction?.photos?.map((_: string, index: number) => (
                <button
                  key={index}
                  onClick={() => setCurrentImageIndex(index)}
                  className={`w-3 h-3 rounded-full transition-all ${
                    index === currentImageIndex ? 'bg-white' : 'bg-white/50'
                  }`}
                />
              ))}
            </div>

            {/* Image info */}
            <div className="absolute bottom-16 left-1/2 -translate-x-1/2 text-white text-center">
              <p className="text-lg font-medium">
                {auction?.make} {auction?.model}
              </p>
              <p className="text-sm opacity-80">
                –§–æ—Ç–æ {currentImageIndex + 1} –∏–∑ {auction?.photos?.length || 0}
              </p>
              <p className="text-xs opacity-60 mt-1">
                –õ–∏—Å—Ç–∞–π—Ç–µ –ø–∞–ª—å—Ü–µ–º –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –º—ã—à—å—é
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Epic Celebration Effect */}
      {showConfetti && (
        <div className="fixed inset-0 pointer-events-none z-50 overflow-hidden bg-black bg-opacity-20">
          {/* Central Explosion */}
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="relative">
              {/* Glowing Ring */}
              <div className="w-32 h-32 border-4 border-yellow-400 rounded-full animate-ping opacity-75"></div>
              <div className="absolute inset-0 w-32 h-32 border-4 border-blue-400 rounded-full animate-ping opacity-50" style={{animationDelay: '0.5s'}}></div>
              
              {/* Center Trophy */}
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-8xl animate-bounce filter drop-shadow-lg">üèÜ</div>
              </div>
            </div>
          </div>

          {/* Particle Explosion */}
          {[...Array(60)].map((_, i) => {
            const angle = (360 / 60) * i;
            const distance = 150 + Math.random() * 200;
            const size = Math.random() * 8 + 4;
            const colors = ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#FD79A8', '#A29BFE'];
            const color = colors[Math.floor(Math.random() * colors.length)];
            
            return (
              <div
                key={i}
                className="absolute rounded-full animate-pulse"
                style={{
                  left: '50%',
                  top: '50%',
                  width: `${size}px`,
                  height: `${size}px`,
                  backgroundColor: color,
                  transform: `translate(-50%, -50%) rotate(${angle}deg) translateY(-${distance}px)`,
                  animationDelay: `${Math.random() * 1}s`,
                  animationDuration: `${2 + Math.random() * 2}s`,
                  boxShadow: `0 0 ${size * 2}px ${color}`,
                  opacity: Math.random() * 0.8 + 0.2
                }}
              />
            );
          })}

          {/* Floating Text */}
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="text-center text-white font-bold text-2xl animate-bounce mt-32">
              <div className="text-lg">–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</div>
            </div>
          </div>

          {/* Sparkles */}
          {[...Array(20)].map((_, i) => (
            <div
              key={`sparkle-${i}`}
              className="absolute text-yellow-400 animate-ping"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 3}s`,
                fontSize: `${Math.random() * 20 + 15}px`
              }}
            >
              ‚ú®
            </div>
          ))}
        </div>
      )}

      {/* Activation Dialog */}
      <Dialog open={showActivationDialog} onOpenChange={setShowActivationDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                <span className="text-red-600">‚ö†Ô∏è</span>
              </div>
              –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            </DialogTitle>
            <DialogDescription>
              –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ WhatsApp –∏–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É 9000000.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="flex flex-col items-center space-y-3 mt-4">
            <Button 
              onClick={() => {
                window.open("https://wa.me/992000000000?text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–Ω–µ –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ AUTOBID.TJ", "_blank");
                setShowActivationDialog(false);
              }}
              className="bg-green-600 hover:bg-green-700 w-full max-w-xs"
            >
              –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
            </Button>
            <Button variant="outline" onClick={() => setShowActivationDialog(false)} className="w-full max-w-xs">
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ */}
      <BidConfirmationDialog
        isOpen={showBidConfirmation}
        onConfirm={handleConfirmBid}
        onCancel={handleCancelBid}
        bidAmount={pendingBidAmount}
        currentBid={auction.currentBid?.toString() || '0'}
        carTitle={`${auction?.make} ${auction?.model} ${auction?.year}`}
      />
    </div>
  );
}