import { createContext, useContext, useState, useEffect, ReactNode } from "react";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { useOptimizedRealTime } from "@/hooks/useOptimizedRealTime";
import WebSocketManager from "@/utils/WebSocketManager";

interface Auction {
  id: string;
  lotNumber: string;
  make: string;
  model: string;
  year: number;
  mileage: number;
  photos: string[];
  currentBid: number;
  startingPrice: string;
  bidCount: number;
  endTime: Date;
  status: 'active' | 'ended' | 'pending';
  customsCleared: boolean;
  recycled: boolean;
  technicalInspectionValid: boolean;
  technicalInspectionDate?: string;
  tinted: boolean;
  tintingDate?: string;
  condition?: string;
  fuelType?: string;
  electricRange?: number;
  batteryCapacity?: number;
  location?: string;
}

interface AuctionContextType {
  auctions: Auction[];
  loading: boolean;
  selectedAuction: Auction | null;
  setSelectedAuction: (auction: Auction | null) => void;
  refreshAuctions: () => void;
  updateAuctionRealTime: (listingId: number, updates: Partial<Auction>) => void;
}

const AuctionContext = createContext<AuctionContextType | undefined>(undefined);

export function AuctionProvider({ children }: { children: ReactNode }) {
  const [selectedAuction, setSelectedAuction] = useState<Auction | null>(null);
  const queryClient = useQueryClient();

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const { isConnected, forceUpdate } = useOptimizedRealTime({
    enableWebSocket: true,
    enablePolling: false, // –û—Ç–∫–ª—é—á–∞–µ–º polling, —Ç–∞–∫ –∫–∞–∫ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç
    pollingInterval: 5000, // Fallback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π WebSocketManager –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  useEffect(() => {
    const handleBidUpdate = (message: any) => {
      if (message.type === 'bid_placed') {
        console.log('üì© –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WebSocketManager:', message);
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞—É–∫—Ü–∏–æ–Ω–∞
        updateAuctionCard(message.listingId, {
          currentBid: parseFloat(message.currentBid) || 0,
          bidCount: message.bidCount || 0
        });
      } else if (message.type === 'listing_approved') {
        console.log('üéâ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ:', message);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        queryClient.invalidateQueries({
          queryKey: ['/api/listings']
        });
      }
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π WebSocketManager
    const wsManager = WebSocketManager.getInstance();
    const unsubscribe = wsManager.addMessageHandler(handleBidUpdate);
    
    return unsubscribe;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
  const updateAuctionCard = (listingId: number, updates: Partial<{ currentBid: number; bidCount: number }>) => {
    console.log('‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', listingId, updates);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à listings –≤ React Query
    queryClient.setQueryData(['/api/listings'], (oldData: any[]) => {
      if (!Array.isArray(oldData)) return oldData;
      
      return oldData.map(listing => 
        listing.id === listingId 
          ? { 
              ...listing, 
              currentBid: updates.currentBid?.toString() || listing.currentBid,
              bidCount: updates.bidCount || listing.bidCount
            }
          : listing
      );
    });
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  const updateAuctionRealTime = (listingId: number, updates: Partial<Auction>) => {
    updateAuctionCard(listingId, {
      currentBid: updates.currentBid,
      bidCount: updates.bidCount
    });
  };

  // –£–ª—å—Ç—Ä–∞-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const { data: listings = [], isLoading, refetch } = useQuery<any[]>({
    queryKey: ['/api/listings'],
    staleTime: 5 * 60 * 1000, // –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏ 5 –º–∏–Ω—É—Ç - WebSocket —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    gcTime: 15 * 60 * 1000, // –ö—ç—à –∂–∏–≤–µ—Ç 15 –º–∏–Ω—É—Ç
    refetchOnWindowFocus: false, // WebSocket –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    refetchOnMount: false, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    refetchOnReconnect: true, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    refetchInterval: false, // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ WebSocket
    retry: 2, // –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
    retryDelay: 1000, // –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏
  });

  // Transform listings to auctions format  
  const auctions: Auction[] = Array.isArray(listings) ? listings.map((listing: any) => {
    const endTime = new Date(listing.auctionEndTime || Date.now() + 86400000);
    const isExpired = endTime <= new Date();
    
    return {
      id: listing.id.toString(),
      lotNumber: listing.lotNumber || 'N/A',
      make: listing.make || 'Unknown',
      model: listing.model || 'Unknown', 
      year: listing.year || new Date().getFullYear(),
      mileage: listing.mileage || 0,
      photos: Array.isArray(listing.photos) ? listing.photos : [],
      currentBid: parseFloat(listing.currentBid) || parseFloat(listing.startingPrice) || 0,
      startingPrice: listing.startingPrice || '0',
      bidCount: listing.bidCount || 0,
      endTime: endTime,
      status: (listing.status === 'ended' || isExpired) ? 'ended' : listing.status,
      customsCleared: listing.customsCleared || false,
      recycled: listing.recycled || false,
      technicalInspectionValid: listing.technicalInspectionValid || false,
      technicalInspectionDate: listing.technicalInspectionDate,
      tinted: listing.tinted || false,
      tintingDate: listing.tintingDate,
      condition: listing.condition || 'good',
      fuelType: listing.fuelType,
      electricRange: listing.electricRange,
      batteryCapacity: listing.batteryCapacity,
      location: listing.location
    };
  }) : [];

  const refreshAuctions = () => {
    forceUpdate(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    refetch();
  };

  return (
    <AuctionContext.Provider value={{
      auctions,
      loading: isLoading,
      selectedAuction,
      setSelectedAuction,
      refreshAuctions,
      updateAuctionRealTime
    }}>
      {children}
    </AuctionContext.Provider>
  );
}

export function useAuctions() {
  const context = useContext(AuctionContext);
  if (context === undefined) {
    throw new Error('useAuctions must be used within an AuctionProvider');
  }
  return context;
}