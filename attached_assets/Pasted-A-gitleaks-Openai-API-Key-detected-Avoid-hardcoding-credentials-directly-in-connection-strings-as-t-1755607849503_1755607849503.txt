A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
autoauction_flutter/macos/Runner/Base.lproj/MainMenu.xib
        <menu title="Main Menu" systemMenu="main" id="AYu-sK-qS6">
Detected potential vulnerability in build-replit.js
Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed.
build-replit.js
    const child = spawn(command, args, { stdio: 'inherit' });
Detected potential vulnerability in production.js
A gitleaks Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
production.js
      password: "a6d5d8b47551199899862d6d768a4cb1",
Detected potential vulnerability in production.js
A gitleaks Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
production.js
        password: "a6d5d8b47551199899862d6d768a4cb1",
Detected potential vulnerability in server/routes.ts
A gitleaks Generic API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
server/routes.ts
    const password = "a6d5d8b47551199899862d6d768a4cb1";  // VPS v6 ожидает простой пароль
Detected potential vulnerability in server/routes.ts
Unencrypted request over HTTP detected.
server/routes.ts
    const response = await fetch(VPS_PROXY_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'AUTOBID.TJ Replit Client'
      },
      body: JSON.stringify(smsPayload)
    });
Detected potential vulnerability in server/routes.ts
Unencrypted request over HTTP detected.
server/routes.ts
    const response = await fetch(VPS_PROXY_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'AUTOBID.TJ Replit Client'
      },
      body: JSON.stringify({
        login: "zarex",
        hash: "a6d5d8b47551199899862d6d768a4cb1",
        sender: "OsonSMS",
        to: phoneNumber.replace(/[^0-9]/g, ''),
        text: message
      })
    });