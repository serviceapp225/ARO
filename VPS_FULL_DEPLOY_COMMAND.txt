# 🚀 ЕДИНАЯ КОМАНДА РАЗВЕРТЫВАНИЯ AUTOBID.TJ НА VPS 188.166.61.86

# Скопируйте и выполните эту команду на VPS:

sudo systemctl stop autobid autobid-full 2>/dev/null; sudo tee /var/www/autobid/production-server.js > /dev/null << 'EOF'
const express = require('express');
const { Pool } = require('pg');
const app = express();
const PORT = 3001;

app.use(express.json());
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization, x-user-id, x-user-email');
  if (req.method === 'OPTIONS') { res.sendStatus(200); } else { next(); }
});

const pool = new Pool({
  connectionString: 'postgresql://autobid_user:AutoBid2025@localhost:5432/autobid_db',
  ssl: false
});

app.use('/assets', express.static('/var/www/autobid/dist/public/assets'));
app.use(express.static('/var/www/autobid/dist/public'));

app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', service: 'AutoBid.TJ Production', timestamp: new Date().toISOString() });
});

app.get('/api/test-infrastructure', async (req, res) => {
  try {
    const result = await pool.query('SELECT COUNT(*) FROM users');
    res.json({ status: 'OK', users: result.rows[0].count, uptime: Math.floor(process.uptime()) });
  } catch (error) {
    res.status(500).json({ status: 'ERROR', error: error.message });
  }
});

app.get('/api/listings', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM car_listings WHERE status = \'active\' ORDER BY created_at DESC LIMIT 20');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch listings' });
  }
});

app.get('/api/users/:id', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM users WHERE id = $1', [req.params.id]);
    res.json(result.rows[0] || {});
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch user' });
  }
});

app.get('/api/notifications/:userId', (req, res) => { res.json([]); });
app.get('/api/advertisement-carousel', (req, res) => { res.json([{id: 1, title: 'Добро пожаловать в AutoBid.TJ'}]); });
app.get('/api/sell-car-banner', (req, res) => { res.json({id: 1, title: 'Продай свое авто!'}); });
app.get('/api/users/:id/favorites', (req, res) => { res.json([]); });
app.get('/api/messages/unread-count/:userId', (req, res) => { res.json({ count: "0" }); });

app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) {
    res.status(404).json({ error: 'API endpoint not found' });
  } else {
    res.sendFile('/var/www/autobid/dist/public/index.html');
  }
});

app.listen(PORT, '0.0.0.0', () => {
  console.log('🚀 AutoBid.TJ Production Server running on port ' + PORT);
});
EOF

sudo tee /etc/systemd/system/autobid.service > /dev/null << 'EOF'
[Unit]
Description=AutoBid.TJ Production
After=network.target postgresql.service

[Service]
Type=simple
User=www-data
WorkingDirectory=/var/www/autobid
Environment=NODE_ENV=production
ExecStart=/usr/bin/node production-server.js
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

cd /var/www/autobid && sudo npm install pg express && sudo chown -R www-data:www-data /var/www/autobid && sudo systemctl daemon-reload && sudo systemctl enable autobid && sudo systemctl start autobid && sleep 5 && sudo systemctl status autobid --no-pager && curl -s http://localhost:3001/api/health && sudo nginx -t && sudo systemctl reload nginx && echo "✅ AutoBid.TJ готов: http://188.166.61.86"

# ============================================================================
# После выполнения этой команды AutoBid.TJ будет полностью работать!
# 
# Проверить:
# - http://188.166.61.86/api/health (статус сервера)
# - http://188.166.61.86/api/test-infrastructure (тест БД)
# - http://188.166.61.86 (фронтенд)
# 
# Время выполнения: 2-3 минуты
# ============================================================================