#!/usr/bin/env node

import { execSync } from 'child_process';
import { existsSync } from 'fs';
import express from 'express';
import { createServer } from 'http';

console.log('üöÄ –ó–∞–ø—É—Å–∫ Replit –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ—è...');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.NODE_ENV = 'production';
const PORT = process.env.PORT || 5000;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
function killExistingProcesses() {
  try {
    execSync('pkill -f "tsx.*server/index"', { stdio: 'ignore' });
  } catch (e) {
    // –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è
async function deploy() {
  try {
    console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
    killExistingProcesses();
    
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    if (!existsSync('./dist/index.js')) {
      console.log('–°–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è—é —Å–±–æ—Ä–∫—É...');
      execSync('npm run build', { stdio: 'inherit' });
    }
    
    console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞...');
    
    // –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    const serverModule = await import('./dist/index.js');
    
    console.log(`‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error.message);
    
    // –§–æ–ª–ª–±—ç–∫ - –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–±–æ—Ä–∫–∏
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏...');
    try {
      const fallbackModule = await import('./dist/index.js');
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ–ª–ª–±—ç–∫');
    } catch (fallbackError) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', fallbackError.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è
deploy();