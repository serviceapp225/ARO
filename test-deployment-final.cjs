#!/usr/bin/env node

// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ deployment
console.log("üöÄ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö DEPLOYMENT - AUTOBID.TJ");
console.log("=" .repeat(50));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
console.log(`NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
console.log(`PORT: ${process.env.PORT || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
const fs = require('fs');
const path = require('path');

console.log("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:");
const requiredFiles = [
  'dist/index.js',
  'dist/public/index.html',
  'dist/autoauction.db',
  'package.json'
];

let allFilesExist = true;
requiredFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) allFilesExist = false;
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
console.log("\nüìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤:");
try {
  const serverSize = fs.statSync('dist/index.js').size;
  const dbSize = fs.statSync('dist/autoauction.db').size;
  const publicSize = fs.statSync('dist/public/index.html').size;
  
  console.log(`–°–µ—Ä–≤–µ—Ä: ${(serverSize / 1024).toFixed(1)}KB`);
  console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${(dbSize / 1024 / 1024).toFixed(1)}MB`);
  console.log(`–§—Ä–æ–Ω—Ç–µ–Ω–¥: ${(publicSize / 1024).toFixed(1)}KB`);
  
  const totalSize = serverSize + dbSize + publicSize;
  console.log(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / 1024 / 1024).toFixed(1)}MB`);
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
console.log("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json:");
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  console.log(`‚úÖ start –∫–æ–º–∞–Ω–¥–∞: ${packageJson.scripts.start}`);
  console.log(`‚úÖ build –∫–æ–º–∞–Ω–¥–∞: ${packageJson.scripts.build}`);
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ .replit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ .replit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:");
try {
  const replitConfig = fs.readFileSync('.replit', 'utf8');
  const hasDeployment = replitConfig.includes('[deployment]');
  const hasPortConfig = replitConfig.includes('localPort = 3000');
  
  console.log(`${hasDeployment ? '‚úÖ' : '‚ùå'} Deployment –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è`);
  console.log(`${hasPortConfig ? '‚úÖ' : '‚ùå'} –ü–æ—Ä—Ç 3000 –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .replit");
}

// –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
console.log("\n" + "=" .repeat(50));
if (allFilesExist) {
  console.log("üéâ –ì–û–¢–û–í–û –ö DEPLOYMENT!");
  console.log("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
  console.log("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PORT=3000 –≤ production");
  console.log("2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'Deploy' –≤ Replit");
  console.log("3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è deployment");
  console.log("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ deployment URL");
} else {
  console.log("‚ùå –ù–ï –ì–û–¢–û–í–û –ö DEPLOYMENT");
  console.log("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ deployment");
}

console.log("\nüîó –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:");
console.log("- /api/health - Health check");
console.log("- /api/database-status - –°—Ç–∞—Ç—É—Å –ë–î");
console.log("=" .repeat(50));