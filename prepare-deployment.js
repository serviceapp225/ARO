#!/usr/bin/env node

import fs from 'fs';
import path from 'path';

console.log('üîß –ü–û–î–ì–û–¢–û–í–ö–ê –ö DEPLOYMENT - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò XX000');

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º .env —Ñ–∞–π–ª - —É–±–∏—Ä–∞–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è PostgreSQL
const envContent = `# PRODUCTION ENVIRONMENT
NODE_ENV=production
PORT=3000

# SMS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–µ–º–æ —Ä–µ–∂–∏–º)
SMS_LOGIN=demo
SMS_HASH=demo
SMS_SENDER=demo
SMS_SERVER=demo

# –ê–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_API_KEY=admin-key-2025

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite
USE_SQLITE=true
SQLITE_PATH=./autoauction.db

# –û—Ç–∫–ª—é—á–∞–µ–º PostgreSQL –ø–æ–ª–Ω–æ—Å—Ç—å—é
DATABASE_URL=
POSTGRES_URL=
NEON_DATABASE_URL=
`;

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π .env
fs.writeFileSync('dist/.env', envContent);

// –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è deployment
const deploymentServer = `#!/usr/bin/env node

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è deployment
process.on('uncaughtException', (err) => {
  console.error('‚ùå DEPLOYMENT ERROR:', err.message);
  console.error('Stack:', err.stack);
  if (err.message.includes('XX000') || err.message.includes('PostgreSQL')) {
    console.error('üîç –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –≤ deployment');
    console.error('‚úÖ –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –≤–º–µ—Å—Ç–æ PostgreSQL');
  }
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå UNHANDLED REJECTION:', reason);
  process.exit(1);
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º PostgreSQL
process.env.DATABASE_URL = '';
process.env.POSTGRES_URL = '';
process.env.NEON_DATABASE_URL = '';
process.env.USE_SQLITE = 'true';
process.env.SQLITE_PATH = './autoauction.db';

console.log('üöÄ DEPLOYMENT –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù');
console.log('üóÑÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
console.log('üö´ PostgreSQL –æ—Ç–∫–ª—é—á–µ–Ω');
console.log('üìç –ü–æ—Ä—Ç:', process.env.PORT || 3000);

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
import('./index.js').catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  process.exit(1);
});
`;

fs.writeFileSync('dist/index-deploy.js', deploymentServer);

// –û–±–Ω–æ–≤–ª—è–µ–º package.json –¥–ª—è deployment
const pkg = JSON.parse(fs.readFileSync('dist/package.json', 'utf8'));
pkg.scripts.start = 'node index-deploy.js';
pkg.main = 'index-deploy.js';
fs.writeFileSync('dist/package.json', JSON.stringify(pkg, null, 2));

console.log('‚úÖ –°–æ–∑–¥–∞–Ω deployment —Å–µ—Ä–≤–µ—Ä –±–µ–∑ PostgreSQL');
console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .env —Ñ–∞–π–ª');
console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω package.json');
console.log('');
console.log('üéØ –¢–ï–ü–ï–†–¨ DEPLOYMENT –î–û–õ–ñ–ï–ù –†–ê–ë–û–¢–ê–¢–¨:');
console.log('1. PostgreSQL –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω');
console.log('2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ SQLite');
console.log('3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
console.log('');
console.log('üëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ deployment –µ—â–µ —Ä–∞–∑!');