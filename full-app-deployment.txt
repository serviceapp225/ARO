# üöÄ –°–õ–ï–î–£–Æ–©–ò–ô –≠–¢–ê–ü: –ü–û–õ–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

## 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

```bash
ssh root@188.166.61.86 << 'FULL_APP'
cd ~/autobid-tj

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ app.js —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ë–î
cat > app.js << 'APP_FULL'
const express = require('express');
const { Pool } = require('pg');
const app = express();
const PORT = process.env.PORT || 3001;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://autobid_user:AutoBid2025Secure@localhost:5432/autobid_db'
});

app.use(express.json({ limit: '10mb' }));
app.use(express.static('public'));

// Health check —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ë–î
app.get('/health', async (req, res) => {
  try {
    const result = await pool.query('SELECT NOW()');
    res.json({ 
      status: 'OK', 
      service: 'AutoBid.TJ',
      database: 'Connected',
      timestamp: result.rows[0].now,
      port: PORT,
      uptime: Math.floor(process.uptime())
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'ERROR', 
      service: 'AutoBid.TJ',
      database: 'Disconnected',
      error: error.message
    });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', async (req, res) => {
  try {
    const result = await pool.query('SELECT id, email, phone_number, is_active, role FROM users');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
app.get('/api/listings', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM car_listings WHERE status = $1', ['active']);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–æ–≤
app.get('/api/banners', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM banners WHERE is_active = true');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
app.get('/', async (req, res) => {
  try {
    const usersResult = await pool.query('SELECT COUNT(*) as count FROM users');
    const bannersResult = await pool.query('SELECT COUNT(*) as count FROM banners WHERE is_active = true');
    const userCount = usersResult.rows[0].count;
    const bannerCount = bannersResult.rows[0].count;
    
    res.send(\`
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>AutoBid.TJ - –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ê—É–∫—Ü–∏–æ–Ω—ã</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, system-ui, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            min-height: 100vh; 
            color: #333;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; color: white; margin-bottom: 40px; padding: 40px 0; }
        .header h1 { font-size: 3.5rem; margin-bottom: 10px; text-shadow: 0 4px 8px rgba(0,0,0,0.3); }
        .card { background: white; border-radius: 20px; padding: 30px; margin: 20px 0; box-shadow: 0 20px 60px rgba(0,0,0,0.1); }
        .status-ok { background: linear-gradient(135deg, #4CAF50, #45a049); color: white; text-align: center; border-radius: 15px; padding: 25px; font-size: 1.2rem; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 20px; margin: 30px 0; }
        .info-box { background: #f8f9ff; padding: 20px; border-radius: 15px; border-left: 5px solid #667eea; }
        .btn { display: inline-block; background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 15px 30px; text-decoration: none; border-radius: 50px; margin: 10px; }
        .footer { text-align: center; color: white; opacity: 0.8; margin-top: 50px; padding: 20px; }
        .api-section { background: #e8f4fd; padding: 20px; border-radius: 15px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöó AutoBid.TJ</h1>
            <p>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–∞ VPS</p>
        </div>
        
        <div class="card">
            <div class="status-ok">‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç!</div>
            
            <div class="grid">
                <div class="info-box">
                    <h4>üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
                    <p>PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞</p>
                </div>
                <div class="info-box">
                    <h4>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h4>
                    <p>\${userCount} –≤ —Å–∏—Å—Ç–µ–º–µ</p>
                </div>
                <div class="info-box">
                    <h4>üì¢ –ë–∞–Ω–Ω–µ—Ä—ã</h4>
                    <p>\${bannerCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö</p>
                </div>
                <div class="info-box">
                    <h4>‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</h4>
                    <p>\${Math.floor(process.uptime() / 60)} –º–∏–Ω—É—Ç</p>
                </div>
            </div>
            
            <div class="api-section">
                <h3>üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ API:</h3>
                <p><strong>/api/users</strong> - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                <p><strong>/api/listings</strong> - –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</p>  
                <p><strong>/api/banners</strong> - –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã</p>
                <p><strong>/health</strong> - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</p>
            </div>
            
            <div style="text-align: center;">
                <a href="/health" class="btn">üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã</a>
                <a href="/api/users" class="btn">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</a>
                <a href="/api/banners" class="btn">üì¢ –ë–∞–Ω–Ω–µ—Ä—ã</a>
            </div>
        </div>
        
        <div class="footer">
            <p><strong>AutoBid.TJ</strong> ¬© 2025 | VPS: 188.166.61.86</p>
            <p>PostgreSQL + Express.js + nginx</p>
        </div>
    </div>
</body>
</html>
    \`);
  } catch (error) {
    res.status(500).send('<h1>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h1><p>' + error.message + '</p>');
  }
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(\`üöÄ AutoBid.TJ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://188.166.61.86:\${PORT}\`);
  console.log('üóÑÔ∏è PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
});
APP_FULL

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json —Å pg –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é
npm install pg

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
systemctl restart autobid

echo "‚úÖ –ü–æ–ª–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ë–î —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ!"
echo "üåê –°–∞–π—Ç: http://188.166.61.86"
echo "üè• Health: http://188.166.61.86/health"
echo "üìä API: http://188.166.61.86/api/users"
FULL_APP
```

## –†–µ–∑—É–ª—å—Ç–∞—Ç:
- –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å PostgreSQL
- API endpoints –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏