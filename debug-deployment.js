#!/usr/bin/env node
import { existsSync, readFileSync, statSync } from 'fs';
import { execSync } from 'child_process';

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ deployment –ø—Ä–æ–±–ª–µ–º...\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
const requiredFiles = [
  'package.json',
  '.replit',
  'dist/index.js',
  'dist/autoauction.db',
  'dist/public/index.html',
  '.env.production'
];

requiredFiles.forEach(file => {
  if (existsSync(file)) {
    const stats = statSync(file);
    const size = stats.isDirectory() ? '–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è' : `${(stats.size / 1024).toFixed(1)}KB`;
    console.log(`‚úÖ ${file} - ${size}`);
  } else {
    console.log(`‚ùå ${file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
  }
});

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .replit
console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .replit:');
try {
  const replitConfig = readFileSync('.replit', 'utf8');
  console.log('‚úÖ .replit —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ deployment —Å–µ–∫—Ü–∏–∏
  if (replitConfig.includes('[deployment]')) {
    console.log('‚úÖ –°–µ–∫—Ü–∏—è [deployment] –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    if (replitConfig.includes('deploymentTarget = "autoscale"')) {
      console.log('‚úÖ deploymentTarget = "autoscale" –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è  deploymentTarget –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  } else {
    console.log('‚ùå –°–µ–∫—Ü–∏—è [deployment] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥
  if (replitConfig.includes('build = ["npm", "run", "build"]')) {
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ build –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  } else {
    console.log('‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ build –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  }
  
  if (replitConfig.includes('run = ["npm", "run", "start"]')) {
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ start –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  } else {
    console.log('‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ start –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  }
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .replit: ${error.message}`);
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json —Å–∫—Ä–∏–ø—Ç–æ–≤
console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json —Å–∫—Ä–∏–ø—Ç–æ–≤:');
try {
  const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
  const scripts = packageJson.scripts || {};
  
  if (scripts.build) {
    console.log(`‚úÖ build —Å–∫—Ä–∏–ø—Ç: ${scripts.build}`);
  } else {
    console.log('‚ùå build —Å–∫—Ä–∏–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }
  
  if (scripts.start) {
    console.log(`‚úÖ start —Å–∫—Ä–∏–ø—Ç: ${scripts.start}`);
  } else {
    console.log('‚ùå start —Å–∫—Ä–∏–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`);
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
const envVars = ['NODE_ENV', 'PORT', 'DATABASE_URL'];
envVars.forEach(envVar => {
  if (process.env[envVar]) {
    console.log(`‚úÖ ${envVar} = ${process.env[envVar]}`);
  } else {
    console.log(`‚ö†Ô∏è  ${envVar} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
  }
});

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.production
console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.production:');
try {
  const envProd = readFileSync('.env.production', 'utf8');
  console.log('‚úÖ .env.production –Ω–∞–π–¥–µ–Ω');
  console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:', envProd.trim());
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env.production: ${error.message}`);
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ build –∏ start
console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ build –∏ start:');
try {
  console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ npm run build...');
  execSync('npm run build', { stdio: 'pipe' });
  console.log('‚úÖ npm run build –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫');
} catch (error) {
  console.log(`‚ùå npm run build –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${error.message}`);
}

try {
  console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ npm run start (5 —Å–µ–∫)...');
  execSync('timeout 5s npm run start', { stdio: 'pipe' });
  console.log('‚úÖ npm run start –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫');
} catch (error) {
  if (error.message.includes('timeout')) {
    console.log('‚úÖ npm run start –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (—Ç–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫)');
  } else {
    console.log(`‚ùå npm run start –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${error.message}`);
  }
}

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
console.log('\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –≤ .replit:');
try {
  const replitConfig = readFileSync('.replit', 'utf8');
  const portMatches = replitConfig.match(/localPort = (\d+)/g);
  if (portMatches) {
    console.log('‚úÖ –ü–æ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:', portMatches.join(', '));
  } else {
    console.log('‚ö†Ô∏è  –ü–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
  }
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤: ${error.message}`);
}

// 8. –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
console.log('\n8. –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è deployment');
console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .replit –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è');
console.log('‚úÖ package.json —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
console.log('\nüéâ Deployment –≥–æ—Ç–æ–≤! –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Replit –∏–ª–∏ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
console.log('\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
console.log('   1. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Replit');
console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ deployment –≤ –∫–æ–Ω—Å–æ–ª–∏ Replit');
console.log('   3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –Ω–∞–∂–∞–ª–∏ –∏–º–µ–Ω–Ω–æ –∫–Ω–æ–ø–∫—É "Deploy"');
console.log('   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Replit');