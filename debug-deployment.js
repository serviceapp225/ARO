#!/usr/bin/env node

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AutoBid.TJ –Ω–∞ VPS
// –ó–∞–ø—É—Å–∫: node debug-deployment.js

const fs = require('fs');
const path = require('path');

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AutoBid.TJ\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
const vpsPath = '/var/www/autobid';
const requiredFiles = [
  'dist/index.js',
  'dist/public/index.html', 
  '.env',
  'package.json'
];

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');
requiredFiles.forEach(file => {
  const fullPath = path.join(vpsPath, file);
  const exists = fs.existsSync(fullPath);
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
const envPath = path.join(vpsPath, '.env');
if (fs.existsSync(envPath)) {
  console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env:');
  const envContent = fs.readFileSync(envPath, 'utf8');
  const requiredVars = ['NODE_ENV', 'PORT', 'DATABASE_URL'];
  
  requiredVars.forEach(varName => {
    const hasVar = envContent.includes(`${varName}=`);
    console.log(`   ${hasVar ? '‚úÖ' : '‚ùå'} ${varName}`);
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞
const serverPath = path.join(vpsPath, 'dist/index.js');
if (fs.existsSync(serverPath)) {
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:');
  const serverContent = fs.readFileSync(serverPath, 'utf8');
  const serverSize = fs.statSync(serverPath).size;
  console.log(`   ‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(serverSize/1024)}KB`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
  const checks = [
    { name: 'Express', pattern: /express/ },
    { name: 'Database', pattern: /DATABASE_URL|drizzle/ },
    { name: 'WebSocket', pattern: /WebSocket|ws/ },
    { name: 'Error handling', pattern: /try|catch|error/ }
  ];
  
  checks.forEach(check => {
    const found = check.pattern.test(serverContent);
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
console.log('\nüöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞ VPS:');
console.log('systemctl status autobid-full');
console.log('journalctl -u autobid-full --no-pager -l');
console.log('curl -v http://localhost:3001/api/health');
console.log('ps aux | grep node');

console.log('\nüîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
console.log('systemctl restart autobid-full');
console.log('nginx -t && systemctl reload nginx');
console.log('tail -f /var/log/nginx/error.log');

console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ VPS:');
console.log('1. –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: systemctl status autobid-full');
console.log('2. –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: journalctl -u autobid-full -f');
console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞: netstat -tlnp | grep 3001');
console.log('4. –¢–µ—Å—Ç API –Ω–∞–ø—Ä—è–º—É—é: curl http://localhost:3001/api/health');
console.log('5. Nginx –ª–æ–≥–∏: tail -f /var/log/nginx/error.log');